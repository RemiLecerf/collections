{
    "csw": {
        "cds": {
            "GetCapabilities": {
                "sections": [
                    "ServiceIdentification",
                    "ServiceProvider",
                    "OperationsMetadata",
                    "Filter_Capabilities"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ]
            },
            "DescribeRecord": {
                "outputFormat": [
                    "application/xml"
                ],
                "schemaLanguage": [
                    "http://www.w3.org/TR/xmlschema-1/"
                ],
                "outputSchema": [
                    "http://www.opengis.net/cat/csw/2.0.2",
                    "http://www.isotc211.org/2005/gfc",
                    "http://www.w3.org/ns/dcat#",
                    "http://www.isotc211.org/2005/gmd"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ]
            },
            "GetDomain": {},
            "GetRecords": {
                "resultType": [
                    "hits",
                    "results",
                    "validate"
                ],
                "outputFormat": [
                    "application/xml"
                ],
                "outputSchema": [
                    "http://www.opengis.net/cat/csw/2.0.2",
                    "http://www.isotc211.org/2005/gfc",
                    "http://www.w3.org/ns/dcat#",
                    "http://www.isotc211.org/2005/gmd"
                ],
                "typeNames": [
                    "csw:Record",
                    "gfc:FC_FeatureCatalogue",
                    "dcat",
                    "gmd:MD_Metadata"
                ],
                "CONSTRAINTLANGUAGE": [
                    "FILTER",
                    "CQL_TEXT"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ],
                "SupportedISOQueryables": [
                    "CreationDate",
                    "GeographicDescriptionCode",
                    "OperatesOn",
                    "Modified",
                    "DistanceUOM",
                    "Operation",
                    "ResourceIdentifier",
                    "Format",
                    "Identifier",
                    "Language",
                    "ServiceType",
                    "OrganisationName",
                    "KeywordType",
                    "AnyText",
                    "PublicationDate",
                    "AlternateTitle",
                    "Abstract",
                    "HasSecurityConstraints",
                    "Title",
                    "CouplingType",
                    "TopicCategory",
                    "ParentIdentifier",
                    "Subject",
                    "ResourceLanguage",
                    "TempExtent_end",
                    "ServiceTypeVersion",
                    "Type",
                    "RevisionDate",
                    "OperatesOnName",
                    "Denominator",
                    "DistanceValue",
                    "TempExtent_begin",
                    "OperatesOnIdentifier"
                ],
                "AdditionalQueryables": [
                    "SpecificationDate",
                    "AccessConstraints",
                    "ResponsiblePartyRole",
                    "Degree",
                    "Lineage",
                    "OnlineResourceMimeType",
                    "ConditionApplyingToAccessAndUse",
                    "Date",
                    "MetadataPointOfContact",
                    "OnlineResourceType",
                    "Relation",
                    "SpecificationDateType",
                    "Classification",
                    "OtherConstraints",
                    "SpecificationTitle"
                ]
            },
            "GetRecordById": {
                "outputSchema": [
                    "http://www.opengis.net/cat/csw/2.0.2",
                    "http://www.isotc211.org/2005/gfc",
                    "http://www.w3.org/ns/dcat#",
                    "http://www.isotc211.org/2005/gmd"
                ],
                "outputFormat": [
                    "application/xml"
                ],
                "resultType": [
                    "hits",
                    "results",
                    "validate"
                ],
                "ElementSetName": [
                    "brief",
                    "summary",
                    "full"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ]
            },
            "Transaction": {},
            "Harvest": {
                "ResourceType": [
                    "http://www.isotc211.org/schemas/2005/gmd/"
                ]
            },
            "namespaces": {
                "csw": {
                    "typeName": "csw:Record",
                    "outputSchema": "http://www.opengis.net/cat/csw/2.0.2"
                },
                "gfc": {
                    "typeName": "gfc:FC_FeatureCatalogue",
                    "outputSchema": "http://www.isotc211.org/2005/gfc"
                },
                "dcat": {
                    "typeName": "dcat",
                    "outputSchema": "http://www.w3.org/ns/dcat#"
                },
                "gmd": {
                    "typeName": "gmd:MD_Metadata",
                    "outputSchema": "http://www.isotc211.org/2005/gmd"
                }
            }
        },
        "clms": {
            "GetCapabilities": {
                "sections": [
                    "ServiceIdentification",
                    "ServiceProvider",
                    "OperationsMetadata",
                    "Filter_Capabilities"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ]
            },
            "DescribeRecord": {
                "outputFormat": [
                    "application/xml"
                ],
                "schemaLanguage": [
                    "http://www.w3.org/TR/xmlschema-1/"
                ],
                "outputSchema": [
                    "http://www.opengis.net/cat/csw/2.0.2",
                    "http://www.isotc211.org/2005/gfc",
                    "http://www.w3.org/ns/dcat#",
                    "http://www.isotc211.org/2005/gmd"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ]
            },
            "GetDomain": {},
            "GetRecords": {
                "resultType": [
                    "hits",
                    "results",
                    "validate"
                ],
                "outputFormat": [
                    "application/xml"
                ],
                "outputSchema": [
                    "http://www.opengis.net/cat/csw/2.0.2",
                    "http://www.isotc211.org/2005/gfc",
                    "http://www.w3.org/ns/dcat#",
                    "http://www.isotc211.org/2005/gmd"
                ],
                "typeNames": [
                    "csw:Record",
                    "gfc:FC_FeatureCatalogue",
                    "dcat",
                    "gmd:MD_Metadata"
                ],
                "CONSTRAINTLANGUAGE": [
                    "FILTER",
                    "CQL_TEXT"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ],
                "SupportedISOQueryables": [
                    "CreationDate",
                    "GeographicDescriptionCode",
                    "OperatesOn",
                    "Modified",
                    "DistanceUOM",
                    "Operation",
                    "ResourceIdentifier",
                    "Format",
                    "Identifier",
                    "Language",
                    "ServiceType",
                    "OrganisationName",
                    "KeywordType",
                    "AnyText",
                    "PublicationDate",
                    "AlternateTitle",
                    "Abstract",
                    "HasSecurityConstraints",
                    "Title",
                    "CouplingType",
                    "TopicCategory",
                    "ParentIdentifier",
                    "Subject",
                    "ResourceLanguage",
                    "TempExtent_end",
                    "ServiceTypeVersion",
                    "Type",
                    "RevisionDate",
                    "OperatesOnName",
                    "Denominator",
                    "DistanceValue",
                    "TempExtent_begin",
                    "OperatesOnIdentifier"
                ],
                "AdditionalQueryables": [
                    "SpecificationDate",
                    "AccessConstraints",
                    "ResponsiblePartyRole",
                    "Degree",
                    "Lineage",
                    "OnlineResourceMimeType",
                    "ConditionApplyingToAccessAndUse",
                    "Date",
                    "MetadataPointOfContact",
                    "OnlineResourceType",
                    "Relation",
                    "SpecificationDateType",
                    "Classification",
                    "OtherConstraints",
                    "SpecificationTitle"
                ]
            },
            "GetRecordById": {
                "outputSchema": [
                    "http://www.opengis.net/cat/csw/2.0.2",
                    "http://www.isotc211.org/2005/gfc",
                    "http://www.w3.org/ns/dcat#",
                    "http://www.isotc211.org/2005/gmd"
                ],
                "outputFormat": [
                    "application/xml"
                ],
                "resultType": [
                    "hits",
                    "results",
                    "validate"
                ],
                "ElementSetName": [
                    "brief",
                    "summary",
                    "full"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ]
            },
            "Transaction": {},
            "Harvest": {
                "ResourceType": [
                    "http://www.isotc211.org/schemas/2005/gmd/"
                ]
            },
            "namespaces": {
                "csw": {
                    "typeName": "csw:Record",
                    "outputSchema": "http://www.opengis.net/cat/csw/2.0.2"
                },
                "gfc": {
                    "typeName": "gfc:FC_FeatureCatalogue",
                    "outputSchema": "http://www.isotc211.org/2005/gfc"
                },
                "dcat": {
                    "typeName": "dcat",
                    "outputSchema": "http://www.w3.org/ns/dcat#"
                },
                "gmd": {
                    "typeName": "gmd:MD_Metadata",
                    "outputSchema": "http://www.isotc211.org/2005/gmd"
                }
            }
        },
        "eum": {
            "DescribeRecord": {
                "outputFormat": [
                    "application/xml",
                    "text/xml"
                ],
                "outputSchema": [
                    "http://www.eumetsat.int/2008/gmi"
                ]
            },
            "GetCapabilities": {
                "AcceptVersions": [
                    "2.0.2"
                ],
                "Sections": [
                    "All",
                    "Filter_Capabilities",
                    "OperationsMetadata",
                    "ServiceIdentification",
                    "ServiceProvider"
                ]
            },
            "GetRecordById": {
                "ElementSetName": [
                    "brief",
                    "full",
                    "summary"
                ],
                "outputFormat": [
                    "application/x-kvp",
                    "application/xml",
                    "text/xml"
                ],
                "outputSchema": [
                    "http://www.eumetsat.int/2008/gmi",
                    "http://www.isotc211.org/2005/gmd",
                    "http://www.isotc211.org/2005/gmi",
                    "http://www.opengis.net/cat/csw/2.0.2"
                ]
            },
            "GetRecords": {
                "CONSTRAINTLANGUAGE": [
                    "Filter",
                    "LUCENE"
                ],
                "CONSTRAINT_LANGUAGE_VERSION": [
                    "1.1.0",
                    "7.7.3"
                ],
                "ElementSetName": [
                    "brief",
                    "full",
                    "summary"
                ],
                "outputFormat": [
                    "application/x-kvp",
                    "application/xml",
                    "text/xml"
                ],
                "outputSchema": [
                    "http://www.eumetsat.int/2008/gmi",
                    "http://www.isotc211.org/2005/gmd",
                    "http://www.isotc211.org/2005/gmi",
                    "http://www.opengis.net/cat/csw/2.0.2"
                ],
                "resultType": [
                    "hits",
                    "results",
                    "validate"
                ],
                "typeNames": [
                    "csw:Record",
                    "gmd:MD_Metadata",
                    "gmi:MI_Metadata"
                ],
                "AdditionalQueryables": [
                    "AccessConstraints",
                    "Aggregate",
                    "AnyText",
                    "Availability",
                    "AvailableFormats",
                    "AvailableFormatsVersion",
                    "Classification",
                    "ConditionApplyingToAccessAndUse",
                    "DataPolicy",
                    "Degree",
                    "EUMETCASTChannels",
                    "FileFormatDescription",
                    "Frequency",
                    "HierarchyLevelName",
                    "Identifier",
                    "Lineage",
                    "OtherConstraints",
                    "ResponsiblePartyRole",
                    "SBA",
                    "SpecificationDate",
                    "SpecificationDateType",
                    "SpecificationTitle",
                    "UseConstraints",
                    "abstract",
                    "access_constraint",
                    "aggregateIdentifier",
                    "aggregationInfo",
                    "alternateTitle",
                    "availability",
                    "availableFormats",
                    "availableFormatsVersion",
                    "boundingbox",
                    "category",
                    "conditions",
                    "coverage",
                    "creation_date",
                    "creationdate",
                    "dataCiteIdentifier",
                    "data_policy",
                    "datasetLanguage",
                    "datasetTitle",
                    "dateStamp",
                    "degree",
                    "digitalTransfers",
                    "distribution",
                    "distributorContact",
                    "doi",
                    "doiCreator",
                    "doiEdition",
                    "eumdata",
                    "eumetcast_channels",
                    "eumetsatDataPolicy",
                    "eumetsatDataPolicyUrl",
                    "fileIdentifier",
                    "file_format_description",
                    "footprint",
                    "frequency",
                    "fulltext",
                    "geographicdescriptioncode",
                    "hassecurityconstraints",
                    "hierarchyLevel",
                    "hierarchyLevelName",
                    "id",
                    "ident_identifier",
                    "identifier",
                    "instrument",
                    "instrument_type",
                    "iopaccess",
                    "iseumdata",
                    "keywords",
                    "keywordsAsObjects",
                    "keywords_types",
                    "keywordtype",
                    "language",
                    "location",
                    "modified",
                    "onlineResource",
                    "orbitNominalLongitude",
                    "orbitType",
                    "organisationname",
                    "other_constraints",
                    "parent",
                    "parentidentifier",
                    "productLevel",
                    "productResolution",
                    "productStatus",
                    "publication_date",
                    "publicationdate",
                    "quality_statement",
                    "referencedProducts",
                    "resourceIdentifier",
                    "resourceType",
                    "resourcelanguage",
                    "responsibleParty",
                    "responsiblePartyRole",
                    "responsible_org",
                    "revision_date",
                    "revisiondate",
                    "satellite",
                    "satellite description",
                    "satellite_description",
                    "schemaOrgDefinition",
                    "sensorMode",
                    "social_benefit_area",
                    "socialbenefitarea",
                    "specification_date",
                    "specification_date_type",
                    "specification_title",
                    "status",
                    "subject",
                    "tempextent_begin",
                    "tempextent_end",
                    "themes",
                    "thumbnails",
                    "title",
                    "topic",
                    "topicCategory",
                    "type",
                    "typed_keywords",
                    "use_constraint",
                    "version",
                    "xmldoc",
                    "youngs_created_on",
                    "youngs_used_mapping"
                ],
                "SupportedISOQueryables": [
                    "Abstract",
                    "AccessConstraints",
                    "AlternateTitle",
                    "AnyText",
                    "BoundingBox",
                    "Category",
                    "CreationDate",
                    "Distribution",
                    "Format",
                    "GeographicDescriptionCode",
                    "HasSecurityConstraints",
                    "Identifier",
                    "KeywordType",
                    "Language",
                    "Modified",
                    "OrganisationName",
                    "OtherConstraints",
                    "ParentIdentifier",
                    "ProductStatus",
                    "PublicationDate",
                    "ResourceIdentifier",
                    "ResourceLanguage",
                    "RevisionDate",
                    "SocialBenefitArea",
                    "Subject",
                    "TempExtent_begin",
                    "TempExtent_end",
                    "Title",
                    "TopicCategory",
                    "Type",
                    "UseConstraints",
                    "iopAccess",
                    "isEumData"
                ]
            },
            "namespaces": {
                "csw": {
                    "typeName": "csw:Record",
                    "outputSchema": "http://www.eumetsat.int/2008/gmi"
                },
                "gmd": {
                    "typeName": "gmd:MD_Metadata",
                    "outputSchema": "http://www.isotc211.org/2005/gmd"
                },
                "gmi": {
                    "typeName": "gmi:MI_Metadata",
                    "outputSchema": "http://www.isotc211.org/2005/gmi"
                }
            }
        },
        "cmems": {
            "GetCapabilities": {
                "sections": [
                    "ServiceIdentification",
                    "ServiceProvider",
                    "OperationsMetadata",
                    "Filter_Capabilities"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ]
            },
            "DescribeRecord": {
                "outputFormat": [
                    "application/xml"
                ],
                "schemaLanguage": [
                    "http://www.w3.org/TR/xmlschema-1/"
                ],
                "outputSchema": [
                    "http://www.opengis.net/cat/csw/2.0.2",
                    "http://www.isotc211.org/2005/gfc",
                    "http://www.w3.org/ns/dcat#",
                    "http://www.isotc211.org/2005/gmd",
                    "http://standards.iso.org/iso/19115/-3/mdb/2.0"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ]
            },
            "GetDomain": {},
            "GetRecords": {
                "resultType": [
                    "hits",
                    "results",
                    "validate"
                ],
                "outputFormat": [
                    "application/xml"
                ],
                "outputSchema": [
                    "http://www.opengis.net/cat/csw/2.0.2",
                    "http://www.isotc211.org/2005/gfc",
                    "http://www.w3.org/ns/dcat#",
                    "http://www.isotc211.org/2005/gmd",
                    "http://standards.iso.org/iso/19115/-3/mdb/2.0"
                ],
                "typeNames": [
                    "csw:Record",
                    "gfc:FC_FeatureCatalogue",
                    "dcat",
                    "gmd:MD_Metadata",
                    "mdb:MD_Metadata"
                ],
                "CONSTRAINTLANGUAGE": [
                    "FILTER",
                    "CQL_TEXT"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ],
                "SupportedISOQueryables": [
                    "CreationDate",
                    "GeographicDescriptionCode",
                    "OperatesOn",
                    "Modified",
                    "DistanceUOM",
                    "Operation",
                    "ResourceIdentifier",
                    "Format",
                    "Identifier",
                    "Language",
                    "ServiceType",
                    "OrganisationName",
                    "KeywordType",
                    "AnyText",
                    "PublicationDate",
                    "AlternateTitle",
                    "Abstract",
                    "HasSecurityConstraints",
                    "Title",
                    "CouplingType",
                    "TopicCategory",
                    "ParentIdentifier",
                    "Subject",
                    "ResourceLanguage",
                    "TempExtent_end",
                    "ServiceTypeVersion",
                    "Type",
                    "RevisionDate",
                    "OperatesOnName",
                    "Denominator",
                    "DistanceValue",
                    "TempExtent_begin",
                    "OperatesOnIdentifier"
                ],
                "AdditionalQueryables": [
                    "SpecificationDate",
                    "AccessConstraints",
                    "ResponsiblePartyRole",
                    "Degree",
                    "Lineage",
                    "OnlineResourceMimeType",
                    "ConditionApplyingToAccessAndUse",
                    "Date",
                    "MetadataPointOfContact",
                    "OnlineResourceType",
                    "Relation",
                    "SpecificationDateType",
                    "Classification",
                    "OtherConstraints",
                    "SpecificationTitle"
                ]
            },
            "GetRecordById": {
                "outputSchema": [
                    "http://www.opengis.net/cat/csw/2.0.2",
                    "http://www.isotc211.org/2005/gfc",
                    "http://www.w3.org/ns/dcat#",
                    "http://www.isotc211.org/2005/gmd",
                    "http://standards.iso.org/iso/19115/-3/mdb/2.0"
                ],
                "outputFormat": [
                    "application/xml"
                ],
                "resultType": [
                    "hits",
                    "results",
                    "validate"
                ],
                "ElementSetName": [
                    "brief",
                    "summary",
                    "full"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ]
            },
            "Transaction": {},
            "Harvest": {
                "ResourceType": [
                    "http://www.isotc211.org/schemas/2005/gmd/"
                ]
            },
            "namespaces": {
                "csw": {
                    "typeName": "csw:Record",
                    "outputSchema": "http://www.opengis.net/cat/csw/2.0.2"
                },
                "gfc": {
                    "typeName": "gfc:FC_FeatureCatalogue",
                    "outputSchema": "http://www.isotc211.org/2005/gfc"
                },
                "dcat": {
                    "typeName": "dcat",
                    "outputSchema": "http://www.w3.org/ns/dcat#"
                },
                "gmd": {
                    "typeName": "gmd:MD_Metadata",
                    "outputSchema": "http://www.isotc211.org/2005/gmd"
                },
                "mdb": {
                    "typeName": "mdb:MD_Metadata",
                    "outputSchema": "http://standards.iso.org/iso/19115/-3/mdb/2.0"
                }
            }
        },
        "wekeo": {
            "DescribeRecord": {
                "outputFormat": [
                    "application/xml",
                    "text/xml"
                ],
                "outputSchema": [
                    "http://www.eumetsat.int/2008/gmi"
                ]
            },
            "GetCapabilities": {
                "AcceptVersions": [
                    "2.0.2"
                ],
                "Sections": [
                    "All",
                    "Filter_Capabilities",
                    "OperationsMetadata",
                    "ServiceIdentification",
                    "ServiceProvider"
                ]
            },
            "GetRecordById": {
                "ElementSetName": [
                    "brief",
                    "full",
                    "summary"
                ],
                "outputFormat": [
                    "application/x-kvp",
                    "application/xml",
                    "text/xml"
                ],
                "outputSchema": [
                    "http://www.eumetsat.int/2008/gmi",
                    "http://www.isotc211.org/2005/gmd",
                    "http://www.isotc211.org/2005/gmi",
                    "http://www.opengis.net/cat/csw/2.0.2"
                ]
            },
            "GetRecords": {
                "CONSTRAINTLANGUAGE": [
                    "Filter",
                    "LUCENE"
                ],
                "CONSTRAINT_LANGUAGE_VERSION": [
                    "1.1.0",
                    "7.2.1"
                ],
                "ElementSetName": [
                    "brief",
                    "full",
                    "summary"
                ],
                "outputFormat": [
                    "application/x-kvp",
                    "application/xml",
                    "text/xml"
                ],
                "outputSchema": [
                    "http://www.eumetsat.int/2008/gmi",
                    "http://www.isotc211.org/2005/gmd",
                    "http://www.isotc211.org/2005/gmi",
                    "http://www.opengis.net/cat/csw/2.0.2"
                ],
                "resultType": [
                    "hits",
                    "results",
                    "validate"
                ],
                "typeNames": [
                    "csw:Record",
                    "gmd:MD_Metadata",
                    "gmi:MI_Metadata"
                ],
                "AdditionalQueryables": [
                    "AccessConstraints",
                    "Aggregate",
                    "AnyText",
                    "Availability",
                    "AvailableFormats",
                    "AvailableFormatsVersion",
                    "Classification",
                    "ConditionApplyingToAccessAndUse",
                    "DataPolicy",
                    "Degree",
                    "EUMETCASTChannels",
                    "FileFormatDescription",
                    "Frequency",
                    "HierarchyLevelName",
                    "Identifier",
                    "Lineage",
                    "OtherConstraints",
                    "ResponsiblePartyRole",
                    "SBA",
                    "SpecificationDate",
                    "SpecificationDateType",
                    "SpecificationTitle",
                    "UseConstraints",
                    "abstract",
                    "access_constraint",
                    "aggregateIdentifier",
                    "aggregationInfo",
                    "alternateTitle",
                    "availability",
                    "availableFormats",
                    "availableFormatsVersion",
                    "boundingbox",
                    "category",
                    "conditions",
                    "coverage",
                    "creation_date",
                    "creationdate",
                    "dataCiteIdentifier",
                    "data_policy",
                    "datasetLanguage",
                    "datasetTitle",
                    "dateStamp",
                    "degree",
                    "digitalTransfers",
                    "distribution",
                    "distributorContact",
                    "doi",
                    "doiCreator",
                    "doiEdition",
                    "eumdata",
                    "eumetcast_channels",
                    "eumetsatDataPolicy",
                    "eumetsatDataPolicyUrl",
                    "fileIdentifier",
                    "file_format_description",
                    "footprint",
                    "frequency",
                    "fulltext",
                    "geographicdescriptioncode",
                    "hassecurityconstraints",
                    "hierarchyLevel",
                    "hierarchyLevelName",
                    "id",
                    "ident_identifier",
                    "identifier",
                    "instrument",
                    "instrument_type",
                    "iopaccess",
                    "iseumdata",
                    "keywords",
                    "keywordsAsObjects",
                    "keywords_types",
                    "keywordtype",
                    "language",
                    "location",
                    "modified",
                    "onlineResource",
                    "orbitNominalLongitude",
                    "orbitType",
                    "organisationname",
                    "other_constraints",
                    "parent",
                    "parentidentifier",
                    "productLevel",
                    "productResolution",
                    "productStatus",
                    "publication_date",
                    "publicationdate",
                    "quality_statement",
                    "referencedProducts",
                    "resourceIdentifier",
                    "resourceType",
                    "resourcelanguage",
                    "responsibleParty",
                    "responsiblePartyRole",
                    "responsible_org",
                    "revision_date",
                    "revisiondate",
                    "satellite",
                    "satellite description",
                    "satellite_description",
                    "schemaOrgDefinition",
                    "sensorMode",
                    "social_benefit_area",
                    "socialbenefitarea",
                    "specification_date",
                    "specification_date_type",
                    "specification_title",
                    "status",
                    "subject",
                    "tempextent_begin",
                    "tempextent_end",
                    "themes",
                    "thumbnails",
                    "title",
                    "topic",
                    "topicCategory",
                    "type",
                    "typed_keywords",
                    "use_constraint",
                    "version",
                    "xmldoc",
                    "youngs_created_on",
                    "youngs_used_mapping"
                ],
                "SupportedISOQueryables": [
                    "Abstract",
                    "AccessConstraints",
                    "AlternateTitle",
                    "AnyText",
                    "BoundingBox",
                    "Category",
                    "CreationDate",
                    "Distribution",
                    "Format",
                    "GeographicDescriptionCode",
                    "HasSecurityConstraints",
                    "Identifier",
                    "KeywordType",
                    "Language",
                    "Modified",
                    "OrganisationName",
                    "OtherConstraints",
                    "ParentIdentifier",
                    "ProductStatus",
                    "PublicationDate",
                    "ResourceIdentifier",
                    "ResourceLanguage",
                    "RevisionDate",
                    "SocialBenefitArea",
                    "Subject",
                    "TempExtent_begin",
                    "TempExtent_end",
                    "Title",
                    "TopicCategory",
                    "Type",
                    "UseConstraints",
                    "iopAccess",
                    "isEumData"
                ]
            },
            "namespaces": {
                "csw": {
                    "typeName": "csw:Record",
                    "outputSchema": "http://www.eumetsat.int/2008/gmi"
                },
                "gmd": {
                    "typeName": "gmd:MD_Metadata",
                    "outputSchema": "http://www.isotc211.org/2005/gmd"
                },
                "gmi": {
                    "typeName": "gmi:MI_Metadata",
                    "outputSchema": "http://www.isotc211.org/2005/gmi"
                }
            }
        },
        "eea": {
            "GetCapabilities": {
                "sections": [
                    "ServiceIdentification",
                    "ServiceProvider",
                    "OperationsMetadata",
                    "Filter_Capabilities"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ]
            },
            "DescribeRecord": {
                "outputFormat": [
                    "application/xml"
                ],
                "schemaLanguage": [
                    "http://www.w3.org/TR/xmlschema-1/"
                ],
                "outputSchema": [
                    "http://www.opengis.net/cat/csw/2.0.2",
                    "http://www.isotc211.org/2005/gfc",
                    "http://www.w3.org/ns/dcat#",
                    "http://www.isotc211.org/2005/gmd",
                    "http://standards.iso.org/iso/19115/-3/mdb/2.0"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ]
            },
            "GetDomain": {},
            "GetRecords": {
                "resultType": [
                    "hits",
                    "results",
                    "validate"
                ],
                "outputFormat": [
                    "application/xml"
                ],
                "outputSchema": [
                    "http://www.opengis.net/cat/csw/2.0.2",
                    "http://www.isotc211.org/2005/gfc",
                    "http://www.w3.org/ns/dcat#",
                    "http://www.isotc211.org/2005/gmd",
                    "http://standards.iso.org/iso/19115/-3/mdb/2.0"
                ],
                "typeNames": [
                    "csw:Record",
                    "gfc:FC_FeatureCatalogue",
                    "dcat",
                    "gmd:MD_Metadata",
                    "mdb:MD_Metadata"
                ],
                "CONSTRAINTLANGUAGE": [
                    "FILTER",
                    "CQL_TEXT"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ],
                "SupportedISOQueryables": [
                    "CreationDate",
                    "GeographicDescriptionCode",
                    "OperatesOn",
                    "Modified",
                    "DistanceUOM",
                    "Operation",
                    "ResourceIdentifier",
                    "Format",
                    "Identifier",
                    "Language",
                    "ServiceType",
                    "OrganisationName",
                    "KeywordType",
                    "AnyText",
                    "PublicationDate",
                    "AlternateTitle",
                    "Abstract",
                    "HasSecurityConstraints",
                    "Title",
                    "CouplingType",
                    "TopicCategory",
                    "ParentIdentifier",
                    "Subject",
                    "ResourceLanguage",
                    "TempExtent_end",
                    "ServiceTypeVersion",
                    "Type",
                    "RevisionDate",
                    "OperatesOnName",
                    "Denominator",
                    "DistanceValue",
                    "TempExtent_begin",
                    "OperatesOnIdentifier"
                ],
                "AdditionalQueryables": [
                    "SpecificationDate",
                    "AccessConstraints",
                    "ResponsiblePartyRole",
                    "Degree",
                    "Lineage",
                    "OnlineResourceMimeType",
                    "ConditionApplyingToAccessAndUse",
                    "Date",
                    "MetadataPointOfContact",
                    "OnlineResourceType",
                    "Relation",
                    "SpecificationDateType",
                    "Classification",
                    "OtherConstraints",
                    "SpecificationTitle"
                ]
            },
            "GetRecordById": {
                "outputSchema": [
                    "http://www.opengis.net/cat/csw/2.0.2",
                    "http://www.isotc211.org/2005/gfc",
                    "http://www.w3.org/ns/dcat#",
                    "http://www.isotc211.org/2005/gmd",
                    "http://standards.iso.org/iso/19115/-3/mdb/2.0"
                ],
                "outputFormat": [
                    "application/xml"
                ],
                "resultType": [
                    "hits",
                    "results",
                    "validate"
                ],
                "ElementSetName": [
                    "brief",
                    "summary",
                    "full"
                ],
                "PostEncoding": [
                    "XML",
                    "SOAP"
                ]
            },
            "Transaction": {},
            "Harvest": {
                "ResourceType": [
                    "http://www.isotc211.org/schemas/2005/gmd/"
                ]
            },
            "namespaces": {
                "csw": {
                    "typeName": "csw:Record",
                    "outputSchema": "http://www.opengis.net/cat/csw/2.0.2"
                },
                "gfc": {
                    "typeName": "gfc:FC_FeatureCatalogue",
                    "outputSchema": "http://www.isotc211.org/2005/gfc"
                },
                "dcat": {
                    "typeName": "dcat",
                    "outputSchema": "http://www.w3.org/ns/dcat#"
                },
                "gmd": {
                    "typeName": "gmd:MD_Metadata",
                    "outputSchema": "http://www.isotc211.org/2005/gmd"
                },
                "mdb": {
                    "typeName": "mdb:MD_Metadata",
                    "outputSchema": "http://standards.iso.org/iso/19115/-3/mdb/2.0"
                }
            }
        }
    },
    "openapi": {
        "cds": {
            "openapi": "3.0.1",
            "info": {
                "title": "Climate Data Store public API",
                "description": "This is the public API for the Copernicus Climate Change Service's Climate Data Store (C3S CDS).\n\nThis API can be used to fetch information about data available from the CDS, and to make requests for data itself.\n\nSome basic concepts:\n\n- A 'resource' is a CDS catalogue entry describing a dataset or tool. When you ask for data you ask for it from a particular resource\n- A 'task' is a request for data. Tasks run asynchronously - you must submit one, wait for it to complete, then fetch the data from the result URL. Result URLs have a limited life.\n\nA typical flow:\n\n- PUT a request using /api/v2/tasks/resources/dataset/my-dataset/clientid-my-random-id, or POST one to /api/v2/resources/dataset/my-dataset. Using the PUT endpoint allows you to retry without creating duplicates.\n- Using the request ID in the response, poll /api/v2/tasks/my-task-id (or /api/v2/tasks/clientid-my-random-id).\n- For as long as the state is 'queued' or 'running' continue to poll. Your result is ready when the state changes to 'completed'.\n\n",
                "version": "2.0"
            },
            "servers": [
                {
                    "url": "/api/v2/"
                }
            ],
            "paths": {
                "/qos/requests": {
                    "get": {
                        "operationId": "getRequestQueueInformation",
                        "parameters": [
                            {
                                "name": "limit",
                                "in": "query",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 0
                                }
                            },
                            {
                                "name": "limited-only",
                                "in": "query",
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            }
                        }
                    }
                },
                "/qos/rules/{which}": {
                    "get": {
                        "operationId": "getRuleRequestInformation",
                        "parameters": [
                            {
                                "name": "which",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "limit",
                                "in": "query",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 0
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            }
                        }
                    }
                },
                "/resources/{key}/availability": {
                    "get": {
                        "summary": "Get availability information about a Resource",
                        "description": "This checks whether or not a resource is available. A resource may be disabled if, for example, it is not working correctly or is not ready for public release.",
                        "operationId": "getDatasetAvailability",
                        "parameters": [
                            {
                                "name": "key",
                                "in": "path",
                                "description": "The name, slug or UUID of the resource. The name can be found in the resource's description page or API documentation. The UUID of datasets can be found using CSW.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "The resource availability information.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ResourceAvailability"
                                        }
                                    }
                                }
                            },
                            "404": {
                                "description": "Not found."
                            }
                        }
                    }
                },
                "/resources/{type}/{key}/availability": {
                    "get": {
                        "summary": "Get availability information about a Resource of a given type.",
                        "description": "This operation searches for a dataset or tool using a key (slug, name or UUID). This is exactly likeGET .../{key}/availability, except that only Resources of the type given are searched.",
                        "operationId": "getDatasetAvailabilityByType",
                        "parameters": [
                            {
                                "name": "type",
                                "in": "path",
                                "description": "The type of the Resource to search for",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "key",
                                "in": "path",
                                "description": "The UUID or name of the resource. The name can be found in the resource's description page or API documentation. The UUID of datasets can be found using CSW.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "The resource availability information.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ResourceAvailability"
                                        }
                                    }
                                }
                            },
                            "404": {
                                "description": "No dataset/tool has the type and key specified."
                            }
                        }
                    }
                },
                "/resources/{key}": {
                    "get": {
                        "summary": "Operation to get metadata describing a Resource",
                        "description": "This operation searches for a dataset or tool using a key (name, slug or UUID).",
                        "operationId": "getDatasetsResouce",
                        "parameters": [
                            {
                                "name": "key",
                                "in": "path",
                                "description": "The name, slug or UUID of the resource. The name can be found in the resource's description page or API documentation. The UUID of datasets can be found using CSW.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "The  requested resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Resource"
                                        }
                                    }
                                }
                            },
                            "304": {
                                "description": "Not modified - the ETAG in your If-Not-Modified header matches that of the current resource metadata."
                            },
                            "400": {
                                "description": "Bad request. An error description (if possible).",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorJsonV2"
                                        }
                                    }
                                }
                            },
                            "404": {
                                "description": "Not found."
                            }
                        }
                    }
                },
                "/resources/{type}/{key}": {
                    "get": {
                        "summary": "Operation to get metadata describing a Resource of a given type.",
                        "description": "This operation searches for a dataset or tool using a key (slug, name or UUID). This is exactly likeGET .../{key}, except that only Resources of the type given are searched.",
                        "operationId": "getDatasetsResouceByType",
                        "parameters": [
                            {
                                "name": "type",
                                "in": "path",
                                "description": "The type of the Resource to search for",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "key",
                                "in": "path",
                                "description": "The UUID or name of the resource. The name can be found in the resource's description page or API documentation. The UUID of datasets can be found using CSW.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "The  requested resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Resource"
                                        }
                                    }
                                }
                            },
                            "304": {
                                "description": "Not modified - the ETAG in your If-Not-Modified header matches that of the current resource metadata."
                            },
                            "400": {
                                "description": "Bad request. An error description (if possible).",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorJsonV2"
                                        }
                                    }
                                }
                            },
                            "404": {
                                "description": "No dataset/tool has the type and key specified."
                            }
                        }
                    }
                },
                "/resources": {
                    "get": {
                        "summary": "Retrieve a list of the IDs of all resources",
                        "description": "This returns a sorted list of identifiers for resources. The identifiers will be the short name of the resource where one exists, and the UUID for the ISO 19115 record otherwise. These identifiers are always suitable for fetching the full resource information or submitting requests.\n\nNo more than 10,000 results will be returned. Use of 'limit' and 'after' is recommended. Set limit=n and leave 'after' unset in the first request. If n or more results are returned, make further requests with limit=n and after set to the last result from the previous request.",
                        "operationId": "getResouceList",
                        "parameters": [
                            {
                                "name": "limit",
                                "in": "query",
                                "description": "Caps the length of the returned results. Defaults to 10,000, and may not be larger.",
                                "allowEmptyValue": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "example": 1000
                            },
                            {
                                "name": "offset",
                                "in": "query",
                                "description": "Excludes this many results from the start of the list. 'after' is preferred for pagination to avoid missing any entries.",
                                "allowEmptyValue": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "example": 1000
                            },
                            {
                                "name": "after",
                                "in": "query",
                                "description": "Include only IDs greater than this value in the list. ",
                                "allowEmptyValue": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "era5-daily"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "List of resource identifiers. Each ID is either an short name (if available) or a UUID (if not).",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array"
                                        },
                                        "example": [
                                            "era5",
                                            "ghg-co2-ch4"
                                        ]
                                    }
                                }
                            },
                            "default": {
                                "description": "An error description.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorJsonV2"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/resources/{type}": {
                    "get": {
                        "summary": "Retrieve a list of the IDs of all resources of aparticular type",
                        "description": "This is exactly like GET on resources/, except that the are limited to resources of only one particular type specified in the path.",
                        "operationId": "getResourceListByType",
                        "parameters": [
                            {
                                "name": "type",
                                "in": "path",
                                "description": "Restricts results to resources of one type",
                                "required": true,
                                "allowEmptyValue": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "limit",
                                "in": "query",
                                "description": "Caps the length of the returned results. Defaults to 10,000, and may not be larger.",
                                "allowEmptyValue": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "example": 1000
                            },
                            {
                                "name": "offset",
                                "in": "query",
                                "description": "Excludes this many results from the start of the list. 'after' is preferred for pagination to avoid missing any entries.",
                                "allowEmptyValue": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "example": 1000
                            },
                            {
                                "name": "after",
                                "in": "query",
                                "description": "Include only IDs greater than this value in the list. ",
                                "allowEmptyValue": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "era5-daily"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "List of resources",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array"
                                        },
                                        "example": [
                                            "era5",
                                            "ghg-co2-ch4"
                                        ]
                                    }
                                }
                            },
                            "default": {
                                "description": "An error description.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorJsonV2"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/resources/{resourceName}": {
                    "post": {
                        "summary": "Submit a new request for data from a particular resource",
                        "description": "This submits a request for data and returns the status of the new task. If you get a failure such as a network error where it's not possible to determine whether the task was submitted or not, then use a task list endpoint to check. You can also use the alternative PUT tasks/resources/resourceName/clientid-my-unique-id endpoint to be able to retry without this problem.\n\nThe status of the new request is returned.",
                        "operationId": "postResource",
                        "parameters": [
                            {
                                "name": "resourceName",
                                "in": "path",
                                "description": "Specifies the resource this request is targetted at (which determines what it is you're requesting).",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": {
                                    "value": "era-5"
                                }
                            }
                        ],
                        "requestBody": {
                            "description": "An arbitrary JSON object containing the request's parameters, such as date range and variables to be returned. Except for parameters with names beginning with cds_, these are defined by the resource this request targets.\n\nThe following parameters are available for all requests:\n* cds_no_cache: 'r', 'w' or 'rw' to disable searching for cached results, writing result to the cache or both. Note that this does not affect all caches, only the cache of final results.\n* cds_inputs: an array of CDS request IDs whose outputs \nserver as inputs to this request. eg [ \"12183e75-3441-412c-88c1-8e127231b27c\"]\n",
                            "content": {
                                "*/*": {
                                    "schema": {
                                        "type": "object"
                                    },
                                    "example": {
                                        "param": [
                                            "pp"
                                        ],
                                        "latitude": "-55/-45",
                                        "longitude": "0/-15"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "200": {
                                "description": "A description of the new Task and its initial state, ",
                                "headers": {
                                    "Retry-After": {
                                        "description": "The suggested time in seconds for which the client should wait before requesting this task's status from the task status endpoint.",
                                        "style": "simple",
                                        "schema": {
                                            "type": "number",
                                            "format": "double"
                                        }
                                    },
                                    "Location": {
                                        "description": "The canonical location for the task status GET endpoint.",
                                        "style": "simple",
                                        "schema": {
                                            "type": "string",
                                            "format": "uri"
                                        }
                                    }
                                },
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Task"
                                        }
                                    }
                                }
                            },
                            "default": {
                                "description": "An error description.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorJsonV2"
                                        }
                                    }
                                }
                            }
                        },
                        "security": [
                            {
                                "API key": []
                            }
                        ]
                    }
                },
                "/resources/{resourceType}/{resourceName}": {
                    "post": {
                        "summary": "Submit a new request for data from a particular resourcefrom a given type",
                        "description": "This submits a request for data and returns the status of the new task. If you get a failure such as a network error where it's not possible to determine whether the task was submitted or not, take care not to create a duplicate (eg, by using a task list endpoint to check). You can also use the alternative PUT tasks/resources/resourceName/clientid-my-unique-id endpoint to be able to retry without this problem.\n\nThe status of the new request is returned.",
                        "operationId": "postResourceByType",
                        "parameters": [
                            {
                                "name": "resourceType",
                                "in": "path",
                                "description": "Restricts results to resources of one type(datasets or tools)",
                                "required": true,
                                "allowEmptyValue": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "resourceName",
                                "in": "path",
                                "description": "Specifies the resource this request is targetted at (which determines what it is you're requesting).",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": {
                                    "value": "era-5"
                                }
                            }
                        ],
                        "requestBody": {
                            "description": "An arbitrary JSON object containing the request's parameters, such as date range and variables to be returned. Except for parameters with names beginning with cds_, these are defined by the resource this request targets.\n\nThe following parameters are available for all requests:\n* cds_no_cache: 'r', 'w' or 'rw' to disable searching for cached results, writing result to the cache or both. Note that this does not affect all caches, only the cache of final results.\n* cds_inputs: an array of CDS request IDs whose outputs \nserver as inputs to this request. eg [ \"12183e75-3441-412c-88c1-8e127231b27c\"]\n",
                            "content": {
                                "*/*": {
                                    "schema": {
                                        "type": "object"
                                    },
                                    "example": {
                                        "param": [
                                            "pp"
                                        ],
                                        "latitude": "-55/-45",
                                        "longitude": "0/-15"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "200": {
                                "description": "A description of the new Task and its initial state, ",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Task"
                                        }
                                    }
                                }
                            },
                            "default": {
                                "description": "An error description.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorJsonV2"
                                        }
                                    }
                                }
                            }
                        },
                        "security": [
                            {
                                "API key": []
                            }
                        ]
                    }
                },
                "/tasks/{taskidpath}": {
                    "get": {
                        "summary": "Retrieve a task's details or a list of tasks' details",
                        "description": "Return information about a matching task or tasks.\n\n\nIn the most common cases, the path is simply 'tasks/' to return a list of all of your tasks, or 'tasks/my-task-id' to return information about a single task.\n\nA task ID may be either its UUID, which is returned when it is created, or 'clientid-&lt;caller-specified ID&gt;' if you specified a client ID when you originally submitted the request\n\nIn general, the path is 'task-space/taskid-path', and may have '/subtasks' appended.\n\nHere, task-space is one of the following:\n\n* 'resources' - matches all requests created with public APIs\n* 'resources/apps', 'resources/tools' or 'resources/datasets',which match requests for particular types of resource.\n* 'resources/resource-name', 'resources/apps/resource-name', ...,which match tasks only for a specified resource.\n\nand a taskid-path is a sequence of task IDs which specify parent-child relationships between tasks. (eg, id1/id2 matches a task with ID id2 which is a sub-task of id1).However, you can also fetch information on task id2 with simply 'id2' - the full path is not required.\n\nIf taskid-path is empty then a list of (zero or more) tasks is returned, otherwise information about a single task is returned (or an error if it doesn't exist). '/subtasks' may be appended to any non-empty taskid-path to return a list of all subtasks.\n\n## Examples:\n\n* /tasks - returns a list of all your tasks\n* /tasks/12183e75-3441-412c-88c1-8e127231b27c - returns information about a single task\n* /tasks/12183e75-3441-412c-88c1-8e127231b27c/subtasks - returns a list of subtasks for a task\n* /tasks/resources/datasets/ - returns a list of tasks for datasets (ie, requests for data rather than processing)\n* /tasks/resources/datasets/alien-abduction-density/ - returns a list of requests for particular data\n",
                        "operationId": "defaultGetEndpoint",
                        "parameters": [
                            {
                                "name": "taskidpath",
                                "in": "path",
                                "description": "Specifies the request(s) to return - see main description.",
                                "required": true,
                                "allowEmptyValue": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "A description of a Task and its current state, or a list of descriptions.",
                                "headers": {
                                    "Retry-After": {
                                        "description": "The suggested time in seconds for which the client should wait before requesting this task's status again. This header is only added when the request identifies a single task.",
                                        "style": "simple",
                                        "schema": {
                                            "type": "number",
                                            "format": "double"
                                        }
                                    },
                                    "Location": {
                                        "description": "The canonical location for the task status GET endpoint. This header is only added when the request identifies a single task.",
                                        "style": "simple",
                                        "schema": {
                                            "type": "string",
                                            "format": "uri"
                                        }
                                    }
                                },
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Task"
                                        }
                                    }
                                }
                            },
                            "default": {
                                "description": "An error description.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorJsonV2"
                                        }
                                    }
                                }
                            }
                        },
                        "security": [
                            {
                                "API key": []
                            }
                        ]
                    },
                    "delete": {
                        "summary": "Deletes the selected task",
                        "description": "Deletes matching task or tasks (and any subtasks).\n\n\n## Examples:\n\n* /tasks - deleted all your tasks\n* /tasks/12183e75-3441-412c-88c1-8e127231b27c - deletes a single task\n* /tasks/12183e75-3441-412c-88c1-8e127231b27c/subtasks - deletes the list of subtasks for a task\n* /tasks/resources/datasets/ - deleted the list of tasks for datasets (ie, requests for data rather than processing)\n* /tasks/resources/datasets/alien-abduction-density/ - deletes the list of requests for particular data\n",
                        "operationId": "defaultDeleteEndpoint",
                        "parameters": [
                            {
                                "name": "taskidpath",
                                "in": "path",
                                "description": "Specifies the request(s) to delete - see main description.",
                                "required": true,
                                "allowEmptyValue": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "The operation has been performed ok"
                            },
                            "404": {
                                "description": "The task never existed or has been expired"
                            },
                            "default": {
                                "description": "An error description.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorJsonV2"
                                        }
                                    }
                                }
                            }
                        },
                        "security": [
                            {
                                "API key": []
                            }
                        ]
                    }
                },
                "/tasks/{taskid}/provenance": {
                    "get": {
                        "summary": "Gets the provenance starting with a request_id",
                        "description": "Gets the provenance starting with a request_id.\n\n\n## Examples:\n\n/tasks/12183e75-3441-412c-88c1-8e127231b27c/provenance\nWill show the provenance of the cache results for the request",
                        "operationId": "getProvenance",
                        "parameters": [
                            {
                                "name": "taskid",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "The operation has been performed ok"
                            },
                            "404": {
                                "description": "The task never existed"
                            },
                            "default": {
                                "description": "An error description.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorJsonV2"
                                        }
                                    }
                                }
                            }
                        },
                        "security": [
                            {
                                "API key": []
                            }
                        ]
                    }
                },
                "/tasks/delete": {
                    "post": {
                        "summary": "Delete multiple tasks",
                        "description": "This deletes tasks based on a list of IDs in the request body. Subtasks of the listed tasks are also deleted.",
                        "operationId": "multipleDelete",
                        "requestBody": {
                            "description": "A list of requests to delete",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object"
                                    },
                                    "example": [
                                        "a8e2c65b-b663-4d89-a837-c45f9106f77a",
                                        "clientid-1234"
                                    ]
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "204": {
                                "description": "No content returned on success",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Task"
                                        }
                                    }
                                }
                            },
                            "default": {
                                "description": "An error description.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorJsonV2"
                                        }
                                    }
                                }
                            }
                        },
                        "security": [
                            {
                                "API key": []
                            }
                        ]
                    }
                },
                "/tasks/resources/{resourceName}/clientid-{clientid}": {
                    "put": {
                        "summary": "Submit a new request for data from a particular resource",
                        "description": "This submits a request for data and returns the status of the new task. 'clientid' should be a unique identifier chosen by the caller, such as a UUID. If you get a failure such as a network error where it's not possible to determine whether the task was submitted or not, then you should submit the task again using the same client ID. If the original request was processed then no duplicate is created - the status of the existing request is returned.",
                        "operationId": "resourcesPutEndpoint",
                        "parameters": [
                            {
                                "name": "resourceName",
                                "in": "path",
                                "description": "Specifies the resource this request is targeted at (which determines what it is you'rerequesting).",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": {
                                    "value": "era-5"
                                }
                            },
                            {
                                "name": "clientid",
                                "in": "path",
                                "description": "A unique client-generated ID for this task.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": {
                                    "value": 1510939455.8747585
                                }
                            }
                        ],
                        "requestBody": {
                            "description": "An arbitrary JSON object containing the request's parameters, such as date range and variables to be returned. Except for parameters with names beginning with cds_, these are defined by the resource this request targets.\n\nThe following parameters are available for all requests:\n* cds_inputs: an array of CDS request IDs whose outputs \nserver as inputs to this request. eg [ \"12183e75-3441-412c-88c1-8e127231b27c\"]\n* cds_no_cache: 'r', 'w' or 'rw' to disable searching for cached results, writing result to the cache or both. Note that this does not affect all caches, only the cache of final results.\n* cds_resource: the target resource name. Only set this ifit isn't included in the URL you use to submit therequest.\n",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object"
                                    },
                                    "example": {
                                        "param": [
                                            "pp"
                                        ],
                                        "latitude": "-55/-45",
                                        "longitude": "0/-15"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "200": {
                                "description": "A description of the new Task and its initial state, ",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Task"
                                        }
                                    }
                                }
                            },
                            "default": {
                                "description": "An error description.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorJsonV2"
                                        }
                                    }
                                }
                            }
                        },
                        "security": [
                            {
                                "API key": []
                            }
                        ]
                    }
                },
                "/tasks/resources/{resourceType}/{resourceName}/clientid-{clientid}": {
                    "put": {
                        "summary": "Submit a new request for data from a particular resource",
                        "description": "This is just like the resources/{resourceName}/clientid-{clientid} endpoint, except that submission only succeeds if the resource is of the expected type.",
                        "operationId": "resourcesTypedPutEndpoint",
                        "parameters": [
                            {
                                "name": "resourceType",
                                "in": "path",
                                "description": "Specifies the type of the resource this request is targeted at.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": {
                                    "value": "dataset"
                                }
                            },
                            {
                                "name": "resourceName",
                                "in": "path",
                                "description": "Specifies the resource this request is targeted at (which determines what it is you'rerequesting).",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": {
                                    "value": "era-5"
                                }
                            },
                            {
                                "name": "clientid",
                                "in": "path",
                                "description": "A unique client-generated ID for this task.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": {
                                    "value": 1510939455.8747585
                                }
                            }
                        ],
                        "requestBody": {
                            "description": "An arbitrary JSON object containing the request's parameters.",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object"
                                    },
                                    "example": {
                                        "param": [
                                            "pp"
                                        ],
                                        "latitude": "-55/-45",
                                        "longitude": "0/-15"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "200": {
                                "description": "A description of the new Task and its initial state, ",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Task"
                                        }
                                    }
                                }
                            },
                            "default": {
                                "description": "An error description.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorJsonV2"
                                        }
                                    }
                                }
                            }
                        },
                        "security": [
                            {
                                "API key": []
                            }
                        ]
                    }
                },
                "/terms/list": {
                    "get": {
                        "operationId": "getLastTermsAndCondsByIds",
                        "parameters": [
                            {
                                "name": "listTerms",
                                "in": "query",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            }
                        }
                    }
                },
                "/terms/{tcId}/{tcRevision}": {
                    "get": {
                        "operationId": "getTermsAndCondsByIdAndRevision",
                        "parameters": [
                            {
                                "name": "tcId",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "tcRevision",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            }
                        }
                    }
                },
                "/users/me/terms-and-conditions": {
                    "get": {
                        "summary": "Retrieve a list of the Terms & Conditions accepted by the user",
                        "description": "This method returns the list of all Terms & Conditions that the user has accepted",
                        "operationId": "getTermsUser",
                        "responses": {
                            "200": {
                                "description": "List of Accepted Terms & Conditions",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TermsAndCondsMetadata"
                                            }
                                        }
                                    }
                                }
                            },
                            "default": {
                                "description": "An error description.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorJsonV2"
                                        }
                                    }
                                }
                            }
                        },
                        "security": [
                            {
                                "API key": []
                            }
                        ]
                    },
                    "post": {
                        "summary": "Accept a list of the Terms & Conditions",
                        "description": "This accepts the Terms & Conditions listed on the post data json",
                        "operationId": "createNewTerms",
                        "requestBody": {
                            "description": "An array of JSON objects containing the id (terms_id) and the revision number (revision) of each Terms & conditions that are going to be accepted. Only terms_id and revision are need it",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/TermsAndCondsMetadata"
                                        }
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "202": {
                                "description": "ACCEPTED"
                            },
                            "400": {
                                "description": "BAD REQUEST"
                            },
                            "500": {
                                "description": "INTERNAL SERVER ERROR"
                            }
                        },
                        "security": [
                            {
                                "API key": []
                            }
                        ]
                    }
                }
            },
            "components": {
                "schemas": {
                    "ResourceAvailability": {
                        "title": "ResourceAvailability",
                        "type": "object",
                        "properties": {
                            "available": {
                                "type": "boolean",
                                "description": "Is this resource accepting requests?",
                                "example": true
                            },
                            "message": {
                                "type": "string",
                                "description": "Why is this resource not available?",
                                "example": "Tool still in testing."
                            }
                        },
                        "description": "Describes the resource (dataset|tool) availability",
                        "readOnly": true
                    },
                    "Resource": {
                        "title": "Resource",
                        "type": "object",
                        "properties": {
                            "slug": {
                                "type": "string",
                                "description": "Resource slug - a human-readable URL component used in the URLs for pages related to this resource",
                                "example": "ecv-sea-ice-concentration-cdr-for-the-northern-hemisphere"
                            },
                            "name": {
                                "type": "string",
                                "description": "Resource name. This is a short identifier rather than a title intended for UI-facing text.",
                                "example": "ecvseaicenorth"
                            },
                            "id": {
                                "type": "string",
                                "description": "CSW UUID.",
                                "example": "\"5f86903b-0502-408b-9a7c-200ed79d28b7\""
                            },
                            "type": {
                                "type": "string",
                                "description": "Resource Type (dataset|application|tool)",
                                "example": "dataset",
                                "enum": [
                                    "ANY_RESOURCE",
                                    "DATASET",
                                    "TOOL",
                                    "APP"
                                ]
                            },
                            "rich_abstract": {
                                "type": "string",
                                "description": "Summary for the dataset. This can contain HTML and Markdown tags",
                                "example": "<p align=\"justify\"><b>Essential Climate Variable (ECV) records for soil moisture</b> based on active microwave soil moisture retrievals by TU Wien (ERS scatterometer, METOP ASCAT) passive microwave soil moisture data sets (SMMR, SSM/I, TMI, AMSR-E, Windsat, AMSR-2 and SMOS) produced by VanderSat. \n\n<p>Thematic Climate Data Record from 1991-08-05 until 2017-06-30 and Intermediate Climate Data Record <b>from 2017-07-01 onwards.</b></p>\n</p>\n\n**Keywords:** Soil moisture, ASCAT, ERS, METOP, SMMR, SSM/I, TMI, AMSR-E, Windsat, AMSR-2, SMOS\n\n\n<font color=\"#7A7A7A\">\n<TABLE width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" border=\"1\" align=\"center\">\n\n<TR bgcolor=\"#F3F3F3\"><TH colspan=\"2\">DATA DESCRIPTION</TH>\n<TR><TD colspan=\"2\" align=\"justify\">\nThis Dataset collection contains active only, passive only and combined (active+passive) datasets. Decadal and monthly means are also available.\n</TD>\n</TR>\n<TR><TH>Spatial coverage:</TH><TD>Global</TD></TR>\n<TR><TH>Temporal coverage:</TH><TD> 1978-11-01T00:00:00 - NRT updates</TD></TR>\n<TR><TH>Temporal resolution:</TH><TD>Daily, Ten days interval means, Monthly means</TD></TR>\n<TR><TH>Data format:</TH><TD>NetCDF</TD></TR>\n\n</TABLE>\n</font>"
                            },
                            "terms": {
                                "type": "array",
                                "description": "Terms & Conditions in json format. As as array of ids",
                                "example": [
                                    "001",
                                    "003"
                                ],
                                "items": {
                                    "type": "string",
                                    "description": "Terms & Conditions in json format. As as array of ids",
                                    "example": "[\"001\",\"003\"]"
                                }
                            },
                            "wms_sample": {
                                "$ref": "#/components/schemas/WMSSample"
                            }
                        },
                        "description": "Describe the resource (dataset|tool)",
                        "readOnly": true
                    },
                    "WMSSample": {
                        "title": "WMSSample",
                        "type": "object",
                        "properties": {
                            "title": {
                                "title": "title",
                                "type": "string",
                                "description": "WMS title",
                                "example": "WMS preview for ERA15 Surface Parameters"
                            },
                            "url": {
                                "type": "string",
                                "description": "WMS remote provider url",
                                "example": "http://wmsremoteprovider.com/wmsdefinition"
                            },
                            "layer_prefix": {
                                "title": "layer_prefix",
                                "type": "string",
                                "description": "Layer prefix",
                                "example": "ecmwf:era15:temperature"
                            }
                        },
                        "description": "Describe the wmsSample object",
                        "readOnly": true
                    },
                    "ErrorJsonV2": {
                        "title": "Error",
                        "type": "object",
                        "properties": {
                            "message": {
                                "type": "string",
                                "description": "Error message as used in user interfaces",
                                "example": "There was an internal error processing your request"
                            },
                            "url": {
                                "type": "string",
                                "description": "A URI which is unique to this particular class of error. This may not point to a real resource (so putting it in your browser may not help), but will be helpful ifyou need to report a problem with the API.",
                                "example": "http://climate.copernicus.eu/exc/bad-moon-phase"
                            },
                            "reason": {
                                "type": "string",
                                "description": "Additional error description not normally shown in user interfaces.",
                                "example": "Werewolf transition state error"
                            },
                            "context": {
                                "type": "string",
                                "description": "An arbitrary JSON object containing additional information for debugging. A 'traceback' entry is usually present."
                            },
                            "permanent": {
                                "type": "boolean",
                                "description": "If this is true then the request should not be retried unchanged (for example, it is an invalid request)."
                            },
                            "who": {
                                "type": "string",
                                "description": "Is this a problem in the server or in the request?",
                                "enum": [
                                    "client",
                                    "server"
                                ]
                            }
                        }
                    },
                    "JsonArray": {
                        "type": "object",
                        "properties": {
                            "empty": {
                                "type": "boolean"
                            },
                            "asBoolean": {
                                "type": "boolean"
                            },
                            "asNumber": {
                                "type": "number"
                            },
                            "asFloat": {
                                "type": "number",
                                "format": "float"
                            },
                            "asInt": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "asByte": {
                                "type": "string",
                                "format": "byte"
                            },
                            "asCharacter": {
                                "type": "string"
                            },
                            "asBigDecimal": {
                                "type": "number"
                            },
                            "asBigInteger": {
                                "type": "integer"
                            },
                            "asShort": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "asString": {
                                "type": "string"
                            },
                            "asDouble": {
                                "type": "number",
                                "format": "double"
                            },
                            "asLong": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "jsonArray": {
                                "type": "boolean"
                            },
                            "jsonObject": {
                                "type": "boolean"
                            },
                            "jsonPrimitive": {
                                "type": "boolean"
                            },
                            "jsonNull": {
                                "type": "boolean"
                            },
                            "asJsonObject": {
                                "$ref": "#/components/schemas/JsonObject"
                            },
                            "asJsonArray": {
                                "$ref": "#/components/schemas/JsonArray"
                            },
                            "asJsonPrimitive": {
                                "$ref": "#/components/schemas/JsonPrimitive"
                            },
                            "asJsonNull": {
                                "$ref": "#/components/schemas/JsonNull"
                            }
                        }
                    },
                    "JsonElement": {
                        "type": "object",
                        "properties": {
                            "asBoolean": {
                                "type": "boolean"
                            },
                            "jsonArray": {
                                "type": "boolean"
                            },
                            "jsonObject": {
                                "type": "boolean"
                            },
                            "jsonPrimitive": {
                                "type": "boolean"
                            },
                            "jsonNull": {
                                "type": "boolean"
                            },
                            "asJsonObject": {
                                "$ref": "#/components/schemas/JsonObject"
                            },
                            "asJsonArray": {
                                "$ref": "#/components/schemas/JsonArray"
                            },
                            "asJsonPrimitive": {
                                "$ref": "#/components/schemas/JsonPrimitive"
                            },
                            "asJsonNull": {
                                "$ref": "#/components/schemas/JsonNull"
                            },
                            "asNumber": {
                                "type": "number"
                            },
                            "asFloat": {
                                "type": "number",
                                "format": "float"
                            },
                            "asInt": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "asByte": {
                                "type": "string",
                                "format": "byte"
                            },
                            "asCharacter": {
                                "type": "string"
                            },
                            "asBigDecimal": {
                                "type": "number"
                            },
                            "asBigInteger": {
                                "type": "integer"
                            },
                            "asShort": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "asString": {
                                "type": "string"
                            },
                            "asDouble": {
                                "type": "number",
                                "format": "double"
                            },
                            "asLong": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "JsonNull": {
                        "type": "object",
                        "properties": {
                            "asBoolean": {
                                "type": "boolean"
                            },
                            "jsonArray": {
                                "type": "boolean"
                            },
                            "jsonObject": {
                                "type": "boolean"
                            },
                            "jsonPrimitive": {
                                "type": "boolean"
                            },
                            "jsonNull": {
                                "type": "boolean"
                            },
                            "asJsonObject": {
                                "$ref": "#/components/schemas/JsonObject"
                            },
                            "asJsonArray": {
                                "$ref": "#/components/schemas/JsonArray"
                            },
                            "asJsonPrimitive": {
                                "$ref": "#/components/schemas/JsonPrimitive"
                            },
                            "asJsonNull": {
                                "$ref": "#/components/schemas/JsonNull"
                            },
                            "asNumber": {
                                "type": "number"
                            },
                            "asFloat": {
                                "type": "number",
                                "format": "float"
                            },
                            "asInt": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "asByte": {
                                "type": "string",
                                "format": "byte"
                            },
                            "asCharacter": {
                                "type": "string"
                            },
                            "asBigDecimal": {
                                "type": "number"
                            },
                            "asBigInteger": {
                                "type": "integer"
                            },
                            "asShort": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "asString": {
                                "type": "string"
                            },
                            "asDouble": {
                                "type": "number",
                                "format": "double"
                            },
                            "asLong": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "JsonObject": {
                        "type": "object",
                        "properties": {
                            "asBoolean": {
                                "type": "boolean"
                            },
                            "jsonArray": {
                                "type": "boolean"
                            },
                            "jsonObject": {
                                "type": "boolean"
                            },
                            "jsonPrimitive": {
                                "type": "boolean"
                            },
                            "jsonNull": {
                                "type": "boolean"
                            },
                            "asJsonObject": {
                                "$ref": "#/components/schemas/JsonObject"
                            },
                            "asJsonArray": {
                                "$ref": "#/components/schemas/JsonArray"
                            },
                            "asJsonPrimitive": {
                                "$ref": "#/components/schemas/JsonPrimitive"
                            },
                            "asJsonNull": {
                                "$ref": "#/components/schemas/JsonNull"
                            },
                            "asNumber": {
                                "type": "number"
                            },
                            "asFloat": {
                                "type": "number",
                                "format": "float"
                            },
                            "asInt": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "asByte": {
                                "type": "string",
                                "format": "byte"
                            },
                            "asCharacter": {
                                "type": "string"
                            },
                            "asBigDecimal": {
                                "type": "number"
                            },
                            "asBigInteger": {
                                "type": "integer"
                            },
                            "asShort": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "asString": {
                                "type": "string"
                            },
                            "asDouble": {
                                "type": "number",
                                "format": "double"
                            },
                            "asLong": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "JsonPrimitive": {
                        "type": "object",
                        "properties": {
                            "asBoolean": {
                                "type": "boolean"
                            },
                            "boolean": {
                                "type": "boolean"
                            },
                            "number": {
                                "type": "boolean"
                            },
                            "asNumber": {
                                "type": "number"
                            },
                            "asFloat": {
                                "type": "number",
                                "format": "float"
                            },
                            "asInt": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "asByte": {
                                "type": "string",
                                "format": "byte"
                            },
                            "asCharacter": {
                                "type": "string"
                            },
                            "asBigDecimal": {
                                "type": "number"
                            },
                            "asBigInteger": {
                                "type": "integer"
                            },
                            "asShort": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "string": {
                                "type": "boolean"
                            },
                            "asString": {
                                "type": "string"
                            },
                            "asDouble": {
                                "type": "number",
                                "format": "double"
                            },
                            "asLong": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "jsonArray": {
                                "type": "boolean"
                            },
                            "jsonObject": {
                                "type": "boolean"
                            },
                            "jsonPrimitive": {
                                "type": "boolean"
                            },
                            "jsonNull": {
                                "type": "boolean"
                            },
                            "asJsonObject": {
                                "$ref": "#/components/schemas/JsonObject"
                            },
                            "asJsonArray": {
                                "$ref": "#/components/schemas/JsonArray"
                            },
                            "asJsonPrimitive": {
                                "$ref": "#/components/schemas/JsonPrimitive"
                            },
                            "asJsonNull": {
                                "$ref": "#/components/schemas/JsonNull"
                            }
                        }
                    },
                    "Task": {
                        "title": "Task",
                        "type": "object",
                        "properties": {
                            "state": {
                                "type": "string",
                                "description": "The current state of this request. New requests will usually begin in the 'queued' state, but you should be prepared for any state (requests for results we already have in our cache may immediately return 'completed', for example).\n\n'denied' requests are requests which CDS has declined to run, usually as a result of them being too large.\n\n'completed' requests have a result available - butbe aware that URLs may have a limited life, and that a completed status is not a guarantee that the URL will not produce a 404 Not Found error.\n\n 'unavailable' requests are requests which were previously completed but where CDS knows that the URL is no longer valid. API users are unlikely to see this state.",
                                "enum": [
                                    "denied",
                                    "queued",
                                    "running",
                                    "failed",
                                    "unavailable",
                                    "completed"
                                ]
                            },
                            "request_id": {
                                "type": "string",
                                "description": "The CDS-generated UUID for this request.",
                                "example": "12183e75-3441-412c-88c1-8e127231b27c"
                            },
                            "message": {
                                "type": "string",
                                "description": "If state=denied then this gives the reason the request was not accepted. Otherwise this is not present.",
                                "example": "Denied by QoS: output size too large"
                            },
                            "error": {
                                "$ref": "#/components/schemas/ErrorJsonV2"
                            },
                            "result": {
                                "type": "string",
                                "description": "If state=completed and this is set than it's a URL pointing to the result data. URLs may have a limited life(possibly in hours) and might not point to a CDS server.content_type and content_length will usually also be set when this is set.",
                                "example": "42"
                            },
                            "resultProvidedBy": {
                                "type": "string"
                            },
                            "sentToRMQAt": {
                                "type": "string"
                            },
                            "specificMetadataJson": {
                                "type": "string"
                            },
                            "content_length": {
                                "type": "integer",
                                "description": "If state=completed and the result is a reference to a single external document (URL), then this gives the size of the output data.",
                                "format": "int64",
                                "example": 9916113
                            },
                            "attachedMetadata": {
                                "$ref": "#/components/schemas/JsonElement"
                            },
                            "requestUUID": {
                                "type": "string",
                                "format": "uuid"
                            },
                            "cds_user_data": {
                                "type": "string",
                                "description": "If you specified data in the 'cds_user_data' parameter in your request then this data is echoed here.",
                                "example": "{\"my_data\":42}"
                            },
                            "content_type": {
                                "type": "string",
                                "description": "If state=completed, then this gives the MIME type of the output data.",
                                "example": "application/x-netcdf"
                            }
                        },
                        "description": "Describes a CDS task and its current state (including the result, if it has one).",
                        "readOnly": true
                    },
                    "TermsAndCondsMetadata": {
                        "title": "Terms And Conditions Metadata",
                        "type": "object",
                        "properties": {
                            "terms_id": {
                                "type": "string",
                                "description": "Id of the terms and description",
                                "example": "id002"
                            },
                            "revision": {
                                "type": "integer",
                                "description": "Revision number of the terms and conditions",
                                "format": "int32",
                                "example": 17
                            },
                            "title": {
                                "type": "string",
                                "description": "Title of the terms and conditions",
                                "example": "Terms and Conditions cookies"
                            },
                            "display_url": {
                                "type": "string",
                                "description": "Url of the markdown file ",
                                "example": "/api/v2/terms/static/filename002.md"
                            },
                            "download_url": {
                                "type": "string",
                                "description": "Url of the pdf file ",
                                "example": "/api/v2/terms/static/filename002.pdf"
                            },
                            "note": {
                                "type": "string",
                                "description": "Notes regarding this term and conditions",
                                "example": "Updated because new privacy policies"
                            },
                            "constrained": {
                                "type": "array",
                                "description": "Involved in constraints",
                                "example": "true or false",
                                "items": {
                                    "type": "string",
                                    "description": "Involved in constraints",
                                    "example": "true or false"
                                }
                            }
                        },
                        "description": "Describes particular terms and conditions",
                        "readOnly": true
                    }
                },
                "securitySchemes": {
                    "API key": {
                        "type": "http",
                        "description": "Use your numeric CDS user ID as a username and your API key as a password. To obtain these, log in to the CDS UI and go to your user profile byclicking on your name in the top right.",
                        "scheme": "basic"
                    }
                }
            }
        },
        "clms": {
            "swagger": "2.0",
            "info": {
                "description": "Learn how to access the catalog using the GeoNetwork REST API.",
                "version": "0.1",
                "title": "GeoNetwork Api Documentation (beta)",
                "termsOfService": "urn:tos",
                "contact": {
                    "name": "geonetwork@osgeo.org"
                },
                "license": {
                    "name": "GPL 2.0",
                    "url": "http://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
                }
            },
            "host": "land.copernicus.vgt.vito.be",
            "basePath": "/geonetwork/srv",
            "tags": [
                {
                    "name": "csw",
                    "description": "Virtual CSW operations"
                },
                {
                    "name": "customstyle",
                    "description": "Functionalities for custom styling"
                },
                {
                    "name": "formatters",
                    "description": "Formatter operations"
                },
                {
                    "name": "groups",
                    "description": "Groups operations"
                },
                {
                    "name": "harvesters",
                    "description": "Harvester operations"
                },
                {
                    "name": "identifiers",
                    "description": "Identifiers operations"
                },
                {
                    "name": "languages",
                    "description": "Languages operations"
                },
                {
                    "name": "logos",
                    "description": "Logos operations"
                },
                {
                    "name": "mapservers",
                    "description": "Mapservers related operations"
                },
                {
                    "name": "me",
                    "description": "Me operations"
                },
                {
                    "name": "operations",
                    "description": "Privileges operations"
                },
                {
                    "name": "processes",
                    "description": "Processing operations"
                },
                {
                    "name": "records",
                    "description": "Metadata record operations"
                },
                {
                    "name": "regions",
                    "description": "Regions operations"
                },
                {
                    "name": "registries",
                    "description": "Registries related operations"
                },
                {
                    "name": "related",
                    "description": "Related records"
                },
                {
                    "name": "selections",
                    "description": "Selection related operations"
                },
                {
                    "name": "site",
                    "description": "Catalog operations"
                },
                {
                    "name": "sources",
                    "description": "Sources operations"
                },
                {
                    "name": "standards",
                    "description": "Standard related operations"
                },
                {
                    "name": "status",
                    "description": "Workflow status operations"
                },
                {
                    "name": "tags",
                    "description": "Tags operations"
                },
                {
                    "name": "threads",
                    "description": "Threads"
                },
                {
                    "name": "tools",
                    "description": "Utility operations"
                },
                {
                    "name": "userfeedback",
                    "description": "User feedback"
                },
                {
                    "name": "users",
                    "description": "User operations"
                },
                {
                    "name": "userselections",
                    "description": "User selections related operations"
                },
                {
                    "name": "workers",
                    "description": "Workers related operations"
                }
            ],
            "paths": {
                "/api/0.1/csw/virtuals": {
                    "get": {
                        "tags": [
                            "csw"
                        ],
                        "summary": "Get virtual CSW services",
                        "description": "Virtual CSWs are created to easily setup services providing access to records without the need to define filters. For example, in Europe, local, regional and national organizations define entry point for records in the scope of the INSPIRE directive. Those services can then be easily harvested to exchange information. Virtual CSWs do not support transaction. For this use the main catalog CSW service.",
                        "operationId": "getAllVirtualCsw",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Service"
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "csw"
                        ],
                        "summary": "Add a virtual CSW",
                        "description": "The service name MUST be unique. An exception is returned if not the case.",
                        "operationId": "addVirtualCsw",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "in": "body",
                                "name": "service",
                                "description": "Service details",
                                "required": true,
                                "schema": {
                                    "$ref": "#/definitions/Service"
                                }
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Return the identifier of the newly created service",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrator can access it."
                            },
                            "404": {
                                "description": "A service already exist with this name"
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/csw/virtuals/{identifier}": {
                    "get": {
                        "tags": [
                            "csw"
                        ],
                        "summary": "Get a virtual CSW",
                        "operationId": "getVirtualCsw",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "identifier",
                                "in": "path",
                                "description": "Service identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/Service"
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "csw"
                        ],
                        "summary": "Update a virtual CSW",
                        "operationId": "updateVirtualCsw",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "identifier",
                                "in": "path",
                                "description": "Service identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "in": "body",
                                "name": "service",
                                "description": "Service details",
                                "required": true,
                                "schema": {
                                    "$ref": "#/definitions/Service"
                                }
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Service updated."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrator can access it."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    },
                    "delete": {
                        "tags": [
                            "csw"
                        ],
                        "summary": "Remove a virtual CSW",
                        "description": "After removal, all virtual CSW configuration is reloaded.",
                        "operationId": "deleteVirtualCsw",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "identifier",
                                "in": "path",
                                "description": "Service identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Service removed."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrator can access it."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/customstyle": {
                    "get": {
                        "tags": [
                            "customstyle"
                        ],
                        "summary": "Get CssStyleSettings",
                        "description": "This returns a map with all Less variables.",
                        "operationId": "getCssStyle",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "customstyle"
                        ],
                        "summary": "Saves custom style variables.",
                        "description": "Saves custom style variables.",
                        "operationId": "saveCustomStyle",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "in": "body",
                                "name": "gnCssStyle",
                                "description": "jsonVariables",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Created",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/formatters/cache": {
                    "delete": {
                        "tags": [
                            "formatters"
                        ],
                        "summary": "Clear formatter cache",
                        "description": "Formatters are used to render records in various format (HTML, PDF, ...). When a record is rendered a cache is populated for better performance. By default the cache is an H2 database with files on the filesystems (See <dataDirectory>/resources/htmlcache/formatter-cache folder).",
                        "operationId": "clearFormatterCache",
                        "produces": [
                            "*/*"
                        ],
                        "responses": {
                            "204": {
                                "description": "Cache cleared."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrator can access it."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/groups": {
                    "get": {
                        "tags": [
                            "groups"
                        ],
                        "summary": "Get groups",
                        "description": "The catalog contains one or more groups. By default, there is 3 reserved groups (Internet, Intranet, Guest) and a sample group.<br/>This service returns all catalog groups when not authenticated or when current is user is an administrator. The list can contains or not reserved groups depending on the parameters.<br/>When authenticated, return user groups optionally filtered on a specific user profile.",
                        "operationId": "getGroups",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "withReservedGroup",
                                "in": "query",
                                "description": "Including Internet, Intranet, Guest groups or not",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "profile",
                                "in": "query",
                                "description": "For a specific profile",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Group"
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "groups"
                        ],
                        "summary": "Add a group",
                        "description": "Return the identifier of the group created.",
                        "operationId": "addGroup",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "in": "body",
                                "name": "group",
                                "description": "Group details",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/Group"
                                }
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "201": {
                                "description": "Group created.",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "400": {
                                "description": "Group with that id or name already exist."
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/groups/{groupIdentifier}": {
                    "get": {
                        "tags": [
                            "groups"
                        ],
                        "summary": "Get group",
                        "description": "Return the requested group details.",
                        "operationId": "getGroup",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "groupIdentifier",
                                "in": "path",
                                "description": "Group identifier",
                                "required": false,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/Group"
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "groups"
                        ],
                        "summary": "Update a group",
                        "operationId": "updateGroup",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "groupIdentifier",
                                "in": "path",
                                "description": "Group identifier",
                                "required": false,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "in": "body",
                                "name": "group",
                                "description": "Group details",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/Group"
                                }
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Group updated."
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    },
                    "delete": {
                        "tags": [
                            "groups"
                        ],
                        "summary": "Remove a group",
                        "description": "Remove a group by first removing sharing settings, link to users and finally reindex all affected records.",
                        "operationId": "deleteGroup",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "groupIdentifier",
                                "in": "path",
                                "description": "Group identifier.",
                                "required": false,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Group removed."
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/groups/{groupIdentifier}/users": {
                    "get": {
                        "tags": [
                            "groups"
                        ],
                        "summary": "Get group users",
                        "operationId": "getGroupUsers",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "groupIdentifier",
                                "in": "path",
                                "description": "Group identifier",
                                "required": false,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "List of users in that group.",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/User"
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/groups/{groupId}/logo": {
                    "get": {
                        "tags": [
                            "groups"
                        ],
                        "summary": "Get the group logo image.",
                        "description": "If last-modified header is present it is used to check if the logo has been modified since the header date. If it hasn't been modified returns an empty 304 Not Modified response. If modified returns the image. If the group has no logo then returns a transparent 1x1 px PNG image.",
                        "operationId": "get",
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "groupId",
                                "in": "path",
                                "description": "Group identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/api/0.1/harvesters/{harvesterUuid}/assign": {
                    "post": {
                        "tags": [
                            "harvesters"
                        ],
                        "summary": "Assign harvester records to a new source",
                        "operationId": "assignHarvestedRecordToSource",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "harvesterUuid",
                                "in": "path",
                                "description": "The harvester UUID",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "source",
                                "in": "query",
                                "description": "The target source UUID",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Harvester records transfered to new source.",
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "100",
                                        "101",
                                        "102",
                                        "103",
                                        "200",
                                        "201",
                                        "202",
                                        "203",
                                        "204",
                                        "205",
                                        "206",
                                        "207",
                                        "208",
                                        "226",
                                        "300",
                                        "301",
                                        "302",
                                        "303",
                                        "304",
                                        "305",
                                        "307",
                                        "308",
                                        "400",
                                        "401",
                                        "402",
                                        "403",
                                        "404",
                                        "405",
                                        "406",
                                        "407",
                                        "408",
                                        "409",
                                        "410",
                                        "411",
                                        "412",
                                        "413",
                                        "414",
                                        "415",
                                        "416",
                                        "417",
                                        "418",
                                        "419",
                                        "420",
                                        "421",
                                        "422",
                                        "423",
                                        "424",
                                        "426",
                                        "428",
                                        "429",
                                        "431",
                                        "500",
                                        "501",
                                        "502",
                                        "503",
                                        "504",
                                        "505",
                                        "506",
                                        "507",
                                        "508",
                                        "509",
                                        "510",
                                        "511"
                                    ]
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/identifiers": {
                    "get": {
                        "tags": [
                            "identifiers"
                        ],
                        "summary": "Get identifier templates",
                        "description": "Identifier templates are used to create record UUIDs havind a particular structure. The template will be used when user creates a new record. The template identifier to use is defined in the administration > settings.",
                        "operationId": "getIdentifiers",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "userDefinedOnly",
                                "in": "query",
                                "description": "Only user defined ones",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "List of identifier templates.",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/MetadataIdentifierTemplate"
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editor can access it."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    },
                    "put": {
                        "tags": [
                            "identifiers"
                        ],
                        "summary": "Add an identifier template",
                        "operationId": "addIdentifier",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "in": "body",
                                "name": "metadataIdentifierTemplate",
                                "description": "Identifier template details",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/MetadataIdentifierTemplate"
                                }
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Identifier template created.",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editor can access it."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/identifiers/{identifier}": {
                    "put": {
                        "tags": [
                            "identifiers"
                        ],
                        "summary": "Update an identifier template",
                        "operationId": "updateIdentifier",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "identifier",
                                "in": "path",
                                "description": "Identifier template identifier",
                                "required": false,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "in": "body",
                                "name": "metadataIdentifierTemplate",
                                "description": "Identifier template details",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/MetadataIdentifierTemplate"
                                }
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Identifier template updated."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editor can access it."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    },
                    "delete": {
                        "tags": [
                            "identifiers"
                        ],
                        "summary": "Remove an identifier template",
                        "operationId": "deleteIdentifier",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "identifier",
                                "in": "path",
                                "description": "Identifier template identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Template identifier removed."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editor can access it."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/isolanguages": {
                    "get": {
                        "tags": [
                            "languages"
                        ],
                        "summary": "Get ISO languages",
                        "description": "ISO languages provides a list of all languages (eg. used for autocompletion in metadata editor).",
                        "operationId": "getIsoLanguages",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/IsoLanguage"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/languages": {
                    "get": {
                        "tags": [
                            "languages"
                        ],
                        "summary": "Get languages",
                        "description": "Languages for the application having translations in the database. All tables with 'Desc' suffix contains translation for some domain objects like groups, tags, ...",
                        "operationId": "getLanguages",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Language"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/languages/{langCode}": {
                    "put": {
                        "tags": [
                            "languages"
                        ],
                        "summary": "Add a language",
                        "description": "Add all default translations from all *Desc tables in the database. This operation will only add translations for a default catalog installation. Defaults can be customized in SQL scripts located in WEB-INF/classes/setup/sql/data/*.",
                        "operationId": "addLanguage",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "langCode",
                                "in": "path",
                                "description": "ISO 3 letter code",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Language translations added."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrator can access it."
                            },
                            "404": {
                                "description": "Resource not found. eg. No SQL file available for that langugae."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    },
                    "delete": {
                        "tags": [
                            "languages"
                        ],
                        "summary": "Remove a language",
                        "description": "Delete all translations from all *Desc tables in the database. Warning: This will also remove all translations you may have done to those objects (eg. custom groups).",
                        "operationId": "deleteLanguage",
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "langCode",
                                "in": "path",
                                "description": "ISO 3 letter code",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Language translations removed."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrator can access it."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/logos": {
                    "get": {
                        "tags": [
                            "logos"
                        ],
                        "summary": "Get all logos",
                        "description": "Logos are used for the catalog, the groups logos, and harvester icons. Logos are stored in the data directory in <dataDirectory>/resources/images/harvesting.<br/> Records are attached to a source. A source can be the local catalog or a harvester node. When a source is created, its logo is located in the images/logos folder with the source UUID as filename. For some sources the logo can be automatically retrieved (eg. when harvesting GeoNetwork catalogs). For others, the logo is usually manually defined when configuring the harvester.",
                        "operationId": "getLogos",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "logos"
                        ],
                        "summary": "Add a logo",
                        "operationId": "addLogo",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "file",
                                "in": "formData",
                                "description": "The logo image to upload",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "file"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "overwrite",
                                "in": "query",
                                "description": "Overwrite if exists",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Logo added.",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/logos/{file}": {
                    "delete": {
                        "tags": [
                            "logos"
                        ],
                        "summary": "Remove a logo",
                        "operationId": "deleteLogo",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "file",
                                "in": "path",
                                "description": "The logo filename to delete",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Logo removed."
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/mapservers": {
                    "get": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Get mapservers",
                        "description": "Mapservers are used by the catalog to publish record attachements (eg. ZIP file with shape) or record associated resources (eg. database table, file on the local network) in a remote mapserver like GeoServer or MapServer. The catalog communicate with the mapserver using GeoServer REST API.",
                        "operationId": "getMapservers",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/AnonymousMapserver"
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    },
                    "put": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Add a mapserver",
                        "description": "Return the id of the newly created mapserver.",
                        "operationId": "addMapserver",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "in": "body",
                                "name": "mapserver",
                                "description": "Mapserver details",
                                "required": true,
                                "schema": {
                                    "$ref": "#/definitions/MapServer"
                                }
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Mapserver created.",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "400": {
                                "description": "Bad parameters."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/mapservers/{mapserverId}": {
                    "get": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Get a mapserver",
                        "operationId": "getMapserver",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "mapserverId",
                                "in": "path",
                                "description": "Mapserver identifier",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/AnonymousMapserver"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    },
                    "put": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Update a mapserver",
                        "operationId": "updateMapserver",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "mapserverId",
                                "in": "path",
                                "description": "Mapserver identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "in": "body",
                                "name": "mapserver",
                                "description": "Mapserver details",
                                "required": true,
                                "schema": {
                                    "$ref": "#/definitions/MapServer"
                                }
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Mapserver updated."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    },
                    "delete": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Remove a mapserver",
                        "operationId": "deleteMapserver",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "mapserverId",
                                "in": "path",
                                "description": "Mapserver identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Mapserver removed."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/mapservers/{mapserverId}/auth": {
                    "post": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Update a mapserver authentication",
                        "description": "The remote mapserver REST API may require basic authentication. This operation set the username and password.",
                        "operationId": "updateMapserverAuth",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "mapserverId",
                                "in": "path",
                                "description": "Mapserver identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "name": "username",
                                "in": "query",
                                "description": "User name",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "password",
                                "in": "query",
                                "description": "Password",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Mapserver updated."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/mapservers/{mapserverId}/records/{metadataUuid}": {
                    "get": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Check metadata mapserver resource is published ",
                        "operationId": "getMapserverResource",
                        "produces": [
                            "text/plain"
                        ],
                        "parameters": [
                            {
                                "name": "mapserverId",
                                "in": "path",
                                "description": "Mapserver identifier",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "resource",
                                "in": "query",
                                "description": "Resource name (could be a file or a db connection)",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "metadataTitle",
                                "in": "query",
                                "description": "Metadata title",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "metadataAbstract",
                                "in": "query",
                                "description": "Metadata abstract",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    },
                    "put": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Publish a metadata resource in a mapserver",
                        "operationId": "publishMapserverResource",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "text/plain"
                        ],
                        "parameters": [
                            {
                                "name": "mapserverId",
                                "in": "path",
                                "description": "Mapserver identifier",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "resource",
                                "in": "query",
                                "description": "Resource name (could be a file or a db connection)",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "metadataTitle",
                                "in": "query",
                                "description": "Metadata title",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "metadataAbstract",
                                "in": "query",
                                "description": "Metadata abstract",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    },
                    "delete": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Remove a metadata mapserver resource",
                        "operationId": "deleteMapserverResource",
                        "produces": [
                            "text/plain"
                        ],
                        "parameters": [
                            {
                                "name": "mapserverId",
                                "in": "path",
                                "description": "Mapserver identifier",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "resource",
                                "in": "query",
                                "description": "Resource name (could be a file or a db connection)",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "metadataTitle",
                                "in": "query",
                                "description": "Metadata title",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "metadataAbstract",
                                "in": "query",
                                "description": "Metadata abstract",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/me": {
                    "get": {
                        "tags": [
                            "me"
                        ],
                        "summary": "Get information about me",
                        "description": "If not authenticated, return status 204 (NO_CONTENT), else return basic user information. This operation is usually used to know if current user is authenticated or not.",
                        "operationId": "getMe",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Authenticated. Return user details.",
                                "schema": {
                                    "$ref": "#/definitions/MeResponse"
                                }
                            },
                            "204": {
                                "description": "Not authenticated.",
                                "schema": {
                                    "$ref": "#/definitions/MeResponse"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/operations": {
                    "get": {
                        "tags": [
                            "operations"
                        ],
                        "summary": "Get operations",
                        "description": "Return the list of operations. Operations are used to define authorization per group. Extending the list of default operations (ie. view, dynamic, download, editing, notify, featured) might be feasible but is experimental.<br/> Featured is not really used anymore (was used in past version for home page highlights).",
                        "operationId": "getOperations",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Operation"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/processes/reports": {
                    "get": {
                        "tags": [
                            "processes"
                        ],
                        "summary": "Get current process reports",
                        "description": "When processing, the report is stored in memory and allows to retrieve progress repport during processing. Usually, process reports are returned by the synchronous processing operation.",
                        "operationId": "getProcessReport",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "List of reports returned.",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ProcessingReport"
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only authenticated user can access it."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "processes"
                        ],
                        "summary": "Clear process reports list",
                        "operationId": "deleteProcess",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "204": {
                                "description": "Report registry cleared."
                            },
                            "403": {
                                "description": "Operation not allowed. Only authenticated user can access it."
                            }
                        }
                    }
                },
                "/api/0.1/processes/search-and-replace": {
                    "post": {
                        "tags": [
                            "processes"
                        ],
                        "summary": "Search and replace values in one or more records",
                        "description": "Service to apply replacements to one or more records.\n To define a replacement, send the following parameters:\n * mdsection-139815551372=metadata\n * mdfield-1398155513728=id.contact.individualName\n * replaceValue-1398155513728=Juan\n * searchValue-1398155513728=Jose\n\nTODO: Would be good to provide a simple object to define list of changes instead of group of parameters.<br/>Batch editing can also be used for similar works.",
                        "operationId": "searchAndReplace",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "process",
                                "in": "query",
                                "description": "process",
                                "required": false,
                                "type": "string",
                                "default": "massive-content-update"
                            },
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "isTesting",
                                "in": "query",
                                "description": "Test only (ie. metadata are not saved). Return the report only.",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "isCaseInsensitive",
                                "in": "query",
                                "description": "Case insensitive search.",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "vacuumMode",
                                "in": "query",
                                "description": "'record' to apply vacuum.xsl, 'element' to remove empty elements. Empty to not affect empty elements.",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Replacements applied.",
                                "schema": {
                                    "$ref": "#/definitions/MetadataReplacementProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        }
                    }
                },
                "/api/0.1/processes/{process}": {
                    "get": {
                        "tags": [
                            "processes"
                        ],
                        "summary": "Preview process result applied to one or more records",
                        "description": "Preview result of a process applied to metadata records with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process. Append mode has 2 limitations. First, it only support a set of records in the same schema. Secondly, it does not propagate URL parameters. This mode is mainly used to create custom reports based on metadata records content.If process name ends with '.csv', the XSL process output a text document which is returned. When errors occur during processing, the processing report is returned in JSON format.",
                        "operationId": "previewProcessRecordsUsingXslt",
                        "consumes": [
                            "text/html",
                            "*/*"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "process",
                                "in": "path",
                                "description": "Process identifier",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "appendFirst",
                                "in": "query",
                                "description": "Append documents before processing",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Processed records.",
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "processes"
                        ],
                        "summary": "Apply a process to one or more records",
                        "description": "Process a metadata with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process.",
                        "operationId": "processRecordsUsingXslt",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "process",
                                "in": "path",
                                "description": "Process identifier",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "index",
                                "in": "query",
                                "description": "Index after processing",
                                "required": false,
                                "type": "boolean",
                                "default": true
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Report about processed records.",
                                "schema": {
                                    "$ref": "#/definitions/XsltMetadataProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        }
                    }
                },
                "/api/0.1/records": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get catalog content as RDF",
                        "description": ".",
                        "operationId": "getAsRdf",
                        "consumes": [
                            "*/*"
                        ],
                        "produces": [
                            "application/rdf+xml"
                        ],
                        "responses": {
                            "200": {
                                "description": "Return the catalog content as RDF."
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add a record from XML or MEF/ZIP file",
                        "description": "Add record in the catalog by uploading files.",
                        "operationId": "insertFile",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataType",
                                "in": "query",
                                "description": "The type of record.",
                                "required": false,
                                "type": "string",
                                "default": "METADATA",
                                "enum": [
                                    "METADATA",
                                    "TEMPLATE",
                                    "SUB_TEMPLATE",
                                    "TEMPLATE_OF_SUB_TEMPLATE"
                                ]
                            },
                            {
                                "name": "file",
                                "in": "formData",
                                "description": "XML or MEF file to upload",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "file"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "uuidProcessing",
                                "in": "query",
                                "description": "Record identifier processing.",
                                "required": false,
                                "type": "string",
                                "default": "NOTHING",
                                "enum": [
                                    "GENERATEUUID",
                                    "NOTHING",
                                    "OVERWRITE"
                                ]
                            },
                            {
                                "name": "group",
                                "in": "query",
                                "description": "The group the record is attached to.",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "category",
                                "in": "query",
                                "description": "Tags to assign to the record.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "rejectIfInvalid",
                                "in": "query",
                                "description": "Validate the record first and reject it if not valid.",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "publishToAll",
                                "in": "query",
                                "description": "(XML file only) Publish record.",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "assignToCatalog",
                                "in": "query",
                                "description": "(MEF file only) Assign to current catalog.",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "transformWith",
                                "in": "query",
                                "description": "XSL transformation to apply to the record.",
                                "required": false,
                                "type": "string",
                                "default": "_none_"
                            },
                            {
                                "name": "schema",
                                "in": "query",
                                "description": "Force the schema of the record. If not set, schema autodetection is used (and is the preferred method).",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "extra",
                                "in": "query",
                                "description": "(experimental) Add extra information to the record.",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Report about imported records.",
                                "schema": {
                                    "$ref": "#/definitions/SimpleMetadataProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add a record",
                        "description": "Add one or more record from an XML fragment, URL or file in a folder on the catalog server. When loadingfrom the catalog server folder, it might be faster to use a local filesystem harvester.",
                        "operationId": "insert",
                        "consumes": [
                            "application/xml",
                            "application/json",
                            "application/x-www-form-urlencoded"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataType",
                                "in": "query",
                                "description": "The type of record.",
                                "required": false,
                                "type": "string",
                                "default": "METADATA",
                                "enum": [
                                    "METADATA",
                                    "TEMPLATE",
                                    "SUB_TEMPLATE",
                                    "TEMPLATE_OF_SUB_TEMPLATE"
                                ]
                            },
                            {
                                "in": "body",
                                "name": "xml",
                                "description": "XML fragment.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "url",
                                "in": "query",
                                "description": "URL of a file to download and insert.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "serverFolder",
                                "in": "query",
                                "description": "Server folder where to look for files.",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "recursiveSearch",
                                "in": "query",
                                "description": "(Server folder import only) Recursive search in folder.",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "assignToCatalog",
                                "in": "query",
                                "description": "(MEF file only) Assign to current catalog.",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "uuidProcessing",
                                "in": "query",
                                "description": "Record identifier processing.",
                                "required": false,
                                "type": "string",
                                "default": "NOTHING",
                                "enum": [
                                    "GENERATEUUID",
                                    "NOTHING",
                                    "OVERWRITE"
                                ]
                            },
                            {
                                "name": "group",
                                "in": "query",
                                "description": "The group the record is attached to.",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "category",
                                "in": "query",
                                "description": "Tags to assign to the record.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "rejectIfInvalid",
                                "in": "query",
                                "description": "Validate the record first and reject it if not valid.",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "transformWith",
                                "in": "query",
                                "description": "XSL transformation to apply to the record.",
                                "required": false,
                                "type": "string",
                                "default": "_none_"
                            },
                            {
                                "name": "schema",
                                "in": "query",
                                "description": "Force the schema of the record. If not set, schema autodetection is used (and is the preferred method).",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "extra",
                                "in": "query",
                                "description": "(experimental) Add extra information to the record.",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Report about imported records.",
                                "schema": {
                                    "$ref": "#/definitions/SimpleMetadataProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete one or more records",
                        "description": "User MUST be able to edit the record to delete it. ",
                        "operationId": "deleteRecords",
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "withBackup",
                                "in": "query",
                                "description": "Backup first the record as MEF in the metadata removed folder.",
                                "required": false,
                                "type": "boolean",
                                "default": true
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/SimpleMetadataProcessingReport"
                                }
                            },
                            "204": {
                                "description": "Report about deleted records.",
                                "schema": {
                                    "$ref": "#/definitions/SimpleMetadataProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        }
                    }
                },
                "/api/0.1/records/backups": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Trigger MEF backup archive",
                        "description": "The backup contains all metadata not harvested including templates.",
                        "operationId": "triggerBackup",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Return succeed message.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/records/backups/latest": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Download MEF backup archive",
                        "description": "The backup contains all metadata not harvested including templates.",
                        "operationId": "downloadBackup",
                        "produces": [
                            "application/zip"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/FileSystemResource"
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        }
                    }
                },
                "/api/0.1/records/batchediting": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Edit a set of records by XPath expressions",
                        "operationId": "batchEdit",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "in": "body",
                                "name": "edits",
                                "description": "edits",
                                "required": true,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/BatchEditParameter"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Return a report of what has been done.",
                                "schema": {
                                    "$ref": "#/definitions/IProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/duplicate": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Create a new record",
                        "description": "Create a record from a template or by copying an existing record.Return the UUID of the newly created record. Existing links in the source record are preserved, this means that the new record may contains link to the source attachements. They need to be manually updated after creation.",
                        "operationId": "create",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataType",
                                "in": "query",
                                "description": "The type of record.",
                                "required": false,
                                "type": "string",
                                "default": "METADATA",
                                "enum": [
                                    "METADATA",
                                    "TEMPLATE",
                                    "SUB_TEMPLATE",
                                    "TEMPLATE_OF_SUB_TEMPLATE"
                                ]
                            },
                            {
                                "name": "sourceUuid",
                                "in": "query",
                                "description": "UUID of the source record to copy.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "targetUuid",
                                "in": "query",
                                "description": "Assign a custom UUID. If this UUID already exist an error is returned. This is enabled only if metadata create / generate UUID settings is activated.",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "group",
                                "in": "query",
                                "description": "The group the record is attached to.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "isVisibleByAllGroupMembers",
                                "in": "query",
                                "description": "Is published to all user group members? If not, only the author and administrator can edit the record.",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "category",
                                "in": "query",
                                "description": "Tags to assign to the record.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "hasCategoryOfSource",
                                "in": "query",
                                "description": "Copy categories from source?",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "isChildOfSource",
                                "in": "query",
                                "description": "Is child of the record to copy?",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Return the internal id of the newly created record.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        }
                    }
                },
                "/api/0.1/records/importfrommap": {
                    "post": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add a map metadata record from OGC OWS context",
                        "description": "Add record in the catalog by uploading a map context.",
                        "operationId": "insertOgcMapContextFile",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "title",
                                "in": "query",
                                "description": "A map title",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "recordAbstract",
                                "in": "query",
                                "description": "A map abstract",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "xml",
                                "in": "query",
                                "description": "OGC OWS context as string",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "filename",
                                "in": "query",
                                "description": "OGC OWS context file name",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "url",
                                "in": "query",
                                "description": "OGC OWS context URL",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "viewerUrl",
                                "in": "query",
                                "description": "A map viewer URL to visualize the map",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "overview",
                                "in": "query",
                                "description": "Map overview as PNG (base64 encoded)",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "overviewFilename",
                                "in": "query",
                                "description": "Map overview filename",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "topic",
                                "in": "query",
                                "description": "Topic category",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "uuidProcessing",
                                "in": "query",
                                "description": "Record identifier processing.",
                                "required": false,
                                "type": "string",
                                "default": "NOTHING",
                                "enum": [
                                    "GENERATEUUID",
                                    "NOTHING",
                                    "OVERWRITE"
                                ]
                            },
                            {
                                "name": "group",
                                "in": "query",
                                "description": "The group the record is attached to.",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Report about imported records.",
                                "schema": {
                                    "$ref": "#/definitions/SimpleMetadataProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        }
                    }
                },
                "/api/0.1/records/index": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Index a set of records",
                        "description": "Index a set of records provided either by a bucket or a list of uuids",
                        "operationId": "indexSelection",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Record indexed.",
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it."
                            }
                        }
                    }
                },
                "/api/0.1/records/ownership": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Set group and owner for one or more records",
                        "operationId": "setGroupAndOwner",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "groupIdentifier",
                                "in": "query",
                                "description": "Group identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "userIdentifier",
                                "in": "query",
                                "description": "User identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Records group and owner updated",
                                "schema": {
                                    "$ref": "#/definitions/MetadataProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/samples": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add samples",
                        "description": "Add sample records for one or more schemas. Samples are defined for each standard in the samples folder as MEF files.",
                        "operationId": "addSamples",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "query",
                                "description": "Schema identifiers",
                                "required": true,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Return a report of what has been done.",
                                "schema": {
                                    "$ref": "#/definitions/SimpleMetadataProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it."
                            }
                        }
                    }
                },
                "/api/0.1/records/sharing": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get record sharing settings",
                        "operationId": "getSharingSettings",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Return a default array of group and operations that can be used to set record sharing properties.",
                                "schema": {
                                    "$ref": "#/definitions/SharingResponse"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Set sharing settings for one or more records",
                        "description": "See record sharing for more details.",
                        "operationId": "shareRecords",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "in": "body",
                                "name": "sharing",
                                "description": "Privileges",
                                "required": true,
                                "schema": {
                                    "$ref": "#/definitions/SharingParameter"
                                }
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Report about updated privileges.",
                                "schema": {
                                    "$ref": "#/definitions/MetadataProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        }
                    }
                },
                "/api/0.1/records/tags": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add tags to one or more records",
                        "operationId": "addTagsToRecords",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "id",
                                "in": "query",
                                "description": "Tag identifier",
                                "required": true,
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "clear",
                                "in": "query",
                                "description": "Clear all before adding new ones",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Report about updated records.",
                                "schema": {
                                    "$ref": "#/definitions/MetadataProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete tags to one or more records",
                        "operationId": "deleteRecordsTags",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "id",
                                "in": "query",
                                "description": "Tag identifier",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Report about removed records.",
                                "schema": {
                                    "$ref": "#/definitions/MetadataProcessingReport"
                                }
                            },
                            "204": {
                                "description": "No Content",
                                "schema": {
                                    "$ref": "#/definitions/MetadataProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        }
                    }
                },
                "/api/0.1/records/templates": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add templates",
                        "description": "Add template records for one or more schemas. Templates are defined for each standard in the template folder as XML files. Template may also contains subtemplates.",
                        "operationId": "addTemplates",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "query",
                                "description": "Schema identifiers",
                                "required": true,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Return a report of what has been done.",
                                "schema": {
                                    "$ref": "#/definitions/SimpleMetadataProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it."
                            }
                        }
                    }
                },
                "/api/0.1/records/validate": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Validate one or more records",
                        "description": "Update validation status for all records.",
                        "operationId": "validateRecords",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Records validated.",
                                "schema": {
                                    "$ref": "#/definitions/SimpleMetadataProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it."
                            }
                        }
                    }
                },
                "/api/0.1/records/versions": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "(Experimental) Enable version control for one or more records",
                        "operationId": "enableVersionControlForRecords",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/MetadataProcessingReport"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get a metadata record",
                        "description": "Depending on the accept header the appropriate formatter is used. When requesting a ZIP, a MEF version 2 file is returned. When requesting HTML, the default formatter is used.",
                        "operationId": "getRecord",
                        "consumes": [
                            "*/*"
                        ],
                        "produces": [
                            "application/xml",
                            "text/html",
                            "application/json",
                            "application/pdf",
                            "*/*",
                            "application/x-gn-mef-1-zip",
                            "application/zip",
                            "application/xhtml+xml",
                            "application/x-gn-mef-2-zip"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "Accept",
                                "in": "header",
                                "description": "Accept header should indicate which is the appropriate format to return. It could be text/html, application/xml, application/zip, ...If no appropriate Accept header found, the XML format is returned.",
                                "required": true,
                                "type": "string",
                                "default": "application/xml"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Return the record.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete a record",
                        "description": "User MUST be able to edit the record to delete it. By default, a backup is made in ZIP format. After that, the record attachments are removed, the document removed from the index and then from the database.",
                        "operationId": "deleteRecord",
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "withBackup",
                                "in": "query",
                                "description": "Backup first the record as MEF in the metadata removed folder.",
                                "required": false,
                                "type": "boolean",
                                "default": true
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Record deleted."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/alert": {
                    "post": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Send an email to catalogue administrator or record's contact",
                        "operationId": "sendEmailToContact",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Metadata record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "recaptcha",
                                "in": "query",
                                "description": "Recaptcha validation key.",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "name",
                                "in": "query",
                                "description": "User name.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "org",
                                "in": "query",
                                "description": "User organisation.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "email",
                                "in": "query",
                                "description": "User email address.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "comments",
                                "in": "query",
                                "description": "A comment or question.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "phone",
                                "in": "query",
                                "description": "User phone number.",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "subject",
                                "in": "query",
                                "description": "Email subject.",
                                "required": false,
                                "type": "string",
                                "default": "User feedback"
                            },
                            {
                                "name": "function",
                                "in": "query",
                                "description": "User function.",
                                "required": false,
                                "type": "string",
                                "default": "-"
                            },
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Comment type.",
                                "required": false,
                                "type": "string",
                                "default": "-"
                            },
                            {
                                "name": "category",
                                "in": "query",
                                "description": "Comment category.",
                                "required": false,
                                "type": "string",
                                "default": "-"
                            },
                            {
                                "name": "metadataEmail",
                                "in": "query",
                                "description": "List of record's contact to send this email.",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Created",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/attachments": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "List all metadata attachments",
                        "description": "<a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/using-filestore.html'>More info</a>",
                        "operationId": "getAllMetadataResources",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "sort",
                                "in": "query",
                                "description": "Sort by",
                                "required": false,
                                "type": "string",
                                "default": "name",
                                "enum": [
                                    "type",
                                    "name"
                                ]
                            },
                            {
                                "name": "filter",
                                "in": "query",
                                "description": "filter",
                                "required": false,
                                "type": "string",
                                "default": "*.*"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Return the record attachments.",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/MetadataResource"
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Create a new resource for a given metadata",
                        "operationId": "putResourceFromFile",
                        "consumes": [
                            "multipart/form-data"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "visibility",
                                "in": "query",
                                "description": "The sharing policy",
                                "required": false,
                                "type": "string",
                                "default": "public",
                                "enum": [
                                    "public",
                                    "private"
                                ]
                            },
                            {
                                "name": "file",
                                "in": "formData",
                                "description": "The file to upload",
                                "required": false,
                                "type": "file"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Attachment uploaded.",
                                "schema": {
                                    "$ref": "#/definitions/MetadataResource"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Create a new resource from a URL for a given metadata",
                        "operationId": "putResourcesFromURL",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "visibility",
                                "in": "query",
                                "description": "The sharing policy",
                                "required": false,
                                "type": "string",
                                "default": "public",
                                "enum": [
                                    "public",
                                    "private"
                                ]
                            },
                            {
                                "name": "url",
                                "in": "query",
                                "description": "The URL to load in the store",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Attachment added.",
                                "schema": {
                                    "$ref": "#/definitions/MetadataResource"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete all uploaded metadata resources",
                        "operationId": "deleteAllMetadataResources",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Attachment added."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/attachments/print-thumbnail": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Create an overview using the map print module",
                        "description": "<a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/linking-thumbnail.html#generating-a-thumbnail-using-wms-layers'>More info</a>",
                        "operationId": "createMetadataOverview",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "jsonConfig",
                                "in": "query",
                                "description": "The mapprint module JSON configuration",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "rotationAngle",
                                "in": "query",
                                "description": "The rotation angle of the map",
                                "required": false,
                                "type": "integer",
                                "default": 0,
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Thumbnail created.",
                                "schema": {
                                    "$ref": "#/definitions/MetadataResource"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/attachments/{resourceId}": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get a metadata resource",
                        "operationId": "getResource",
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "resourceId",
                                "in": "path",
                                "description": "The resource identifier (ie. filename)",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            },
                            "201": {
                                "description": "Record attachment.",
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to download the resource."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete a metadata resource",
                        "operationId": "deleteMetadataResource",
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "resourceId",
                                "in": "path",
                                "description": "The resource identifier (ie. filename)",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Attachment visibility removed."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    },
                    "patch": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Update the metadata resource visibility",
                        "operationId": "patchMetadataResourceVisibility",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "resourceId",
                                "in": "path",
                                "description": "The resource identifier (ie. filename)",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "visibility",
                                "in": "query",
                                "description": "The visibility",
                                "required": true,
                                "type": "string",
                                "enum": [
                                    "public",
                                    "private"
                                ]
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Attachment visibility updated.",
                                "schema": {
                                    "$ref": "#/definitions/MetadataResource"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/editor": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Edit a record",
                        "description": "Return HTML form for editing.",
                        "operationId": "editor",
                        "consumes": [
                            "*/*"
                        ],
                        "produces": [
                            "application/xml"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "currTab",
                                "in": "query",
                                "description": "Tab",
                                "required": false,
                                "type": "string",
                                "default": "simple"
                            },
                            {
                                "name": "withAttributes",
                                "in": "query",
                                "description": "withAttributes",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "The editor form.",
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Save edits",
                        "description": "Save the HTML form content.",
                        "operationId": "saveEdits",
                        "consumes": [
                            "*/*"
                        ],
                        "produces": [
                            "application/xml"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "tab",
                                "in": "query",
                                "description": "Tab",
                                "required": false,
                                "type": "string",
                                "default": "simple"
                            },
                            {
                                "name": "withAttributes",
                                "in": "query",
                                "description": "withAttributes",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "withValidationErrors",
                                "in": "query",
                                "description": "withValidationErrors",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "minor",
                                "in": "query",
                                "description": "minor",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "commit",
                                "in": "query",
                                "description": "Save current edits.",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "terminate",
                                "in": "query",
                                "description": "Save and terminate session.",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "data",
                                "in": "query",
                                "description": "Record as XML. TODO: rename xml",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "The editor form.",
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Cancel edits",
                        "description": "Cancel current editing session.",
                        "operationId": "cancelEdits",
                        "consumes": [
                            "*/*"
                        ],
                        "produces": [
                            "application/xml"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Editing session cancelled."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/editor/attributes": {
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete attribute",
                        "operationId": "deleteAttribute",
                        "consumes": [
                            "*/*"
                        ],
                        "produces": [
                            "application/xml"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "ref",
                                "in": "query",
                                "description": "Reference of the attribute to remove.",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Attribute removed."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/editor/elements": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add element",
                        "operationId": "addElement",
                        "consumes": [
                            "*/*"
                        ],
                        "produces": [
                            "application/xml"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "ref",
                                "in": "query",
                                "description": "Reference of the insertion point.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "name",
                                "in": "query",
                                "description": "Name of the element to add (with prefix)",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "child",
                                "in": "query",
                                "description": "Use geonet:attribute for attributes or child name.",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Element added.",
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete element",
                        "operationId": "deleteElement",
                        "consumes": [
                            "*/*"
                        ],
                        "produces": [
                            "application/xml"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "ref",
                                "in": "query",
                                "description": "Reference of the element to remove.",
                                "required": true,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "parent",
                                "in": "query",
                                "description": "Name of the parent.",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Element removed."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/editor/elements/{direction}": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Reorder element",
                        "operationId": "reorderElement",
                        "consumes": [
                            "*/*"
                        ],
                        "produces": [
                            "application/xml"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "ref",
                                "in": "query",
                                "description": "Reference of the element to move.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "direction",
                                "in": "path",
                                "description": "Direction",
                                "required": true,
                                "type": "string",
                                "enum": [
                                    "up",
                                    "down"
                                ]
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Element reordered."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/featureCatalog": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Returns a map to decode attributes in a dataset (from the associated feature catalog)",
                        "description": "Retrieve related services, datasets, onlines, thumbnails, sources, ... to this records.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'>More info</a>",
                        "operationId": "getFeatureCatalog",
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Return the associated resources.",
                                "schema": {
                                    "$ref": "#/definitions/FeatureResponse"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/formatters/json": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get a metadata record as XML or JSON",
                        "operationId": "getRecordAsXmlOrJSON",
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "addSchemaLocation",
                                "in": "query",
                                "description": "Add XSD schema location based on standard configuration (see schema-ident.xml).",
                                "required": false,
                                "type": "boolean",
                                "default": true
                            },
                            {
                                "name": "increasePopularity",
                                "in": "query",
                                "description": "Increase record popularity",
                                "required": false,
                                "type": "boolean",
                                "default": true
                            },
                            {
                                "name": "withInfo",
                                "in": "query",
                                "description": "Add geonet:info details",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "attachment",
                                "in": "query",
                                "description": "Download as a file",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "Accept",
                                "in": "header",
                                "description": "Accept",
                                "required": true,
                                "type": "string",
                                "default": "application/xml"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Return the record.",
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/formatters/xml": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get a metadata record as XML or JSON",
                        "operationId": "getRecordAsXmlOrJSON_1",
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "addSchemaLocation",
                                "in": "query",
                                "description": "Add XSD schema location based on standard configuration (see schema-ident.xml).",
                                "required": false,
                                "type": "boolean",
                                "default": true
                            },
                            {
                                "name": "increasePopularity",
                                "in": "query",
                                "description": "Increase record popularity",
                                "required": false,
                                "type": "boolean",
                                "default": true
                            },
                            {
                                "name": "withInfo",
                                "in": "query",
                                "description": "Add geonet:info details",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "attachment",
                                "in": "query",
                                "description": "Download as a file",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "Accept",
                                "in": "header",
                                "description": "Accept",
                                "required": true,
                                "type": "string",
                                "default": "application/xml"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Return the record.",
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/formatters/zip": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get a metadata record as ZIP",
                        "description": "Metadata Exchange Format (MEF) is returned. MEF is a ZIP file containing the metadata as XML and some others files depending on the version requested. See http://geonetwork-opensource.org/manuals/trunk/eng/users/annexes/mef-format.html.",
                        "operationId": "getRecordAsZip",
                        "consumes": [
                            "*/*"
                        ],
                        "produces": [
                            "application/x-gn-mef-1-zip",
                            "application/zip",
                            "application/x-gn-mef-2-zip"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "format",
                                "in": "query",
                                "description": "MEF file format.",
                                "required": false,
                                "type": "string",
                                "default": "FULL",
                                "enum": [
                                    "simple",
                                    "partial",
                                    "full"
                                ]
                            },
                            {
                                "name": "withRelated",
                                "in": "query",
                                "description": "With related records (parent and service).",
                                "required": false,
                                "type": "boolean",
                                "default": true
                            },
                            {
                                "name": "withXLinksResolved",
                                "in": "query",
                                "description": "Resolve XLinks in the records.",
                                "required": false,
                                "type": "boolean",
                                "default": true
                            },
                            {
                                "name": "withXLinkAttribute",
                                "in": "query",
                                "description": "Preserve XLink URLs in the records.",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "addSchemaLocation",
                                "in": "query",
                                "description": "addSchemaLocation",
                                "required": false,
                                "type": "boolean",
                                "default": true
                            },
                            {
                                "name": "Accept",
                                "in": "header",
                                "description": "Accept",
                                "required": true,
                                "type": "string",
                                "default": "application/x-gn-mef-2-zip"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Return the record."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/formatters/{formatterId}": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get a formatted metadata record",
                        "operationId": "getRecordFormattedBy",
                        "produces": [
                            "text/html",
                            "application/pdf",
                            "*/*",
                            "application/xhtml+xml"
                        ],
                        "parameters": [
                            {
                                "name": "Accept",
                                "in": "header",
                                "description": "Formatter type to use.",
                                "required": false,
                                "type": "string",
                                "default": "text/html"
                            },
                            {
                                "name": "formatterId",
                                "in": "path",
                                "description": "formatterId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "width",
                                "in": "query",
                                "description": "width",
                                "required": false,
                                "type": "string",
                                "default": "_100",
                                "enum": [
                                    "_25",
                                    "_50",
                                    "_75",
                                    "_100"
                                ]
                            },
                            {
                                "name": "mdpath",
                                "in": "query",
                                "description": "mdpath",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "output",
                                "in": "query",
                                "description": "output",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "xml",
                                    "html",
                                    "pdf",
                                    "txt",
                                    "testpdf"
                                ]
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/group": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Set record group",
                        "description": "A record is related to one group.",
                        "operationId": "setRecordGroup",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "in": "body",
                                "name": "groupIdentifier",
                                "description": "Group identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Record group updated."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/ownership": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Set record group and owner",
                        "operationId": "setRecordOwnership",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "groupIdentifier",
                                "in": "query",
                                "description": "Group identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "name": "userIdentifier",
                                "in": "query",
                                "description": "User identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Record group and owner updated",
                                "schema": {
                                    "$ref": "#/definitions/MetadataProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/processes": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get suggestions",
                        "description": "Analyze the record an suggest processes to improve the quality of the record.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/workflow/batchupdate-xsl.html'>More info</a>",
                        "operationId": "getSuggestions",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Record suggestions.",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/SuggestionType"
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/processes/{process}": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Preview process result",
                        "description": "Process a metadata with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process.",
                        "operationId": "processRecordPreview",
                        "produces": [
                            "application/xml"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "process",
                                "in": "path",
                                "description": "Process identifier",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "A preview of the processed record.",
                                "schema": {
                                    "$ref": "#/definitions/Element"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Apply a process",
                        "description": "Process a metadata with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process.",
                        "operationId": "processRecord",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "process",
                                "in": "path",
                                "description": "Process identifier",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            },
                            "204": {
                                "description": "Record processed and saved.",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/query": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "List saved queries for this metadata",
                        "operationId": "getMetadataSavedQueries",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Saved query available.",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/SavedQuery"
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/query/{savedQuery}": {
                    "post": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Apply a saved query for this metadata",
                        "description": "All parameters will be substituted to the XPath query. eg. {{protocol}} in the XPath expression will be replaced by the protocol parameter provided in the request body.",
                        "operationId": "applyQuery",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "savedQuery",
                                "in": "path",
                                "description": "The saved query to apply",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "in": "body",
                                "name": "parameters",
                                "description": "The query parameters",
                                "required": false,
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "List of matching elements. If element are nodes, then they are returned as string.",
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/rate": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Rate a record",
                        "description": "User rating of metadata. If the metadata was harvested using the 'GeoNetwork' protocol and the system setting localrating/enable is false (the default), the user's rating is shared between GN nodes in this harvesting network. If the metadata was not harvested or if localrating/enable is true then 'local rating' is applied, counting only rating from users of this node.<br/>When a remote rating is applied, the local rating is not updated. It will be updated on the next harvest run (FIXME ?).",
                        "operationId": "rate",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "in": "body",
                                "name": "rating",
                                "description": "Rating",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "New rating value.",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/related": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get record related resources",
                        "description": "Retrieve related services, datasets, onlines, thumbnails, sources, ... to this records.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'>More info</a>",
                        "operationId": "getAssociated",
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Type of related resource. If none, all resources are returned.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "children",
                                        "parent",
                                        "siblings",
                                        "associated",
                                        "services",
                                        "datasets",
                                        "fcats",
                                        "hasfeaturecats",
                                        "sources",
                                        "hassources",
                                        "related",
                                        "onlines",
                                        "thumbnails"
                                    ]
                                },
                                "collectionFormat": "multi",
                                "enum": [
                                    "children",
                                    "parent",
                                    "siblings",
                                    "associated",
                                    "services",
                                    "datasets",
                                    "fcats",
                                    "hasfeaturecats",
                                    "sources",
                                    "hassources",
                                    "related",
                                    "onlines",
                                    "thumbnails"
                                ]
                            },
                            {
                                "name": "start",
                                "in": "query",
                                "description": "Start offset for paging. Default 1. Only applies to related metadata records (ie. not for thumbnails).",
                                "required": false,
                                "type": "integer",
                                "default": 1,
                                "format": "int32"
                            },
                            {
                                "name": "rows",
                                "in": "query",
                                "description": "Number of rows returned. Default 100.",
                                "required": false,
                                "type": "integer",
                                "default": 100,
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Return the associated resources.",
                                "schema": {
                                    "$ref": "#/definitions/RelatedResponse"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/sharing": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get record sharing settings",
                        "description": "Return current sharing options for a record.",
                        "operationId": "getRecordSharingSettings",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "The record sharing settings.",
                                "schema": {
                                    "$ref": "#/definitions/SharingResponse"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Set record sharing",
                        "description": "Privileges are assigned by group. User needs to be able to edit a record to set sharing settings. For reserved group (ie. Internet, Intranet & Guest), user MUST be reviewer of one group. For other group, if Only set privileges to user's groups is set in catalog configuration user MUST be a member of the group.<br/>Clear first allows to unset all operations first before setting the new ones.Clear option does not remove reserved groups operation if user is not an administrator, a reviewer or the owner of the record.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/publishing/managing-privileges.html'>More info</a>",
                        "operationId": "share",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "in": "body",
                                "name": "sharing",
                                "description": "Privileges",
                                "required": true,
                                "schema": {
                                    "$ref": "#/definitions/SharingParameter"
                                }
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Settings updated."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/status": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Set record status",
                        "operationId": "status",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "status",
                                "in": "query",
                                "description": "status",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "name": "comment",
                                "in": "query",
                                "description": "coment",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Status updated."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/tags": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get record tags",
                        "description": "Tags are used to classify information.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/tag-information/tagging-with-categories.html'>More info</a>",
                        "operationId": "getRecordTags",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Record tags.",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/MetadataCategory"
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add tags to a record",
                        "operationId": "addTagsToRecord",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "id",
                                "in": "query",
                                "description": "Tag identifier",
                                "required": true,
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "clear",
                                "in": "query",
                                "description": "Clear all before adding new ones",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Record tags added."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete tags of a record",
                        "operationId": "deleteRecordTags",
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "id",
                                "in": "query",
                                "description": "Tag identifier. If none, all tags are removed.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Record tags removed."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/userfeedback": {
                    "get": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Finds a list of user feedback for a specific records. ",
                        "description": " This list will include also the draft user feedback if the client is logged as reviewer.",
                        "operationId": "getUserCommentsOnARecord",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Metadata record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "size",
                                "in": "query",
                                "description": "Maximum number of feedback to return.",
                                "required": false,
                                "type": "integer",
                                "default": -1,
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/UserFeedbackDTO"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/userfeedbackrating": {
                    "get": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Provides an average rating for a metadata record",
                        "operationId": "getMetadataUserComments",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Metadata record UUID.",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/RatingAverage"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/validate/inspire": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Submit a record to the INSPIRE service for validation.",
                        "description": "User MUST be able to edit the record to validate it. An INSPIRE endpoint must be configured in Settings. This activates an asyncronous process, this method does not return any report. This method returns an id to be used to get the report.",
                        "operationId": "submitValidate",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "text/plain"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "201": {
                                "description": "Check status of the report.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            },
                            "404": {
                                "description": "Metdata not found."
                            },
                            "500": {
                                "description": "Service unavailable."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/validate/internal": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Validate a record",
                        "description": "User MUST be able to edit the record to validate it. FIXME : id MUST be the id of the current metadata record in session ?",
                        "operationId": "validate",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "isvalid",
                                "in": "query",
                                "description": "Validation status. Should be provided only in case of SUBTEMPLATE validation. If provided for another type, throw a BadParameter Exception",
                                "required": false,
                                "type": "boolean"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Validation report.",
                                "schema": {
                                    "$ref": "#/definitions/Reports"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/api/0.1/records/{metadataUuid}/versions": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "(Experimental) Enable version control",
                        "operationId": "enableVersionControl",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/records/{testId}/validate/inspire": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Check the status of validation with the INSPIRE service.",
                        "description": "User MUST be able to edit the record to validate it. An INSPIRE endpoint must be configured in Settings. If the process is complete an object with status is returned. ",
                        "operationId": "checkValidateStatus",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "testId",
                                "in": "path",
                                "description": "Test identifier",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Report ready.",
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            },
                            "201": {
                                "description": "Report not ready.",
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            },
                            "404": {
                                "description": "Report id not found."
                            }
                        }
                    }
                },
                "/api/0.1/regions": {
                    "get": {
                        "tags": [
                            "regions"
                        ],
                        "summary": "Get list of regions",
                        "operationId": "getRegions",
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "label",
                                "in": "query",
                                "description": "label",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "categoryId",
                                "in": "query",
                                "description": "categoryId",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "maxRecords",
                                "in": "query",
                                "description": "maxRecords",
                                "required": false,
                                "type": "integer",
                                "default": -1,
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "List of regions.",
                                "schema": {
                                    "$ref": "#/definitions/ListRegionsResponse"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/regions/types": {
                    "get": {
                        "tags": [
                            "regions"
                        ],
                        "summary": "Get list of region types",
                        "operationId": "getRegionTypes",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "List of region types.",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Category"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/registries/actions/entries/collect": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Preview directory entries extracted from records",
                        "description": "Scan one or more records for element matching the XPath provided and save them as directory entries (ie. subtemplate).<br/><br/>Only records that the current user can edit are analyzed.",
                        "operationId": "previewExtractedEntries",
                        "produces": [
                            "application/xml"
                        ],
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "xpath",
                                "in": "query",
                                "description": "XPath of the elements to extract as entry.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "identifierXpath",
                                "in": "query",
                                "description": "XPath of the element identifier. If not defined a random UUID is generated and analysis will not check for duplicates.",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Extracts directory entries from records",
                        "description": "Scan one or more records for element matching the XPath provided and save them as directory entries (ie. subtemplate).<br/><br/>Only records that the current user can edit are analyzed.",
                        "operationId": "extractEntries",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "xpath",
                                "in": "query",
                                "description": "XPath of the elements to extract as entry.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "identifierXpath",
                                "in": "query",
                                "description": "XPath of the element identifier. If not defined a random UUID is generated and analysis will not check for duplicates.",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ]
                    }
                },
                "/api/0.1/registries/actions/entries/import/spatial": {
                    "post": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Import spatial directory entries",
                        "description": "Directory entry (AKA subtemplates) are XML fragments that can be inserted in metadata records. Use this service to import geographic extent entries from an ESRI Shapefile format.",
                        "operationId": "importSpatialEntries",
                        "consumes": [
                            "multipart/form-data"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "file",
                                "in": "formData",
                                "description": "The ZIP file to upload containing the Shapefile.",
                                "required": true,
                                "type": "file"
                            },
                            {
                                "name": "uuidAttribute",
                                "in": "query",
                                "description": "Attribute to use for UUID. If none, random UUID are generated.",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "uuidPattern",
                                "in": "query",
                                "description": "Pattern to build UUID from. Default is '{{uuid}}'.",
                                "required": false,
                                "type": "string",
                                "default": "{{uuid}}"
                            },
                            {
                                "name": "descriptionAttribute",
                                "in": "query",
                                "description": "Attribute to use for extent description. If none, no extent description defined. TODO: Add per language desc ?",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "geomProjectionTo",
                                "in": "query",
                                "description": "geomProjectionTo",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "lenient",
                                "in": "query",
                                "description": "lenient",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "onlyBoundingBox",
                                "in": "query",
                                "description": "Create only bounding box for each spatial objects.",
                                "required": false,
                                "type": "boolean",
                                "default": true
                            },
                            {
                                "name": "process",
                                "in": "query",
                                "description": "Process",
                                "required": false,
                                "type": "string",
                                "default": "build-extent-subtemplate"
                            },
                            {
                                "name": "schema",
                                "in": "query",
                                "description": "Schema identifier",
                                "required": false,
                                "type": "string",
                                "default": "iso19139"
                            },
                            {
                                "name": "uuidProcessing",
                                "in": "query",
                                "description": "Record identifier processing.",
                                "required": false,
                                "type": "string",
                                "default": "NOTHING",
                                "enum": [
                                    "GENERATEUUID",
                                    "NOTHING",
                                    "OVERWRITE"
                                ]
                            },
                            {
                                "name": "group",
                                "in": "query",
                                "description": "The group the record is attached to.",
                                "required": false,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Directory entries imported.",
                                "schema": {
                                    "$ref": "#/definitions/SimpleMetadataProcessingReport"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it."
                            }
                        }
                    }
                },
                "/api/0.1/registries/actions/entries/synchronize": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Preview updated matching entries in records",
                        "description": "Scan one or more records for element matching the XPath provided and then check if this element is available in the directory. If Found, the element from the directory update the element in the record and optionally properties are preserved.<br/><br/>The identifier XPath is used to find a match. An optional filtercan be added to restrict search to a subset of the directory. If no identifier XPaths is provided, the UUID is based on the content of the snippet (hash). It is recommended to use an identifier for better matching (eg. ISO19139 contact with different roles will not match on the automatic UUID mode).",
                        "operationId": "previewUpdatedRecordEntries",
                        "produces": [
                            "application/xml"
                        ],
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "xpath",
                                "in": "query",
                                "description": "XPath of the elements to extract as entry.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "identifierXpath",
                                "in": "query",
                                "description": "XPath of the element identifier. If not defined a random UUID is generated and analysis will not check for duplicates.",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "propertiesToCopy",
                                "in": "query",
                                "description": "List of XPath of properties to copy from record to matching entry.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "substituteAsXLink",
                                "in": "query",
                                "description": "Replace entry by XLink.",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "fq",
                                "in": "query",
                                "description": "Filter query for directory search.",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Update matching entries in records",
                        "description": "Scan one or more records for element matching the XPath provided and then check if this element is available in the directory. If Found, the element from the directory update the element in the record and optionally properties are preserved.<br/><br/>The identifier XPath is used to find a match. An optional filtercan be added to restrict search to a subset of the directory. If no identifier XPaths is provided, the UUID is based on the content of the snippet (hash). It is recommended to use an identifier for better matching (eg. ISO19139 contact with different roles will not match on the automatic UUID mode).",
                        "operationId": "updateRecordEntries",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "xpath",
                                "in": "query",
                                "description": "XPath of the elements to extract as entry.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "identifierXpath",
                                "in": "query",
                                "description": "XPath of the element identifier. If not defined a random UUID is generated and analysis will not check for duplicates.",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "propertiesToCopy",
                                "in": "query",
                                "description": "List of XPath of properties to copy from record to matching entry.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "substituteAsXLink",
                                "in": "query",
                                "description": "Replace entry by XLink.",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "fq",
                                "in": "query",
                                "description": "Filter query for directory search.",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Created",
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/registries/crs": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Search coordinate reference system (CRS)",
                        "description": "Based on GeoTools EPSG database. If phrase query, each words are searched separately.",
                        "operationId": "searchCrs",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "q",
                                "in": "query",
                                "description": "Search value",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Type of CRS",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "CoordinateReferenceSystem",
                                    "VerticalCRS",
                                    "GeographicCRS",
                                    "ProjectedCRS"
                                ]
                            },
                            {
                                "name": "rows",
                                "in": "query",
                                "description": "Number of results. Default is: 100",
                                "required": false,
                                "type": "integer",
                                "default": 100,
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "List of CRS.",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Crs"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/registries/crs/types": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Get list of CRS type",
                        "operationId": "getCrsType",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "List of CRS types.",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "CoordinateReferenceSystem",
                                            "VerticalCRS",
                                            "GeographicCRS",
                                            "ProjectedCRS"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/registries/crs/{id}": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Get CRS",
                        "operationId": "getCrsById",
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "id",
                                "in": "path",
                                "description": "CRS identifier",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "CRS details.",
                                "schema": {
                                    "$ref": "#/definitions/Crs"
                                }
                            },
                            "404": {
                                "description": "CRS not found."
                            }
                        }
                    }
                },
                "/api/0.1/registries/entries/{uuid}": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Get a directory entry",
                        "description": "Directory entry (AKA subtemplates) are XML fragments that can be inserted in metadata records using XLinks. XLinks can be remote or local.",
                        "operationId": "getEntry",
                        "produces": [
                            "application/xml"
                        ],
                        "parameters": [
                            {
                                "name": "uuid",
                                "in": "path",
                                "description": "Directory entry UUID.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "process",
                                "in": "query",
                                "description": "Process",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "transformation",
                                "in": "query",
                                "description": "Transformation",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "lang",
                                "in": "query",
                                "description": "lang",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "schema",
                                "in": "query",
                                "description": "schema",
                                "required": false,
                                "type": "string",
                                "default": "iso19139"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Directory entry.",
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    }
                },
                "/api/0.1/registries/vocabularies/keyword": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Get keyword by id",
                        "description": "Retrieve XML representation of keyword(s) from same thesaurususing different transformations. 'to-iso19139-keyword' is the default and return an ISO19139 snippet.'to-iso19139-keyword-as-xlink' return an XLinked element. Custom transformation can be create on a per schema basis.",
                        "operationId": "getKeywordById",
                        "produces": [
                            "application/xml"
                        ],
                        "parameters": [
                            {
                                "name": "id",
                                "in": "query",
                                "description": "Keyword identifier or list of keyword identifiers comma separated.",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "thesaurus",
                                "in": "query",
                                "description": "Thesaurus to look info for the keyword(s).",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "lang",
                                "in": "query",
                                "description": "Languages.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "keywordOnly",
                                "in": "query",
                                "description": "Only print the keyword, no thesaurus information.",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "transformation",
                                "in": "query",
                                "description": "XSL template to use (ISO19139 keyword by default, see convert.xsl).",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "XML snippet with requested keywords.",
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/registries/vocabularies/search": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Search keywords",
                        "operationId": "searchKeywords",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "q",
                                "in": "query",
                                "description": "Query",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "lang",
                                "in": "query",
                                "description": "lang",
                                "required": false,
                                "type": "string",
                                "default": "eng"
                            },
                            {
                                "name": "rows",
                                "in": "query",
                                "description": "Number of rows",
                                "required": false,
                                "type": "integer",
                                "default": 1000,
                                "format": "int32"
                            },
                            {
                                "name": "start",
                                "in": "query",
                                "description": "Start from",
                                "required": false,
                                "type": "integer",
                                "default": 0,
                                "format": "int32"
                            },
                            {
                                "name": "pLang",
                                "in": "query",
                                "description": "Target langs",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "thesaurus",
                                "in": "query",
                                "description": "Thesaurus identifier",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            },
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Type of search",
                                "required": false,
                                "type": "string",
                                "default": "CONTAINS",
                                "enum": [
                                    "STARTS_WITH",
                                    "CONTAINS",
                                    "MATCH"
                                ]
                            },
                            {
                                "name": "uri",
                                "in": "query",
                                "description": "URI query",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "sort",
                                "in": "query",
                                "description": "Sort by",
                                "required": false,
                                "type": "string",
                                "default": "DESC"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/KeywordBean"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/related": {
                    "get": {
                        "tags": [
                            "related"
                        ],
                        "summary": "Get record related resources for all requested metadatas",
                        "description": "Retrieve related services, datasets, onlines, thumbnails, sources, ... to all requested records.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'>More info</a>",
                        "operationId": "getAssociated_1",
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Type of related resource. If none, all resources are returned.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "children",
                                        "parent",
                                        "siblings",
                                        "associated",
                                        "services",
                                        "datasets",
                                        "fcats",
                                        "hasfeaturecats",
                                        "sources",
                                        "hassources",
                                        "related",
                                        "onlines",
                                        "thumbnails"
                                    ]
                                },
                                "collectionFormat": "multi",
                                "enum": [
                                    "children",
                                    "parent",
                                    "siblings",
                                    "associated",
                                    "services",
                                    "datasets",
                                    "fcats",
                                    "hasfeaturecats",
                                    "sources",
                                    "hassources",
                                    "related",
                                    "onlines",
                                    "thumbnails"
                                ]
                            },
                            {
                                "name": "uuid",
                                "in": "query",
                                "description": "Uuids of the metadatas you request the relations from.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Return the associated resources.",
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "$ref": "#/definitions/RelatedResponse"
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    }
                },
                "/api/0.1/reports/datadownloads": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get list of metadata file downloads",
                        "operationId": "getReportDataDownloads",
                        "produces": [
                            "text/x-csv;charset=UTF-8"
                        ],
                        "parameters": [
                            {
                                "name": "dateFrom",
                                "in": "query",
                                "description": "From date of the metadata downloads",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "dateTo",
                                "in": "query",
                                "description": "To date of the metadata downloads",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "groups",
                                "in": "query",
                                "description": "Metadata group(s)",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "List of metadata file downloads."
                            }
                        }
                    }
                },
                "/api/0.1/reports/datauploads": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get uploaded files to metadata records during a period.",
                        "operationId": "getReportDataUploads",
                        "produces": [
                            "text/x-csv;charset=UTF-8"
                        ],
                        "parameters": [
                            {
                                "name": "dateFrom",
                                "in": "query",
                                "description": "From date of the metadata uploads",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "dateTo",
                                "in": "query",
                                "description": "To date of the metadata uploads",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "groups",
                                "in": "query",
                                "description": "Metadata group(s)",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/api/0.1/reports/metadatainternal": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get the metadata not published during a period.",
                        "operationId": "getReportDataUploads_1",
                        "produces": [
                            "text/x-csv;charset=UTF-8"
                        ],
                        "parameters": [
                            {
                                "name": "dateFrom",
                                "in": "query",
                                "description": "From date of metadata change date",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "dateTo",
                                "in": "query",
                                "description": "To date of metadata change date",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "groups",
                                "in": "query",
                                "description": "Metadata group(s)",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Metadata not published during a period."
                            }
                        }
                    }
                },
                "/api/0.1/reports/metadataupdated": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get the updated metadata during a period.",
                        "operationId": "getReportDataUploads_2",
                        "produces": [
                            "text/x-csv;charset=UTF-8"
                        ],
                        "parameters": [
                            {
                                "name": "dateFrom",
                                "in": "query",
                                "description": "From date of metadata change date",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "dateTo",
                                "in": "query",
                                "description": "To date of metadata change date",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "groups",
                                "in": "query",
                                "description": "Metadata group(s)",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Updated metadata during a period."
                            }
                        }
                    }
                },
                "/api/0.1/reports/users": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get the list of users \"active\" during a time period.",
                        "operationId": "getActiveUsers",
                        "produces": [
                            "text/x-csv;charset=UTF-8"
                        ],
                        "parameters": [
                            {
                                "name": "dateFrom",
                                "in": "query",
                                "description": "From date of users login date",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "dateTo",
                                "in": "query",
                                "description": "To date of users login date",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "groups",
                                "in": "query",
                                "description": "Group(s) for the users",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "List of users \"active\" during a time period."
                            }
                        }
                    }
                },
                "/api/0.1/selections/{bucket}": {
                    "get": {
                        "tags": [
                            "selections"
                        ],
                        "summary": "Get current selection",
                        "operationId": "getSelection",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "bucket",
                                "in": "path",
                                "description": "Bucket name",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "selections"
                        ],
                        "summary": "Select one or more items",
                        "operationId": "addToSelection",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "bucket",
                                "in": "path",
                                "description": "Bucket name",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "uuid",
                                "in": "query",
                                "description": "One or more record UUIDs. If null, select all in current search if bucket name is 'metadata' (TODO: remove this limitation?).",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "selections"
                        ],
                        "summary": "Clear selection or remove items",
                        "operationId": "clearSelection",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "bucket",
                                "in": "path",
                                "description": "Selection bucket name",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "uuid",
                                "in": "query",
                                "description": "One or more record UUIDs",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/site": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get site description",
                        "operationId": "getDescription",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Site description.",
                                "schema": {
                                    "$ref": "#/definitions/SettingsListResponse"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/site/index": {
                    "put": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Index",
                        "operationId": "index",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "reset",
                                "in": "query",
                                "description": "Drop and recreate index",
                                "required": false,
                                "type": "boolean",
                                "default": true
                            },
                            {
                                "name": "havingXlinkOnly",
                                "in": "query",
                                "description": "Records having only XLinks",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/HttpEntity"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/site/index/es": {
                    "put": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Index in Elastic",
                        "operationId": "indexes",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "reset",
                                "in": "query",
                                "description": "Drop and recreate index",
                                "required": false,
                                "type": "boolean",
                                "default": true
                            },
                            {
                                "name": "havingXlinkOnly",
                                "in": "query",
                                "description": "Records having only XLinks",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/HttpEntity"
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Delete index in Elastic",
                        "operationId": "deleteIndexes",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/HttpEntity"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/site/indexing": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Is indexing?",
                        "operationId": "isIndexing",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/site/info": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get site informations",
                        "operationId": "getInformation",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Site information.",
                                "schema": {
                                    "$ref": "#/definitions/SiteInformation"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/site/info/build": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get build details",
                        "description": "To know when and how this version of the application was built.",
                        "operationId": "getSystemInfo",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Build info.",
                                "schema": {
                                    "$ref": "#/definitions/SystemInfo"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/site/info/isCasEnabled": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Is CAS enabled?",
                        "operationId": "isCasEnabled",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/site/info/readonly": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Is in read-only mode?",
                        "operationId": "isReadOnly",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/site/info/staging/{profile}": {
                    "put": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Update staging profile",
                        "description": "TODO: Needs doc",
                        "operationId": "updateStagingProfile",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "profile",
                                "in": "path",
                                "description": "profile",
                                "required": true,
                                "type": "string",
                                "enum": [
                                    "testing",
                                    "development",
                                    "production"
                                ]
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Staging profile saved."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it."
                            }
                        }
                    }
                },
                "/api/0.1/site/info/transforms": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get XSL tranformations available",
                        "description": "XSL transformations may be applied while importing or harvesting records.",
                        "operationId": "getXslTransformations",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "XSLT available.",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/site/logging": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get log files",
                        "operationId": "getLogFiles",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/LogFileResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/site/logging/activity": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get last activity",
                        "operationId": "getLastActivity",
                        "produces": [
                            "text/plain"
                        ],
                        "parameters": [
                            {
                                "name": "lines",
                                "in": "query",
                                "description": "Number of lines to return",
                                "required": false,
                                "type": "integer",
                                "default": 2000,
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/site/logging/activity/zip": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get last activity in a ZIP",
                        "operationId": "getLastActivityInAZip",
                        "produces": [
                            "application/zip"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/api/0.1/site/logo": {
                    "put": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Set catalog logo",
                        "description": "Logos are stored in the data directory resources/images/harvesting as PNG or GIF images. When a logo is assigned to the catalog, a new image is created in images/logos/<catalogUuid>.png.",
                        "operationId": "setLogo",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "file",
                                "in": "query",
                                "description": "Logo to use for the catalog",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "asFavicon",
                                "in": "query",
                                "description": "Create favicon too",
                                "required": false,
                                "type": "boolean",
                                "default": false
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Logo set."
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            }
                        }
                    }
                },
                "/api/0.1/site/settings": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get settings",
                        "description": "Return public settings for anonymous users, internals are allowed for authenticated.",
                        "operationId": "getSettings",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "set",
                                "in": "query",
                                "description": "Setting set. A common set of settings to retrieve.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "INSPIRE",
                                        "HARVESTER",
                                        "USER_GROUP_ONLY",
                                        "AUTH",
                                        "READ_ONLY",
                                        "INDEX",
                                        "SYSTEMINFO",
                                        "STAGING_PROFILE",
                                        "TYPE"
                                    ]
                                },
                                "collectionFormat": "multi",
                                "enum": [
                                    "INSPIRE",
                                    "HARVESTER",
                                    "USER_GROUP_ONLY",
                                    "AUTH",
                                    "READ_ONLY",
                                    "INDEX",
                                    "SYSTEMINFO",
                                    "STAGING_PROFILE",
                                    "TYPE"
                                ]
                            },
                            {
                                "name": "key",
                                "in": "query",
                                "description": "Setting key",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Settings.",
                                "schema": {
                                    "$ref": "#/definitions/SettingsListResponse"
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Save settings",
                        "operationId": "saveSettingsDetails",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "204": {
                                "description": "Settings saved."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it."
                            }
                        }
                    }
                },
                "/api/0.1/site/settings/details": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get settings with details",
                        "description": "Provides also setting properties.",
                        "operationId": "getSettingsDetails",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "set",
                                "in": "query",
                                "description": "Setting set. A common set of settings to retrieve.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "INSPIRE",
                                        "HARVESTER",
                                        "USER_GROUP_ONLY",
                                        "AUTH",
                                        "READ_ONLY",
                                        "INDEX",
                                        "SYSTEMINFO",
                                        "STAGING_PROFILE",
                                        "TYPE"
                                    ]
                                },
                                "collectionFormat": "multi",
                                "enum": [
                                    "INSPIRE",
                                    "HARVESTER",
                                    "USER_GROUP_ONLY",
                                    "AUTH",
                                    "READ_ONLY",
                                    "INDEX",
                                    "SYSTEMINFO",
                                    "STAGING_PROFILE",
                                    "TYPE"
                                ]
                            },
                            {
                                "name": "key",
                                "in": "query",
                                "description": "Setting key",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Settings with details.",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Setting"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/site/threads/debugging/{contention}/{enablement}": {
                    "get": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "debugging",
                        "operationId": "debuggingUsingGET",
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "contention",
                                "in": "path",
                                "description": "contention",
                                "required": true,
                                "type": "boolean"
                            },
                            {
                                "name": "enablement",
                                "in": "path",
                                "description": "enablement",
                                "required": true,
                                "type": "boolean"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ThreadResponse"
                                }
                            }
                        }
                    },
                    "head": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "debugging",
                        "operationId": "debuggingUsingHEAD",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "contention",
                                "in": "path",
                                "description": "contention",
                                "required": true,
                                "type": "boolean"
                            },
                            {
                                "name": "enablement",
                                "in": "path",
                                "description": "enablement",
                                "required": true,
                                "type": "boolean"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ThreadResponse"
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "debugging",
                        "operationId": "debuggingUsingPOST",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "contention",
                                "in": "path",
                                "description": "contention",
                                "required": true,
                                "type": "boolean"
                            },
                            {
                                "name": "enablement",
                                "in": "path",
                                "description": "enablement",
                                "required": true,
                                "type": "boolean"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ThreadResponse"
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "debugging",
                        "operationId": "debuggingUsingPUT",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "contention",
                                "in": "path",
                                "description": "contention",
                                "required": true,
                                "type": "boolean"
                            },
                            {
                                "name": "enablement",
                                "in": "path",
                                "description": "enablement",
                                "required": true,
                                "type": "boolean"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ThreadResponse"
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "debugging",
                        "operationId": "debuggingUsingDELETE",
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "contention",
                                "in": "path",
                                "description": "contention",
                                "required": true,
                                "type": "boolean"
                            },
                            {
                                "name": "enablement",
                                "in": "path",
                                "description": "enablement",
                                "required": true,
                                "type": "boolean"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ThreadResponse"
                                }
                            }
                        }
                    },
                    "options": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "debugging",
                        "operationId": "debuggingUsingOPTIONS",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "contention",
                                "in": "path",
                                "description": "contention",
                                "required": true,
                                "type": "boolean"
                            },
                            {
                                "name": "enablement",
                                "in": "path",
                                "description": "enablement",
                                "required": true,
                                "type": "boolean"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ThreadResponse"
                                }
                            }
                        }
                    },
                    "patch": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "debugging",
                        "operationId": "debuggingUsingPATCH",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "contention",
                                "in": "path",
                                "description": "contention",
                                "required": true,
                                "type": "boolean"
                            },
                            {
                                "name": "enablement",
                                "in": "path",
                                "description": "enablement",
                                "required": true,
                                "type": "boolean"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ThreadResponse"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/site/threads/status": {
                    "get": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "status",
                        "operationId": "statusUsingGET_1",
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ThreadResponse"
                                }
                            }
                        }
                    },
                    "head": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "status",
                        "operationId": "statusUsingHEAD_1",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ThreadResponse"
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "status",
                        "operationId": "statusUsingPOST_1",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ThreadResponse"
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "status",
                        "operationId": "statusUsingPUT_1",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ThreadResponse"
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "status",
                        "operationId": "statusUsingDELETE_1",
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ThreadResponse"
                                }
                            }
                        }
                    },
                    "options": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "status",
                        "operationId": "statusUsingOPTIONS_1",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ThreadResponse"
                                }
                            }
                        }
                    },
                    "patch": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "status",
                        "operationId": "statusUsingPATCH_1",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ThreadResponse"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/site/threads/trace/{threadid}": {
                    "get": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "trace",
                        "operationId": "traceUsingGET",
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "threadid",
                                "in": "path",
                                "description": "threadid",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/StackTrace"
                                }
                            }
                        }
                    },
                    "head": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "trace",
                        "operationId": "traceUsingHEAD",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "threadid",
                                "in": "path",
                                "description": "threadid",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/StackTrace"
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "trace",
                        "operationId": "traceUsingPOST",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "threadid",
                                "in": "path",
                                "description": "threadid",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/StackTrace"
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "trace",
                        "operationId": "traceUsingPUT",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "threadid",
                                "in": "path",
                                "description": "threadid",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/StackTrace"
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "trace",
                        "operationId": "traceUsingDELETE",
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "threadid",
                                "in": "path",
                                "description": "threadid",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/StackTrace"
                                }
                            }
                        }
                    },
                    "options": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "trace",
                        "operationId": "traceUsingOPTIONS",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "threadid",
                                "in": "path",
                                "description": "threadid",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/StackTrace"
                                }
                            }
                        }
                    },
                    "patch": {
                        "tags": [
                            "threads"
                        ],
                        "summary": "trace",
                        "operationId": "traceUsingPATCH",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "threadid",
                                "in": "path",
                                "description": "threadid",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/StackTrace"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/sources": {
                    "get": {
                        "tags": [
                            "sources"
                        ],
                        "summary": "Get sources",
                        "description": "A source is created for each harvester.",
                        "operationId": "getSources",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "List of sources.",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Source"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/sources/{sourceIdentifier}": {
                    "put": {
                        "tags": [
                            "sources"
                        ],
                        "summary": "Update a source",
                        "operationId": "updateSource",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "sourceIdentifier",
                                "in": "path",
                                "description": "Source identifier",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "in": "body",
                                "name": "source",
                                "description": "source",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/Source"
                                }
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Source updated.",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "404": {
                                "description": "Source not found."
                            }
                        }
                    }
                },
                "/api/0.1/standards": {
                    "get": {
                        "tags": [
                            "standards"
                        ],
                        "summary": "Get standards",
                        "operationId": "getStandards",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "List of standards.",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/MetadataSchema"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/standards/batchconfiguration": {
                    "get": {
                        "tags": [
                            "standards"
                        ],
                        "summary": "Get batch editor configuration for standards",
                        "operationId": "getBatchConfigurations",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "query",
                                "description": "Schema identifiers",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Batch editor configuration.",
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "$ref": "#/definitions/BatchEditing"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/standards/{schema}/batchconfiguration": {
                    "get": {
                        "tags": [
                            "standards"
                        ],
                        "summary": "Get batch editor configuration for a standard",
                        "operationId": "getBatchConfiguration",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "path",
                                "description": "Schema identifier",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "$ref": "#/definitions/BatchEditing"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/standards/{schema}/codelists/{codelist}": {
                    "get": {
                        "tags": [
                            "standards"
                        ],
                        "summary": "Get codelist translations",
                        "operationId": "getSchemaTranslations",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "path",
                                "description": "Schema identifier",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "codelist",
                                "in": "path",
                                "description": "Codelist element name or alias",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "parent",
                                "in": "query",
                                "description": "parent",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "xpath",
                                "in": "query",
                                "description": "xpath",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "isoType",
                                "in": "query",
                                "description": "isoType",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/standards/{schema}/codelists/{codelist}/details": {
                    "get": {
                        "tags": [
                            "standards"
                        ],
                        "summary": "Get codelist details",
                        "operationId": "getSchemaCodelistsWithDetails",
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "path",
                                "description": "Schema identifier",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "codelist",
                                "in": "path",
                                "description": "Codelist element name or alias",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "parent",
                                "in": "query",
                                "description": "parent",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "xpath",
                                "in": "query",
                                "description": "xpath",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "isoType",
                                "in": "query",
                                "description": "isoType",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/Codelist"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/standards/{schema}/descriptors/{element}/details": {
                    "get": {
                        "tags": [
                            "standards"
                        ],
                        "summary": "Get descriptor details",
                        "operationId": "getElementDetails",
                        "produces": [
                            "application/xml",
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "path",
                                "description": "Schema identifier",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "element",
                                "in": "path",
                                "description": "Descriptor name",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "parent",
                                "in": "query",
                                "description": "parent",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "xpath",
                                "in": "query",
                                "description": "xpath",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "isoType",
                                "in": "query",
                                "description": "isoType",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/Element"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/status": {
                    "get": {
                        "tags": [
                            "status"
                        ],
                        "summary": "Get status",
                        "operationId": "getStatus",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/StatusValue"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/tags": {
                    "get": {
                        "tags": [
                            "tags"
                        ],
                        "summary": "Get tags",
                        "operationId": "getTags",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "List of tags.",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/MetadataCategory"
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "tags"
                        ],
                        "summary": "Create a tag",
                        "description": "If labels are not defined, a default label is created with the category name for all languages.",
                        "operationId": "putTag",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "in": "body",
                                "name": "category",
                                "description": "category",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/MetadataCategory"
                                }
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Tag created. Return the new tag identifier.",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            }
                        }
                    }
                },
                "/api/0.1/tags/{tagIdentifier}": {
                    "get": {
                        "tags": [
                            "tags"
                        ],
                        "summary": "Get a tag",
                        "operationId": "getTag",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "tagIdentifier",
                                "in": "path",
                                "description": "Tag identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Tag details.",
                                "schema": {
                                    "$ref": "#/definitions/MetadataCategory"
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "tags"
                        ],
                        "summary": "Update a tag",
                        "operationId": "updateTag",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "tagIdentifier",
                                "in": "path",
                                "description": "Tag identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "in": "body",
                                "name": "category",
                                "description": "category",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/MetadataCategory"
                                }
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Tag updated.",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "tags"
                        ],
                        "summary": "Remove a tag",
                        "operationId": "deleteTag",
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "tagIdentifier",
                                "in": "path",
                                "description": "Tag identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Tag removed.",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            }
                        }
                    }
                },
                "/api/0.1/tools/i18n/db": {
                    "get": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "List translations for database description table",
                        "operationId": "getTranslations",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "type",
                                "in": "query",
                                "description": "type",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/tools/mail/test": {
                    "get": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Test mail configuration",
                        "description": "Send an email to the catalog feedback email.",
                        "operationId": "testMailConfiguration",
                        "produces": [
                            "text/plain"
                        ],
                        "responses": {
                            "201": {
                                "description": "Created",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/tools/migration/steps/{stepName}": {
                    "put": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Call a migration step",
                        "operationId": "callStep",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "text/plain"
                        ],
                        "parameters": [
                            {
                                "name": "stepName",
                                "in": "path",
                                "description": "Class name to execute corresponding to a migration step. See DatabaseMigrationTask.",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Created",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/tools/ogc/sld": {
                    "get": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Get the list of SLD available",
                        "operationId": "getSLDUsingGET",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Generate a SLD with a new filter",
                        "description": "Get the currend SLD for the requested layers, add new filters in, save the SLD and return the new SLD URL.",
                        "operationId": "buildSLD",
                        "consumes": [
                            "application/x-www-form-urlencoded"
                        ],
                        "produces": [
                            "text/plain"
                        ],
                        "parameters": [
                            {
                                "name": "url",
                                "in": "formData",
                                "description": "The WMS server URL",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "layers",
                                "in": "formData",
                                "description": "The layers",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "filters",
                                "in": "formData",
                                "description": "The filters in JSON",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Created",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Remove all SLD files",
                        "description": "Clean all SLD generated previously",
                        "operationId": "deteleSLDUsingDELETE",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/api/0.1/tools/ogc/sld/{id}.{extension}": {
                    "get": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Download a SLD",
                        "operationId": "downloadSLD",
                        "produces": [
                            "application/xml"
                        ],
                        "parameters": [
                            {
                                "name": "id",
                                "in": "path",
                                "description": "The SLD identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/api/0.1/user/actions/register": {
                    "put": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Create user account",
                        "description": "User is created with a registered user profile. username field is ignored and the email is used as username. Password is sent by email. Catalog administrator is also notified.",
                        "operationId": "registerUser",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "text/plain"
                        ],
                        "parameters": [
                            {
                                "in": "body",
                                "name": "userRegisterDto",
                                "description": "User details",
                                "required": true,
                                "schema": {
                                    "$ref": "#/definitions/UserRegisterDto"
                                }
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Created",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/user/{username}": {
                    "patch": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Update user password",
                        "description": "Get a valid changekey by email first and then update your password.",
                        "operationId": "updatePassword",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "text/plain"
                        ],
                        "parameters": [
                            {
                                "name": "username",
                                "in": "path",
                                "description": "The user name",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "in": "body",
                                "name": "passwordAndChangeKey",
                                "description": "The new password and a valid change key",
                                "required": true,
                                "schema": {
                                    "$ref": "#/definitions/PasswordUpdateParameter"
                                }
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Created",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/user/{username}/actions/forgot-password": {
                    "get": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Send user password reminder by email",
                        "description": "An email is sent to the requested user with a link to reset his password. User MUST have an email to get the link. LDAP users will not be able to retrieve their password using this service.",
                        "operationId": "sendPasswordByEmail",
                        "produces": [
                            "text/plain"
                        ],
                        "parameters": [
                            {
                                "name": "username",
                                "in": "path",
                                "description": "The user name",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Created",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/userfeedback": {
                    "get": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Finds a list of user feedback records. ",
                        "description": " This list will include also the draft user feedback if the client is logged as reviewer.",
                        "operationId": "getUserComments",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "query",
                                "description": "Metadata record UUID.",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "size",
                                "in": "query",
                                "description": "Maximum number of feedback to return.",
                                "required": false,
                                "type": "integer",
                                "default": -1,
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/UserFeedbackDTO"
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Creates a user feedback",
                        "description": "Creates a user feedback in draft status if the user is not logged in.",
                        "operationId": "newUserFeedback",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "in": "body",
                                "name": "uf",
                                "description": "userFeedbackDto",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/UserFeedbackDTO"
                                }
                            }
                        ],
                        "responses": {
                            "201": {
                                "description": "Created",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/userfeedback/ratingcriteria": {
                    "get": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Get list of rating criteria",
                        "operationId": "getRatingCriteria",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/RatingCriteria"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/userfeedback/{uuid}": {
                    "get": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Finds a specific user feedback",
                        "operationId": "getUserFeedback",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "uuid",
                                "in": "path",
                                "description": "User feedback UUID.",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/UserFeedbackDTO"
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Removes a user feedback",
                        "description": "Removes a user feedback",
                        "operationId": "deleteUserFeedback",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "uuid",
                                "in": "path",
                                "description": "User feedback UUID.",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "User feedback removed.",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it."
                            }
                        }
                    }
                },
                "/api/0.1/userfeedback/{uuid}/publish": {
                    "get": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Publishes a feedback",
                        "description": "For reviewers",
                        "operationId": "publishFeedback",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "uuid",
                                "in": "path",
                                "description": "User feedback UUID.",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "User feedback published.",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it."
                            },
                            "404": {
                                "description": "Resource not found."
                            }
                        }
                    }
                },
                "/api/0.1/users": {
                    "get": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Get users",
                        "operationId": "getUsers",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/User"
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Creates a user",
                        "description": "Creates a catalog user.",
                        "operationId": "createUser",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "in": "body",
                                "name": "user",
                                "description": "userDto",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/UserDto"
                                }
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/users/groups": {
                    "get": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Retrieve all user groups",
                        "operationId": "retrieveAllUserGroups",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/UserGroupsResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/users/owners": {
                    "get": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Get owners",
                        "description": "Return users who actually owns one or more records.",
                        "operationId": "getOwners",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/OwnerResponse"
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Transfer privileges",
                        "operationId": "saveOwners",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "in": "body",
                                "name": "transfer",
                                "description": "transfer",
                                "required": true,
                                "schema": {
                                    "$ref": "#/definitions/TransferRequest"
                                }
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/users/{userIdentifier}": {
                    "get": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Get user",
                        "operationId": "getUser",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier.",
                                "required": false,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/User"
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Update a user",
                        "description": "Updates a catalog user.",
                        "operationId": "updateUser",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier.",
                                "required": false,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "in": "body",
                                "name": "user",
                                "description": "userDto",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/UserDto"
                                }
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Delete a user",
                        "description": "Deletes a catalog user by identifier.",
                        "operationId": "deleteUser",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier.",
                                "required": false,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/users/{userIdentifier}/actions/forget-password": {
                    "post": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Resets user password",
                        "description": "Resets the user password.",
                        "operationId": "resetUserPassword",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier.",
                                "required": false,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "name": "password",
                                "in": "query",
                                "description": "Password to change.",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "name": "password2",
                                "in": "query",
                                "description": "Password to change (repeat).",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "/api/0.1/users/{userIdentifier}/groups": {
                    "get": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Retrieve user groups",
                        "description": "Retrieve the user groups.",
                        "operationId": "retrieveUserGroups",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier.",
                                "required": false,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/UserGroup"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/userselections": {
                    "get": {
                        "tags": [
                            "userselections"
                        ],
                        "summary": "Get list of user selection sets",
                        "operationId": "getUserSelectionType",
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Selection"
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "userselections"
                        ],
                        "summary": "Add a user selection set",
                        "operationId": "createUserSelectionType",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "in": "body",
                                "name": "selection",
                                "description": "selection",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/Selection"
                                }
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            },
                            "201": {
                                "description": "Selection created.",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            },
                            "400": {
                                "description": "A selection with that id or name already exist."
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            }
                        }
                    }
                },
                "/api/0.1/userselections/{selectionIdentifier}": {
                    "put": {
                        "tags": [
                            "userselections"
                        ],
                        "summary": "Update a user selection set",
                        "operationId": "updateUserSelection",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "selectionIdentifier",
                                "in": "path",
                                "description": "Selection identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "in": "body",
                                "name": "selection",
                                "description": "selection",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/Selection"
                                }
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Selection updated.",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "404": {
                                "description": "Selection not found."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "userselections"
                        ],
                        "summary": "Remove a user selection set",
                        "operationId": "deleteUserSelection",
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "selectionIdentifier",
                                "in": "path",
                                "description": "Selection identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "204": {
                                "description": "Selection removed.",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "404": {
                                "description": "Selection not found."
                            }
                        }
                    }
                },
                "/api/0.1/userselections/{selectionIdentifier}/{userIdentifier}": {
                    "get": {
                        "tags": [
                            "userselections"
                        ],
                        "summary": "Get record in a user selection set",
                        "operationId": "getSelection_1",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "selectionIdentifier",
                                "in": "path",
                                "description": "Selection identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "userselections"
                        ],
                        "summary": "Add items to a user selection set",
                        "operationId": "addToUserSelection",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "selectionIdentifier",
                                "in": "path",
                                "description": "Selection identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "name": "uuid",
                                "in": "query",
                                "description": "One or more record UUIDs.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "201": {
                                "description": "Records added to selection set.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "404": {
                                "description": "Selection or user or at least one UUID not found."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "userselections"
                        ],
                        "summary": "Remove items to a user selection set",
                        "operationId": "deleteFromUserSelection",
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "name": "selectionIdentifier",
                                "in": "path",
                                "description": "Selection identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier",
                                "required": true,
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "name": "uuid",
                                "in": "query",
                                "description": "One or more record UUIDs. If null, remove all.",
                                "required": false,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "collectionFormat": "multi"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            },
                            "204": {
                                "description": "Items removed from a set.",
                                "schema": {
                                    "$ref": "#/definitions/ResponseEntity"
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "404": {
                                "description": "Selection or user not found."
                            }
                        }
                    }
                },
                "/api/0.1/workers/data/wfs/actions": {
                    "delete": {
                        "tags": [
                            "workers"
                        ],
                        "summary": "Delete a WFS feature type",
                        "operationId": "deleteWfsFeatureType",
                        "consumes": [
                            "*/*"
                        ],
                        "produces": [
                            "*/*"
                        ],
                        "parameters": [
                            {
                                "name": "serviceUrl",
                                "in": "query",
                                "description": "serviceUrl",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "typeName",
                                "in": "query",
                                "description": "typeName",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/0.1/workers/data/wfs/actions/start": {
                    "put": {
                        "tags": [
                            "workers"
                        ],
                        "summary": "Index a WFS feature type",
                        "operationId": "indexWfsFeatureType",
                        "consumes": [
                            "application/json"
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "parameters": [
                            {
                                "in": "body",
                                "name": "config",
                                "description": "config",
                                "required": true,
                                "schema": {
                                    "$ref": "#/definitions/WFSHarvesterParameter"
                                }
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "securityDefinitions": {
                "basicAuth": {
                    "type": "basic"
                }
            },
            "definitions": {
                "Address": {
                    "type": "object",
                    "properties": {
                        "address": {
                            "type": "string"
                        },
                        "city": {
                            "type": "string"
                        },
                        "country": {
                            "type": "string"
                        },
                        "id": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "state": {
                            "type": "string"
                        },
                        "zip": {
                            "type": "string"
                        }
                    },
                    "title": "Address"
                },
                "AnonymousMapserver": {
                    "type": "object",
                    "properties": {
                        "configurl": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "id": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "name": {
                            "type": "string"
                        },
                        "namespace": {
                            "type": "string"
                        },
                        "namespacePrefix": {
                            "type": "string"
                        },
                        "password": {
                            "type": "string"
                        },
                        "stylerurl": {
                            "type": "string"
                        },
                        "username": {
                            "type": "string"
                        },
                        "wcsurl": {
                            "type": "string"
                        },
                        "wfsurl": {
                            "type": "string"
                        },
                        "wmsurl": {
                            "type": "string"
                        }
                    },
                    "title": "AnonymousMapserver"
                },
                "Associated": {
                    "type": "object",
                    "properties": {
                        "item": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AssociatedSiblingMetadataItem"
                            }
                        }
                    },
                    "title": "Associated",
                    "xml": {
                        "name": "Associated",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "AssociatedSiblingMetadataItem": {
                    "type": "object",
                    "properties": {
                        "agg_isDescriptionOf": {
                            "type": "array",
                            "xml": {
                                "name": "agg_isDescriptionOf",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "type": "string"
                            }
                        },
                        "agg_isTemporalStatOf": {
                            "type": "array",
                            "xml": {
                                "name": "agg_isTemporalStatOf",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "type": "string"
                            }
                        },
                        "agg_largerWorkCitation": {
                            "type": "array",
                            "xml": {
                                "name": "agg_largerWorkCitation",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": {
                            "xml": {
                                "name": "description",
                                "attribute": false,
                                "wrapped": false
                            },
                            "$ref": "#/definitions/Description"
                        },
                        "id": {
                            "type": "string"
                        },
                        "mdType": {
                            "type": "array",
                            "xml": {
                                "name": "mdType",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "type": "string"
                            }
                        },
                        "title": {
                            "xml": {
                                "name": "title",
                                "attribute": false,
                                "wrapped": false
                            },
                            "$ref": "#/definitions/MultilingualValue"
                        },
                        "type": {
                            "type": "string"
                        },
                        "url": {
                            "$ref": "#/definitions/MultilingualValue"
                        }
                    },
                    "title": "AssociatedSiblingMetadataItem",
                    "xml": {
                        "name": "associatedSiblingMetadataItem",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "AttributeTable": {
                    "type": "object",
                    "properties": {
                        "element": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Element"
                            }
                        }
                    },
                    "title": "AttributeTable",
                    "xml": {
                        "name": "AttributeTable",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "BatchEditParameter": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "string",
                            "xml": {
                                "name": "value",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "xpath": {
                            "type": "string",
                            "xml": {
                                "name": "xpath",
                                "attribute": false,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "BatchEditParameter"
                },
                "BatchEditing": {
                    "type": "object",
                    "properties": {
                        "section": {
                            "type": "array",
                            "xml": {
                                "name": "section",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "$ref": "#/definitions/Section"
                            }
                        }
                    },
                    "title": "BatchEditing"
                },
                "Category": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "xml": {
                                "name": "id",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "label": {
                            "type": "string",
                            "xml": {
                                "name": "label",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "Category"
                },
                "Character": {
                    "type": "object",
                    "title": "Character"
                },
                "Children": {
                    "type": "object",
                    "properties": {
                        "item": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RelatedMetadataItem"
                            }
                        }
                    },
                    "title": "Children",
                    "xml": {
                        "name": "Children",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "Codelist": {
                    "type": "object",
                    "properties": {
                        "alias": {
                            "type": "string",
                            "xml": {
                                "name": "alias",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "entry": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Entry"
                            }
                        },
                        "name": {
                            "type": "string",
                            "xml": {
                                "name": "name",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "Codelist",
                    "xml": {
                        "name": "Codelist",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "Crs": {
                    "type": "object",
                    "properties": {
                        "authority": {
                            "type": "string"
                        },
                        "code": {
                            "type": "string"
                        },
                        "codeSpace": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "version": {
                            "type": "string"
                        }
                    },
                    "title": "Crs"
                },
                "Dataset": {
                    "type": "object",
                    "properties": {
                        "item": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RelatedMetadataItem"
                            }
                        }
                    },
                    "title": "Dataset",
                    "xml": {
                        "name": "Dataset",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "Description": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LocalizedString"
                            }
                        }
                    },
                    "title": "Description",
                    "xml": {
                        "name": "Description",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "Element": {
                    "type": "object",
                    "properties": {
                        "condition": {
                            "type": "string"
                        },
                        "context": {
                            "type": "string",
                            "xml": {
                                "name": "context",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "description": {
                            "type": "string"
                        },
                        "example": {
                            "type": "string"
                        },
                        "help": {
                            "type": "string"
                        },
                        "helper": {
                            "$ref": "#/definitions/Helper"
                        },
                        "id": {
                            "type": "number",
                            "xml": {
                                "name": "id",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "label": {
                            "type": "string",
                            "xml": {
                                "name": "label",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "name": {
                            "type": "string",
                            "xml": {
                                "name": "name",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "Element",
                    "xml": {
                        "name": "Element",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "Entry": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "string",
                            "xml": {
                                "name": "code",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "description": {
                            "type": "string",
                            "xml": {
                                "name": "description",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "hideInEditMode": {
                            "type": "string",
                            "xml": {
                                "name": "hideInEditMode",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "label": {
                            "type": "string",
                            "xml": {
                                "name": "label",
                                "attribute": false,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "Entry",
                    "xml": {
                        "name": "Entry",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "FCRelatedMetadataItem": {
                    "type": "object",
                    "properties": {
                        "description": {
                            "xml": {
                                "name": "description",
                                "attribute": false,
                                "wrapped": false
                            },
                            "$ref": "#/definitions/Description"
                        },
                        "featureType": {
                            "xml": {
                                "name": "featureType",
                                "attribute": false,
                                "wrapped": false
                            },
                            "$ref": "#/definitions/FeatureType"
                        },
                        "id": {
                            "type": "string"
                        },
                        "mdType": {
                            "type": "array",
                            "xml": {
                                "name": "mdType",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "type": "string"
                            }
                        },
                        "title": {
                            "xml": {
                                "name": "title",
                                "attribute": false,
                                "wrapped": false
                            },
                            "$ref": "#/definitions/MultilingualValue"
                        },
                        "type": {
                            "type": "string"
                        },
                        "url": {
                            "$ref": "#/definitions/MultilingualValue"
                        }
                    },
                    "title": "FCRelatedMetadataItem",
                    "xml": {
                        "name": "FCRelatedMetadataItem",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "Fcat": {
                    "type": "object",
                    "properties": {
                        "item": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FCRelatedMetadataItem"
                            }
                        }
                    },
                    "title": "Fcat",
                    "xml": {
                        "name": "Fcat",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "FeatureResponse": {
                    "type": "object",
                    "properties": {
                        "decodeMap": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "title": "FeatureResponse",
                    "xml": {
                        "name": "relatedResponse",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "FeatureType": {
                    "type": "object",
                    "properties": {
                        "attributeTable": {
                            "$ref": "#/definitions/AttributeTable"
                        }
                    },
                    "title": "FeatureType",
                    "xml": {
                        "name": "FeatureType",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "Field": {
                    "type": "object",
                    "properties": {
                        "codelist": {
                            "type": "string",
                            "xml": {
                                "name": "codelist",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "indexField": {
                            "type": "string",
                            "xml": {
                                "name": "indexField",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "insertMode": {
                            "type": "string",
                            "xml": {
                                "name": "insertMode",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "name": {
                            "type": "string",
                            "xml": {
                                "name": "name",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "removable": {
                            "type": "boolean",
                            "xml": {
                                "name": "removable",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "template": {
                            "type": "string"
                        },
                        "use": {
                            "type": "string",
                            "xml": {
                                "name": "use",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "xpath": {
                            "type": "string",
                            "xml": {
                                "name": "xpath",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "Field"
                },
                "File": {
                    "type": "object",
                    "properties": {
                        "absolute": {
                            "type": "boolean"
                        },
                        "absoluteFile": {
                            "$ref": "#/definitions/File"
                        },
                        "absolutePath": {
                            "type": "string"
                        },
                        "canonicalFile": {
                            "$ref": "#/definitions/File"
                        },
                        "canonicalPath": {
                            "type": "string"
                        },
                        "directory": {
                            "type": "boolean"
                        },
                        "file": {
                            "type": "boolean"
                        },
                        "freeSpace": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "hidden": {
                            "type": "boolean"
                        },
                        "name": {
                            "type": "string"
                        },
                        "parent": {
                            "type": "string"
                        },
                        "parentFile": {
                            "$ref": "#/definitions/File"
                        },
                        "path": {
                            "type": "string"
                        },
                        "totalSpace": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "usableSpace": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "title": "File"
                },
                "FileSystemResource": {
                    "type": "object",
                    "properties": {
                        "description": {
                            "type": "string"
                        },
                        "file": {
                            "$ref": "#/definitions/File"
                        },
                        "filename": {
                            "type": "string"
                        },
                        "inputStream": {
                            "$ref": "#/definitions/InputStream"
                        },
                        "open": {
                            "type": "boolean"
                        },
                        "outputStream": {
                            "$ref": "#/definitions/OutputStream"
                        },
                        "path": {
                            "type": "string"
                        },
                        "readable": {
                            "type": "boolean"
                        },
                        "uri": {
                            "$ref": "#/definitions/URI"
                        },
                        "url": {
                            "$ref": "#/definitions/URL"
                        },
                        "writable": {
                            "type": "boolean"
                        }
                    },
                    "title": "FileSystemResource"
                },
                "GrantedAuthority": {
                    "type": "object",
                    "properties": {
                        "authority": {
                            "type": "string"
                        }
                    },
                    "title": "GrantedAuthority"
                },
                "Group": {
                    "type": "object",
                    "properties": {
                        "allowedCategories": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MetadataCategory"
                            }
                        },
                        "defaultCategory": {
                            "$ref": "#/definitions/MetadataCategory"
                        },
                        "description": {
                            "type": "string"
                        },
                        "email": {
                            "type": "string"
                        },
                        "enableAllowedCategories": {
                            "type": "boolean"
                        },
                        "id": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "label": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "logo": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "referrer": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "reserved": {
                            "type": "boolean"
                        },
                        "website": {
                            "type": "string"
                        }
                    },
                    "title": "Group"
                },
                "GroupOperations": {
                    "type": "object",
                    "properties": {
                        "group": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "operations": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "title": "GroupOperations"
                },
                "GroupPrivilege": {
                    "type": "object",
                    "properties": {
                        "group": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "operations": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        },
                        "reserved": {
                            "type": "boolean"
                        },
                        "userGroup": {
                            "type": "boolean"
                        },
                        "userProfiles": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Administrator",
                                    "UserAdmin",
                                    "Reviewer",
                                    "Editor",
                                    "RegisteredUser",
                                    "Guest",
                                    "Monitor"
                                ]
                            }
                        }
                    },
                    "title": "GroupPrivilege"
                },
                "Hasfeaturecats": {
                    "type": "object",
                    "properties": {
                        "item": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RelatedMetadataItem"
                            }
                        }
                    },
                    "title": "Hasfeaturecats",
                    "xml": {
                        "name": "Hasfeaturecats",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "Hassource": {
                    "type": "object",
                    "properties": {
                        "item": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RelatedMetadataItem"
                            }
                        }
                    },
                    "title": "Hassource",
                    "xml": {
                        "name": "Hassource",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "Helper": {
                    "type": "object",
                    "properties": {
                        "displayIf": {
                            "type": "string",
                            "xml": {
                                "name": "displayIf",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "editorMode": {
                            "type": "string",
                            "xml": {
                                "name": "editorMode",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "option": {
                            "type": "array",
                            "xml": {
                                "name": "option",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "$ref": "#/definitions/Option"
                            }
                        },
                        "rel": {
                            "type": "string",
                            "xml": {
                                "name": "rel",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "relAtt": {
                            "type": "string",
                            "xml": {
                                "name": "relAtt",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "sort": {
                            "type": "boolean",
                            "xml": {
                                "name": "sort",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "Helper",
                    "xml": {
                        "name": "Helper",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "HttpEntity": {
                    "type": "object",
                    "properties": {
                        "body": {
                            "type": "object"
                        }
                    },
                    "title": "HttpEntity"
                },
                "IProcessingReport": {
                    "type": "object",
                    "properties": {
                        "ellapsedTimeInSeconds": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "endIsoDateTime": {
                            "type": "string"
                        },
                        "running": {
                            "type": "boolean"
                        },
                        "startIsoDateTime": {
                            "type": "string"
                        },
                        "totalTimeInSeconds": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "type": {
                            "type": "string"
                        },
                        "uuid": {
                            "type": "string"
                        }
                    },
                    "title": "IProcessingReport"
                },
                "InfoReport": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string"
                        },
                        "message": {
                            "type": "string"
                        }
                    },
                    "title": "InfoReport"
                },
                "InputStream": {
                    "type": "object",
                    "title": "InputStream"
                },
                "IsoLanguage": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "string"
                        },
                        "id": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "label": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "shortCode": {
                            "type": "string"
                        }
                    },
                    "title": "IsoLanguage"
                },
                "KeywordBean": {
                    "type": "object",
                    "properties": {
                        "coordEast": {
                            "type": "string"
                        },
                        "coordNorth": {
                            "type": "string"
                        },
                        "coordSouth": {
                            "type": "string"
                        },
                        "coordWest": {
                            "type": "string"
                        },
                        "definition": {
                            "type": "string"
                        },
                        "definitions": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "thesaurusKey": {
                            "type": "string"
                        },
                        "uri": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        },
                        "values": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "title": "KeywordBean"
                },
                "Language": {
                    "type": "object",
                    "properties": {
                        "defaultLanguage": {
                            "type": "boolean"
                        },
                        "id": {
                            "type": "string"
                        },
                        "inspire": {
                            "type": "boolean"
                        },
                        "name": {
                            "type": "string"
                        }
                    },
                    "title": "Language"
                },
                "ListRegionsResponse": {
                    "type": "object",
                    "title": "ListRegionsResponse"
                },
                "LocalizedString": {
                    "type": "object",
                    "properties": {
                        "lang": {
                            "type": "string",
                            "xml": {
                                "name": "lang",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "title": "LocalizedString",
                    "xml": {
                        "name": "localizedString",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "LogFileResponse": {
                    "type": "object",
                    "properties": {
                        "file": {
                            "type": "string",
                            "xml": {
                                "name": "file",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "name": {
                            "type": "string",
                            "xml": {
                                "name": "name",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "LogFileResponse"
                },
                "MapServer": {
                    "type": "object",
                    "properties": {
                        "configurl": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "id": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "name": {
                            "type": "string"
                        },
                        "namespace": {
                            "type": "string"
                        },
                        "namespacePrefix": {
                            "type": "string"
                        },
                        "password": {
                            "type": "string"
                        },
                        "pushStyleInWorkspace": {
                            "type": "boolean"
                        },
                        "pushStyleInWorkspace_JpaWorkaround": {
                            "type": "string"
                        },
                        "stylerurl": {
                            "type": "string"
                        },
                        "username": {
                            "type": "string"
                        },
                        "wcsurl": {
                            "type": "string"
                        },
                        "wfsurl": {
                            "type": "string"
                        },
                        "wmsurl": {
                            "type": "string"
                        }
                    },
                    "title": "MapServer"
                },
                "MeResponse": {
                    "type": "object",
                    "properties": {
                        "email": {
                            "type": "string"
                        },
                        "hash": {
                            "type": "string"
                        },
                        "id": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "organisation": {
                            "type": "string"
                        },
                        "profile": {
                            "type": "string"
                        },
                        "surname": {
                            "type": "string"
                        },
                        "username": {
                            "type": "string"
                        }
                    },
                    "title": "MeResponse"
                },
                "MetadataCategory": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "label": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "name": {
                            "type": "string"
                        }
                    },
                    "title": "MetadataCategory"
                },
                "MetadataIdentifierTemplate": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "name": {
                            "type": "string"
                        },
                        "systemDefault": {
                            "type": "boolean"
                        },
                        "systemProvided": {
                            "type": "boolean"
                        },
                        "systemProvided_JPAWorkaround": {
                            "type": "string"
                        },
                        "template": {
                            "type": "string"
                        }
                    },
                    "title": "MetadataIdentifierTemplate"
                },
                "MetadataProcessingReport": {
                    "type": "object",
                    "properties": {
                        "ellapsedTimeInSeconds": {
                            "type": "integer",
                            "format": "int64",
                            "xml": {
                                "name": "ellapsedTimeInSeconds",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "endIsoDateTime": {
                            "type": "string",
                            "xml": {
                                "name": "endIsoDateTime",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "errors": {
                            "type": "array",
                            "xml": {
                                "name": "errors",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "$ref": "#/definitions/Report"
                            }
                        },
                        "infos": {
                            "type": "array",
                            "xml": {
                                "name": "infos",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "$ref": "#/definitions/InfoReport"
                            }
                        },
                        "metadata": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "metadataErrors": {
                            "type": "object",
                            "xml": {
                                "name": "errors",
                                "attribute": false,
                                "wrapped": false
                            },
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/Report"
                                }
                            }
                        },
                        "metadataInfos": {
                            "type": "object",
                            "xml": {
                                "name": "infos",
                                "attribute": false,
                                "wrapped": false
                            },
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/InfoReport"
                                }
                            }
                        },
                        "numberOfNullRecords": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecordNotFound": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecords": {
                            "type": "integer",
                            "format": "int32",
                            "xml": {
                                "name": "numberOfRecords",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "numberOfRecordsNotEditable": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecordsProcessed": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecordsWithErrors": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "running": {
                            "type": "boolean"
                        },
                        "startIsoDateTime": {
                            "type": "string",
                            "xml": {
                                "name": "startIsoDateTime",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "totalTimeInSeconds": {
                            "type": "integer",
                            "format": "int64",
                            "xml": {
                                "name": "totalTimeInSeconds",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "type": {
                            "type": "string",
                            "xml": {
                                "name": "type",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "uuid": {
                            "type": "string",
                            "xml": {
                                "name": "uuid",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "MetadataProcessingReport",
                    "xml": {
                        "name": "MetadataProcessingReport",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "MetadataReplacementProcessingReport": {
                    "type": "object",
                    "properties": {
                        "ellapsedTimeInSeconds": {
                            "type": "integer",
                            "format": "int64",
                            "xml": {
                                "name": "ellapsedTimeInSeconds",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "endIsoDateTime": {
                            "type": "string",
                            "xml": {
                                "name": "endIsoDateTime",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "errors": {
                            "type": "array",
                            "xml": {
                                "name": "errors",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "$ref": "#/definitions/Report"
                            }
                        },
                        "infos": {
                            "type": "array",
                            "xml": {
                                "name": "infos",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "$ref": "#/definitions/InfoReport"
                            }
                        },
                        "metadata": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "metadataChanges": {
                            "type": "object",
                            "xml": {
                                "name": "changes",
                                "attribute": false,
                                "wrapped": false
                            },
                            "additionalProperties": {
                                "$ref": "#/definitions/ReplaceReport"
                            }
                        },
                        "metadataErrors": {
                            "type": "object",
                            "xml": {
                                "name": "errors",
                                "attribute": false,
                                "wrapped": false
                            },
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/Report"
                                }
                            }
                        },
                        "metadataInfos": {
                            "type": "object",
                            "xml": {
                                "name": "infos",
                                "attribute": false,
                                "wrapped": false
                            },
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/InfoReport"
                                }
                            }
                        },
                        "noProcessFoundCount": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfNullRecords": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecordNotFound": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecords": {
                            "type": "integer",
                            "format": "int32",
                            "xml": {
                                "name": "numberOfRecords",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "numberOfRecordsChanged": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecordsNotChanged": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecordsNotEditable": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecordsProcessed": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecordsWithErrors": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "processId": {
                            "type": "string",
                            "xml": {
                                "name": "process",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "running": {
                            "type": "boolean"
                        },
                        "startIsoDateTime": {
                            "type": "string",
                            "xml": {
                                "name": "startIsoDateTime",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "totalTimeInSeconds": {
                            "type": "integer",
                            "format": "int64",
                            "xml": {
                                "name": "totalTimeInSeconds",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "type": {
                            "type": "string",
                            "xml": {
                                "name": "type",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "uuid": {
                            "type": "string",
                            "xml": {
                                "name": "uuid",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "MetadataReplacementProcessingReport",
                    "xml": {
                        "name": "MetadataReplacementProcessingReport",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "MetadataResource": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string"
                        },
                        "size": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": {
                            "type": "string"
                        },
                        "url": {
                            "type": "string"
                        }
                    },
                    "title": "MetadataResource"
                },
                "MetadataSchema": {
                    "type": "object",
                    "properties": {
                        "descriptions": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "name": {
                            "type": "string"
                        },
                        "namespaces": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "readwriteUUID": {
                            "type": "boolean"
                        },
                        "schematronRules": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "standardUrl": {
                            "type": "string"
                        },
                        "targetNamespace": {
                            "type": "string"
                        },
                        "titles": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "title": "MetadataSchema"
                },
                "MultilingualValue": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LocalizedString"
                            }
                        }
                    },
                    "title": "MultilingualValue",
                    "xml": {
                        "name": "MultilingualValue",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "Online": {
                    "type": "object",
                    "properties": {
                        "item": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RelatedLinkItem"
                            }
                        }
                    },
                    "title": "Online",
                    "xml": {
                        "name": "Online",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "Operation": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "label": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "name": {
                            "type": "string"
                        },
                        "reserved": {
                            "type": "boolean"
                        },
                        "reservedOperation": {
                            "type": "string",
                            "enum": [
                                "view",
                                "download",
                                "editing",
                                "notify",
                                "dynamic",
                                "featured"
                            ]
                        }
                    },
                    "title": "Operation"
                },
                "Option": {
                    "type": "object",
                    "properties": {
                        "description": {
                            "type": "string",
                            "xml": {
                                "name": "title",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "isDefault": {
                            "type": "boolean",
                            "xml": {
                                "name": "default",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "label": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string",
                            "xml": {
                                "name": "value",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "Option",
                    "xml": {
                        "name": "Option",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "OutputStream": {
                    "type": "object",
                    "title": "OutputStream"
                },
                "OwnerResponse": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "name": {
                            "type": "string"
                        },
                        "records": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "title": "OwnerResponse"
                },
                "Parent": {
                    "type": "object",
                    "properties": {
                        "item": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RelatedMetadataItem"
                            }
                        }
                    },
                    "title": "Parent",
                    "xml": {
                        "name": "Parent",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "PasswordUpdateParameter": {
                    "type": "object",
                    "properties": {
                        "changeKey": {
                            "type": "string"
                        },
                        "password": {
                            "type": "string"
                        }
                    },
                    "title": "PasswordUpdateParameter"
                },
                "Pattern": {
                    "type": "object",
                    "properties": {
                        "rules": {
                            "xml": {
                                "name": "rules",
                                "attribute": false,
                                "wrapped": false
                            },
                            "$ref": "#/definitions/Rules"
                        },
                        "title": {
                            "type": "string",
                            "xml": {
                                "name": "title",
                                "attribute": false,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "Pattern",
                    "xml": {
                        "name": "Pattern",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "Patterns": {
                    "type": "object",
                    "properties": {
                        "pattern": {
                            "type": "array",
                            "xml": {
                                "name": "pattern",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "$ref": "#/definitions/Pattern"
                            }
                        }
                    },
                    "title": "Patterns",
                    "xml": {
                        "name": "Patterns",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "ProcessingReport": {
                    "type": "object",
                    "properties": {
                        "ellapsedTimeInSeconds": {
                            "type": "integer",
                            "format": "int64",
                            "xml": {
                                "name": "ellapsedTimeInSeconds",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "endIsoDateTime": {
                            "type": "string",
                            "xml": {
                                "name": "endIsoDateTime",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "errors": {
                            "type": "array",
                            "xml": {
                                "name": "errors",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "$ref": "#/definitions/Report"
                            }
                        },
                        "infos": {
                            "type": "array",
                            "xml": {
                                "name": "infos",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "$ref": "#/definitions/InfoReport"
                            }
                        },
                        "running": {
                            "type": "boolean"
                        },
                        "startIsoDateTime": {
                            "type": "string",
                            "xml": {
                                "name": "startIsoDateTime",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "totalTimeInSeconds": {
                            "type": "integer",
                            "format": "int64",
                            "xml": {
                                "name": "totalTimeInSeconds",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "type": {
                            "type": "string",
                            "xml": {
                                "name": "type",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "uuid": {
                            "type": "string",
                            "xml": {
                                "name": "uuid",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "ProcessingReport",
                    "xml": {
                        "name": "ProcessingReport",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "RatingAverage": {
                    "type": "object",
                    "properties": {
                        "lastComment": {
                            "type": "string"
                        },
                        "ratingAverages": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "ratingCount": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "userfeedbackCount": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "title": "RatingAverage"
                },
                "RatingCriteria": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "internal": {
                            "type": "boolean"
                        },
                        "label": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "name": {
                            "type": "string"
                        }
                    },
                    "title": "RatingCriteria"
                },
                "Related": {
                    "type": "object",
                    "properties": {
                        "item": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RelatedMetadataItem"
                            }
                        }
                    },
                    "title": "Related",
                    "xml": {
                        "name": "Related",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "RelatedLinkItem": {
                    "type": "object",
                    "properties": {
                        "applicationProfile": {
                            "type": "string"
                        },
                        "description": {
                            "xml": {
                                "name": "description",
                                "attribute": false,
                                "wrapped": false
                            },
                            "$ref": "#/definitions/Description"
                        },
                        "function": {
                            "type": "string"
                        },
                        "id": {
                            "type": "string"
                        },
                        "protocol": {
                            "type": "string"
                        },
                        "title": {
                            "xml": {
                                "name": "title",
                                "attribute": false,
                                "wrapped": false
                            },
                            "$ref": "#/definitions/MultilingualValue"
                        },
                        "type": {
                            "type": "string"
                        },
                        "url": {
                            "$ref": "#/definitions/MultilingualValue"
                        }
                    },
                    "title": "RelatedLinkItem",
                    "xml": {
                        "name": "relatedLinkItem",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "RelatedMetadataItem": {
                    "type": "object",
                    "properties": {
                        "description": {
                            "xml": {
                                "name": "description",
                                "attribute": false,
                                "wrapped": false
                            },
                            "$ref": "#/definitions/Description"
                        },
                        "id": {
                            "type": "string"
                        },
                        "mdType": {
                            "type": "array",
                            "xml": {
                                "name": "mdType",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "type": "string"
                            }
                        },
                        "title": {
                            "xml": {
                                "name": "title",
                                "attribute": false,
                                "wrapped": false
                            },
                            "$ref": "#/definitions/MultilingualValue"
                        },
                        "type": {
                            "type": "string"
                        },
                        "url": {
                            "$ref": "#/definitions/MultilingualValue"
                        }
                    },
                    "title": "RelatedMetadataItem",
                    "xml": {
                        "name": "relatedMetadataItem",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "RelatedResponse": {
                    "type": "object",
                    "properties": {
                        "associated": {
                            "$ref": "#/definitions/Associated"
                        },
                        "children": {
                            "$ref": "#/definitions/Children"
                        },
                        "datasets": {
                            "$ref": "#/definitions/Dataset"
                        },
                        "fcats": {
                            "$ref": "#/definitions/Fcat"
                        },
                        "hasfeaturecats": {
                            "$ref": "#/definitions/Hasfeaturecats"
                        },
                        "hassources": {
                            "$ref": "#/definitions/Hassource"
                        },
                        "onlines": {
                            "$ref": "#/definitions/Online"
                        },
                        "parent": {
                            "$ref": "#/definitions/Parent"
                        },
                        "related": {
                            "$ref": "#/definitions/Related"
                        },
                        "services": {
                            "$ref": "#/definitions/Service"
                        },
                        "siblings": {
                            "$ref": "#/definitions/Siblings"
                        },
                        "sources": {
                            "$ref": "#/definitions/Source"
                        },
                        "thumbnails": {
                            "$ref": "#/definitions/Thumbnail"
                        }
                    },
                    "title": "RelatedResponse",
                    "xml": {
                        "name": "relatedResponse",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "RelatedSiblingMetadataItem": {
                    "type": "object",
                    "properties": {
                        "associationType": {
                            "type": "string",
                            "xml": {
                                "name": "associationType",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "description": {
                            "xml": {
                                "name": "description",
                                "attribute": false,
                                "wrapped": false
                            },
                            "$ref": "#/definitions/Description"
                        },
                        "id": {
                            "type": "string"
                        },
                        "initiativeType": {
                            "type": "string",
                            "xml": {
                                "name": "initiativeType",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "mdType": {
                            "type": "array",
                            "xml": {
                                "name": "mdType",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "type": "string"
                            }
                        },
                        "title": {
                            "xml": {
                                "name": "title",
                                "attribute": false,
                                "wrapped": false
                            },
                            "$ref": "#/definitions/MultilingualValue"
                        },
                        "type": {
                            "type": "string"
                        },
                        "url": {
                            "$ref": "#/definitions/MultilingualValue"
                        }
                    },
                    "title": "RelatedSiblingMetadataItem",
                    "xml": {
                        "name": "relatedSiblingMetadataItem",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "RelatedThumbnailItem": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string"
                        },
                        "title": {
                            "xml": {
                                "name": "title",
                                "attribute": false,
                                "wrapped": false
                            },
                            "$ref": "#/definitions/MultilingualValue"
                        },
                        "type": {
                            "type": "string"
                        },
                        "url": {
                            "$ref": "#/definitions/MultilingualValue"
                        }
                    },
                    "title": "RelatedThumbnailItem",
                    "xml": {
                        "name": "relatedThumbnailItem",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "ReplaceEntryChange": {
                    "type": "object",
                    "properties": {
                        "changedVal": {
                            "type": "string"
                        },
                        "fieldId": {
                            "type": "string"
                        },
                        "originalVal": {
                            "type": "string"
                        }
                    },
                    "title": "ReplaceEntryChange"
                },
                "ReplaceReport": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string"
                        },
                        "elementChanges": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReplaceEntryChange"
                            }
                        },
                        "message": {
                            "type": "string"
                        }
                    },
                    "title": "ReplaceReport"
                },
                "Report": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string"
                        },
                        "message": {
                            "type": "string"
                        }
                    },
                    "title": "Report"
                },
                "Reports": {
                    "type": "object",
                    "properties": {
                        "report": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Report"
                            }
                        }
                    },
                    "title": "Reports",
                    "xml": {
                        "name": "Reports",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "ResponseEntity": {
                    "type": "object",
                    "properties": {
                        "body": {
                            "type": "object"
                        },
                        "statusCode": {
                            "type": "string",
                            "enum": [
                                "100",
                                "101",
                                "102",
                                "103",
                                "200",
                                "201",
                                "202",
                                "203",
                                "204",
                                "205",
                                "206",
                                "207",
                                "208",
                                "226",
                                "300",
                                "301",
                                "302",
                                "303",
                                "304",
                                "305",
                                "307",
                                "308",
                                "400",
                                "401",
                                "402",
                                "403",
                                "404",
                                "405",
                                "406",
                                "407",
                                "408",
                                "409",
                                "410",
                                "411",
                                "412",
                                "413",
                                "414",
                                "415",
                                "416",
                                "417",
                                "418",
                                "419",
                                "420",
                                "421",
                                "422",
                                "423",
                                "424",
                                "426",
                                "428",
                                "429",
                                "431",
                                "500",
                                "501",
                                "502",
                                "503",
                                "504",
                                "505",
                                "506",
                                "507",
                                "508",
                                "509",
                                "510",
                                "511"
                            ]
                        }
                    },
                    "title": "ResponseEntity"
                },
                "Rule": {
                    "type": "object",
                    "properties": {
                        "details": {
                            "type": "string",
                            "xml": {
                                "name": "details",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "group": {
                            "type": "string",
                            "xml": {
                                "name": "group",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "id": {
                            "type": "string",
                            "xml": {
                                "name": "id",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "msg": {
                            "type": "string"
                        },
                        "ref": {
                            "type": "string",
                            "xml": {
                                "name": "ref",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "test": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string",
                            "xml": {
                                "name": "type",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "Rule",
                    "xml": {
                        "name": "Rule",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "Rules": {
                    "type": "object",
                    "properties": {
                        "rule": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Rule"
                            }
                        }
                    },
                    "title": "Rules",
                    "xml": {
                        "name": "Rules",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "SavedQuery": {
                    "type": "object",
                    "properties": {
                        "cleanValues": {
                            "type": "string"
                        },
                        "id": {
                            "type": "string"
                        },
                        "label": {
                            "type": "string"
                        },
                        "parameters": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "xpath": {
                            "type": "string"
                        }
                    },
                    "title": "SavedQuery"
                },
                "Section": {
                    "type": "object",
                    "properties": {
                        "field": {
                            "type": "array",
                            "xml": {
                                "name": "field",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "$ref": "#/definitions/Field"
                            }
                        },
                        "name": {
                            "type": "string",
                            "xml": {
                                "name": "name",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "Section"
                },
                "Selection": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "label": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "name": {
                            "type": "string"
                        },
                        "watchable": {
                            "type": "boolean"
                        }
                    },
                    "title": "Selection"
                },
                "Service": {
                    "type": "object",
                    "properties": {
                        "className": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "explicitQuery": {
                            "type": "string"
                        },
                        "id": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "name": {
                            "type": "string"
                        },
                        "parameters": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ServiceParam"
                            }
                        }
                    },
                    "title": "Service"
                },
                "ServiceParam": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "name": {
                            "type": "string"
                        },
                        "occur": {
                            "$ref": "#/definitions/Character"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "title": "ServiceParam"
                },
                "Setting": {
                    "type": "object",
                    "properties": {
                        "dataType": {
                            "type": "string",
                            "enum": [
                                "STRING",
                                "INT",
                                "BOOLEAN",
                                "JSON"
                            ]
                        },
                        "internal": {
                            "type": "boolean"
                        },
                        "name": {
                            "type": "string"
                        },
                        "position": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "title": "Setting"
                },
                "SettingsListResponse": {
                    "type": "object",
                    "properties": {
                        "settings": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Setting"
                            }
                        }
                    },
                    "title": "SettingsListResponse"
                },
                "SharingParameter": {
                    "type": "object",
                    "properties": {
                        "clear": {
                            "type": "boolean"
                        },
                        "privileges": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GroupOperations"
                            }
                        }
                    },
                    "title": "SharingParameter"
                },
                "SharingResponse": {
                    "type": "object",
                    "properties": {
                        "groupOwner": {
                            "type": "string"
                        },
                        "owner": {
                            "type": "string"
                        },
                        "privileges": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GroupPrivilege"
                            }
                        }
                    },
                    "title": "SharingResponse"
                },
                "Siblings": {
                    "type": "object",
                    "properties": {
                        "item": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RelatedSiblingMetadataItem"
                            }
                        }
                    },
                    "title": "Siblings",
                    "xml": {
                        "name": "Siblings",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "SimpleMetadataProcessingReport": {
                    "type": "object",
                    "properties": {
                        "ellapsedTimeInSeconds": {
                            "type": "integer",
                            "format": "int64",
                            "xml": {
                                "name": "ellapsedTimeInSeconds",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "endIsoDateTime": {
                            "type": "string",
                            "xml": {
                                "name": "endIsoDateTime",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "errors": {
                            "type": "array",
                            "xml": {
                                "name": "errors",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "$ref": "#/definitions/Report"
                            }
                        },
                        "infos": {
                            "type": "array",
                            "xml": {
                                "name": "infos",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "$ref": "#/definitions/InfoReport"
                            }
                        },
                        "metadata": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "metadataErrors": {
                            "type": "object",
                            "xml": {
                                "name": "errors",
                                "attribute": false,
                                "wrapped": false
                            },
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/Report"
                                }
                            }
                        },
                        "metadataInfos": {
                            "type": "object",
                            "xml": {
                                "name": "infos",
                                "attribute": false,
                                "wrapped": false
                            },
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/InfoReport"
                                }
                            }
                        },
                        "numberOfNullRecords": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecordNotFound": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecords": {
                            "type": "integer",
                            "format": "int32",
                            "xml": {
                                "name": "numberOfRecords",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "numberOfRecordsNotEditable": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecordsProcessed": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecordsWithErrors": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "running": {
                            "type": "boolean"
                        },
                        "startIsoDateTime": {
                            "type": "string",
                            "xml": {
                                "name": "startIsoDateTime",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "totalTimeInSeconds": {
                            "type": "integer",
                            "format": "int64",
                            "xml": {
                                "name": "totalTimeInSeconds",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "type": {
                            "type": "string",
                            "xml": {
                                "name": "type",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "uuid": {
                            "type": "string",
                            "xml": {
                                "name": "uuid",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "SimpleMetadataProcessingReport",
                    "xml": {
                        "name": "SimpleMetadataProcessingReport",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "SiteInformation": {
                    "type": "object",
                    "properties": {
                        "catalogue": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "database": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "index": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "main": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "version": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "title": "SiteInformation"
                },
                "Source": {
                    "type": "object",
                    "properties": {
                        "label": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "name": {
                            "type": "string"
                        },
                        "uuid": {
                            "type": "string"
                        }
                    },
                    "title": "Source"
                },
                "StackTrace": {
                    "type": "object",
                    "properties": {
                        "stackTrace": {
                            "type": "string",
                            "xml": {
                                "name": "stackTrace",
                                "attribute": false,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "StackTrace"
                },
                "StatusValue": {
                    "type": "object",
                    "properties": {
                        "displayOrder": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "id": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "label": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "name": {
                            "type": "string"
                        },
                        "reserved": {
                            "type": "boolean"
                        }
                    },
                    "title": "StatusValue"
                },
                "SuggestionType": {
                    "type": "object",
                    "properties": {
                        "category": {
                            "type": "string",
                            "xml": {
                                "name": "category",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "id": {
                            "type": "string",
                            "xml": {
                                "name": "id",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "name": {
                            "type": "string",
                            "xml": {
                                "name": "name",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "operational": {
                            "type": "string",
                            "xml": {
                                "name": "operational",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "params": {
                            "type": "string"
                        },
                        "process": {
                            "type": "string",
                            "xml": {
                                "name": "process",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "target": {
                            "type": "string",
                            "xml": {
                                "name": "target",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "SuggestionType",
                    "xml": {
                        "name": "suggestionType",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "SystemInfo": {
                    "type": "object",
                    "properties": {
                        "buildDate": {
                            "type": "string"
                        },
                        "buildJavaVendor": {
                            "type": "string"
                        },
                        "buildJavaVersion": {
                            "type": "string"
                        },
                        "buildOsInfo": {
                            "type": "string"
                        },
                        "devMode": {
                            "type": "boolean"
                        },
                        "scmRevision": {
                            "type": "string"
                        },
                        "scmUrl": {
                            "type": "string"
                        },
                        "stagingProfile": {
                            "type": "string"
                        },
                        "subVersion": {
                            "type": "string"
                        },
                        "version": {
                            "type": "string"
                        }
                    },
                    "title": "SystemInfo"
                },
                "ThreadDetail": {
                    "type": "object",
                    "properties": {
                        "blockedTime": {
                            "type": "integer",
                            "format": "int64",
                            "xml": {
                                "name": "blockedTime",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "cpuTime": {
                            "type": "integer",
                            "format": "int64",
                            "xml": {
                                "name": "cpuTime",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "deadlocked": {
                            "type": "boolean",
                            "xml": {
                                "name": "deadlocked",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "id": {
                            "type": "integer",
                            "format": "int64",
                            "xml": {
                                "name": "id",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "name": {
                            "type": "string",
                            "xml": {
                                "name": "name",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "state": {
                            "type": "string",
                            "xml": {
                                "name": "state",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "userTime": {
                            "type": "integer",
                            "format": "int64",
                            "xml": {
                                "name": "userTime",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "waitTime": {
                            "type": "integer",
                            "format": "int64",
                            "xml": {
                                "name": "waitTime",
                                "attribute": false,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "ThreadDetail"
                },
                "ThreadResponse": {
                    "type": "object",
                    "properties": {
                        "threadContentionMonitoringEnabled": {
                            "type": "boolean"
                        },
                        "threadContentionMonitoringSupported": {
                            "type": "boolean"
                        },
                        "threadCpuTimeEnabled": {
                            "type": "boolean"
                        },
                        "threadCpuTimeSupported": {
                            "type": "boolean"
                        },
                        "threads": {
                            "type": "array",
                            "xml": {
                                "name": "thread",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "$ref": "#/definitions/ThreadDetail"
                            }
                        }
                    },
                    "title": "ThreadResponse"
                },
                "Thumbnail": {
                    "type": "object",
                    "properties": {
                        "item": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RelatedThumbnailItem"
                            }
                        }
                    },
                    "title": "Thumbnail",
                    "xml": {
                        "name": "Thumbnail",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "TransferRequest": {
                    "type": "object",
                    "properties": {
                        "sourceGroup": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "sourceUser": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "targetGroup": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "targetUser": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "title": "TransferRequest"
                },
                "URI": {
                    "type": "object",
                    "properties": {
                        "absolute": {
                            "type": "boolean"
                        },
                        "authority": {
                            "type": "string"
                        },
                        "fragment": {
                            "type": "string"
                        },
                        "host": {
                            "type": "string"
                        },
                        "opaque": {
                            "type": "boolean"
                        },
                        "path": {
                            "type": "string"
                        },
                        "port": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "query": {
                            "type": "string"
                        },
                        "rawAuthority": {
                            "type": "string"
                        },
                        "rawFragment": {
                            "type": "string"
                        },
                        "rawPath": {
                            "type": "string"
                        },
                        "rawQuery": {
                            "type": "string"
                        },
                        "rawSchemeSpecificPart": {
                            "type": "string"
                        },
                        "rawUserInfo": {
                            "type": "string"
                        },
                        "scheme": {
                            "type": "string"
                        },
                        "schemeSpecificPart": {
                            "type": "string"
                        },
                        "userInfo": {
                            "type": "string"
                        }
                    },
                    "title": "URI"
                },
                "URL": {
                    "type": "object",
                    "properties": {
                        "authority": {
                            "type": "string"
                        },
                        "content": {
                            "type": "object"
                        },
                        "defaultPort": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "file": {
                            "type": "string"
                        },
                        "host": {
                            "type": "string"
                        },
                        "path": {
                            "type": "string"
                        },
                        "port": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "protocol": {
                            "type": "string"
                        },
                        "query": {
                            "type": "string"
                        },
                        "ref": {
                            "type": "string"
                        },
                        "userInfo": {
                            "type": "string"
                        }
                    },
                    "title": "URL"
                },
                "User": {
                    "type": "object",
                    "properties": {
                        "accountNonExpired": {
                            "type": "boolean"
                        },
                        "accountNonLocked": {
                            "type": "boolean"
                        },
                        "addresses": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Address"
                            }
                        },
                        "authorities": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GrantedAuthority"
                            }
                        },
                        "credentialsNonExpired": {
                            "type": "boolean"
                        },
                        "email": {
                            "type": "string"
                        },
                        "emailAddresses": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "enabled": {
                            "type": "boolean"
                        },
                        "id": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "kind": {
                            "type": "string"
                        },
                        "lastLoginDate": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "organisation": {
                            "type": "string"
                        },
                        "primaryAddress": {
                            "$ref": "#/definitions/Address"
                        },
                        "profile": {
                            "type": "string",
                            "enum": [
                                "Administrator",
                                "UserAdmin",
                                "Reviewer",
                                "Editor",
                                "RegisteredUser",
                                "Guest",
                                "Monitor"
                            ]
                        },
                        "security": {
                            "type": "object"
                        },
                        "surname": {
                            "type": "string"
                        },
                        "username": {
                            "type": "string"
                        }
                    },
                    "title": "User"
                },
                "UserDto": {
                    "type": "object",
                    "properties": {
                        "addresses": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Address"
                            }
                        },
                        "email": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "emailAddresses": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "enabled": {
                            "type": "boolean"
                        },
                        "groupsEditor": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "groupsRegisteredUser": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "groupsReviewer": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "groupsUserAdmin": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "id": {
                            "type": "string"
                        },
                        "kind": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "organisation": {
                            "type": "string"
                        },
                        "password": {
                            "type": "string"
                        },
                        "profile": {
                            "type": "string"
                        },
                        "surname": {
                            "type": "string"
                        },
                        "username": {
                            "type": "string"
                        }
                    },
                    "title": "UserDto"
                },
                "UserFeedbackDTO": {
                    "type": "object",
                    "properties": {
                        "approverName": {
                            "type": "string"
                        },
                        "authorEmail": {
                            "type": "string"
                        },
                        "authorName": {
                            "type": "string"
                        },
                        "authorOrganization": {
                            "type": "string"
                        },
                        "authorUserId": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "captcha": {
                            "type": "string"
                        },
                        "comment": {
                            "type": "string"
                        },
                        "date": {
                            "type": "string"
                        },
                        "keywords": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "metadataTitle": {
                            "type": "string"
                        },
                        "metadataUUID": {
                            "type": "string"
                        },
                        "optionPrivacy": {
                            "type": "boolean"
                        },
                        "parentUuid": {
                            "type": "string"
                        },
                        "published": {
                            "type": "boolean"
                        },
                        "rating": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "ratingAVG": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "showApproveButton": {
                            "type": "boolean"
                        },
                        "uuid": {
                            "type": "string"
                        }
                    },
                    "title": "UserFeedbackDTO"
                },
                "UserGroup": {
                    "type": "object",
                    "properties": {
                        "group": {
                            "$ref": "#/definitions/Group"
                        },
                        "id": {
                            "$ref": "#/definitions/UserGroupId"
                        },
                        "profile": {
                            "type": "string",
                            "enum": [
                                "Administrator",
                                "UserAdmin",
                                "Reviewer",
                                "Editor",
                                "RegisteredUser",
                                "Guest",
                                "Monitor"
                            ]
                        },
                        "user": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "title": "UserGroup"
                },
                "UserGroupId": {
                    "type": "object",
                    "properties": {
                        "groupId": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "profile": {
                            "type": "string",
                            "enum": [
                                "Administrator",
                                "UserAdmin",
                                "Reviewer",
                                "Editor",
                                "RegisteredUser",
                                "Guest",
                                "Monitor"
                            ]
                        },
                        "userId": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "title": "UserGroupId"
                },
                "UserGroupsResponse": {
                    "type": "object",
                    "properties": {
                        "groupId": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "groupName": {
                            "type": "string"
                        },
                        "userId": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "userName": {
                            "type": "string"
                        },
                        "userProfile": {
                            "type": "string"
                        }
                    },
                    "title": "UserGroupsResponse"
                },
                "UserRegisterDto": {
                    "type": "object",
                    "properties": {
                        "address": {
                            "$ref": "#/definitions/Address"
                        },
                        "captcha": {
                            "type": "string"
                        },
                        "email": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "organisation": {
                            "type": "string"
                        },
                        "profile": {
                            "type": "string"
                        },
                        "surname": {
                            "type": "string"
                        },
                        "username": {
                            "type": "string"
                        }
                    },
                    "title": "UserRegisterDto"
                },
                "Values": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "string",
                            "xml": {
                                "name": "code",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "definition": {
                            "type": "string",
                            "xml": {
                                "name": "definition",
                                "attribute": false,
                                "wrapped": false
                            }
                        },
                        "label": {
                            "type": "string",
                            "xml": {
                                "name": "label",
                                "attribute": false,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "Values",
                    "xml": {
                        "name": "Values",
                        "attribute": false,
                        "wrapped": false
                    }
                },
                "WFSHarvesterParameter": {
                    "type": "object",
                    "properties": {
                        "crs": {
                            "type": "string"
                        },
                        "encoding": {
                            "type": "string",
                            "xml": {
                                "name": "encoding",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "maxFeatures": {
                            "type": "integer",
                            "format": "int32",
                            "xml": {
                                "name": "maxFeatures",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "metadataUuid": {
                            "type": "string",
                            "xml": {
                                "name": "metadataUuid",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "timeOut": {
                            "type": "integer",
                            "format": "int32",
                            "xml": {
                                "name": "timeOut",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "titleExpression": {
                            "type": "string",
                            "xml": {
                                "name": "titleExpression",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "tokenizedFields": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "treeFields": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "typeName": {
                            "type": "string",
                            "xml": {
                                "name": "typeName",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "url": {
                            "type": "string",
                            "xml": {
                                "name": "url",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "version": {
                            "type": "string",
                            "xml": {
                                "name": "version",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "WFSHarvesterParameter"
                },
                "XsltMetadataProcessingReport": {
                    "type": "object",
                    "properties": {
                        "ellapsedTimeInSeconds": {
                            "type": "integer",
                            "format": "int64",
                            "xml": {
                                "name": "ellapsedTimeInSeconds",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "endIsoDateTime": {
                            "type": "string",
                            "xml": {
                                "name": "endIsoDateTime",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "errors": {
                            "type": "array",
                            "xml": {
                                "name": "errors",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "$ref": "#/definitions/Report"
                            }
                        },
                        "infos": {
                            "type": "array",
                            "xml": {
                                "name": "infos",
                                "attribute": false,
                                "wrapped": false
                            },
                            "items": {
                                "$ref": "#/definitions/InfoReport"
                            }
                        },
                        "metadata": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "metadataErrors": {
                            "type": "object",
                            "xml": {
                                "name": "errors",
                                "attribute": false,
                                "wrapped": false
                            },
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/Report"
                                }
                            }
                        },
                        "metadataInfos": {
                            "type": "object",
                            "xml": {
                                "name": "infos",
                                "attribute": false,
                                "wrapped": false
                            },
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/InfoReport"
                                }
                            }
                        },
                        "noProcessFoundCount": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfNullRecords": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecordNotFound": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecords": {
                            "type": "integer",
                            "format": "int32",
                            "xml": {
                                "name": "numberOfRecords",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "numberOfRecordsNotEditable": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecordsProcessed": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "numberOfRecordsWithErrors": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "processId": {
                            "type": "string",
                            "xml": {
                                "name": "process",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "running": {
                            "type": "boolean"
                        },
                        "startIsoDateTime": {
                            "type": "string",
                            "xml": {
                                "name": "startIsoDateTime",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "totalTimeInSeconds": {
                            "type": "integer",
                            "format": "int64",
                            "xml": {
                                "name": "totalTimeInSeconds",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "type": {
                            "type": "string",
                            "xml": {
                                "name": "type",
                                "attribute": true,
                                "wrapped": false
                            }
                        },
                        "uuid": {
                            "type": "string",
                            "xml": {
                                "name": "uuid",
                                "attribute": true,
                                "wrapped": false
                            }
                        }
                    },
                    "title": "XsltMetadataProcessingReport",
                    "xml": {
                        "name": "XsltMetadataProcessingReport",
                        "attribute": false,
                        "wrapped": false
                    }
                }
            }
        },
        "eum": {
            "swagger": "2.0",
            "info": {
                "description": "This is the EUMETSAT Data Store REST API. You can find out more about EUMETSAT at [http://eumetsat.int](http://eumetsat.int).",
                "version": "0.5.0",
                "title": "REST_API",
                "termsOfService": "http://www.eumetsat.int/terms/",
                "contact": {
                    "email": "ops@eumetsat.int"
                },
                "license": {
                    "name": "License: not yet defined.",
                    "url": "http://www.eumetsat.int"
                }
            },
            "basePath": "/data/browse",
            "tags": [
                {
                    "name": "Discovery",
                    "description": "Search and discover EUMETSAT Online EO Data.",
                    "externalDocs": {
                        "description": "Find out more",
                        "url": "http://www.eumetsat.int"
                    }
                }
            ],
            "schemes": [
                "https"
            ],
            "paths": {
                "/footprints/{sensorMode}/{subSatelliteLongitude}": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Returns the footprint for a GEO product.",
                        "description": "GEO products do not have an individual footprint. Instead, this resource represents a GEO footprint for the respective sensor mode and sub satellite longitude.",
                        "operationId": "getFootprint",
                        "produces": [
                            "application/geo+json"
                        ],
                        "parameters": [
                            {
                                "name": "sensorMode",
                                "in": "path",
                                "description": "sensor mode",
                                "required": true,
                                "type": "string",
                                "enum": [
                                    "ALTHRV",
                                    "REDSCN",
                                    "NOMSCN"
                                ]
                            },
                            {
                                "name": "subSatelliteLongitude",
                                "in": "path",
                                "description": "sub satellite longitude",
                                "required": true,
                                "type": "number"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/Polygon"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show all collections that are available for Data Store",
                        "description": "Provides the metadata for every Collection available in Data Store in GeoJSON- or HTML-format depending on the requested format",
                        "operationId": "getCollections",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation. Here only the reference to the GeoJSON response schema is given",
                                "schema": {
                                    "$ref": "#/definitions/Collections"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show details for a single collection.",
                        "description": "Provides the basic Collection metadata in GeoJSON- or HTML-format depending on the requested format",
                        "operationId": "getCollectionByID",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/Collection"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/products/{prodID}": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show product metadata",
                        "description": "Returns the product metadata",
                        "operationId": "getProductByID",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html. If the requested format is JSON, a GeoJSON encoding of the product metadata is returned",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "prodID",
                                "in": "path",
                                "description": "The ID of the product that must be returned",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation. The response is a detailed representation of the product\u2019s metadata. Here only the reference to the GeoJSON response schema is given",
                                "schema": {
                                    "$ref": "#/definitions/EarthObservation"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show available years for collection",
                        "description": "Returns the available years for collection",
                        "operationId": "getCollectionByIDDates",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/Collections"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show available months (of year) for collection",
                        "description": "Returns the available months (of year) for a collection",
                        "operationId": "getCollectionByIDDatesYear",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/Collections"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show available days, tiles and products for month (of a year) for collection",
                        "description": "Returns the available days, tiles and products for a month (of a year) for collection",
                        "operationId": "getCollectionByIDDatesYearMonth",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/CollectionPlusProducts"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/products": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show available products for a month (of a year) for collection",
                        "description": "Returns the available products for a month (of a year) for collection",
                        "operationId": "getCollectionByIDDatesYearMonthProducts",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/Products"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/{day}": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show available tiles and product counts for a day for collection",
                        "description": "Returns the available tiles and product counts for a day for collection",
                        "operationId": "getCollectionByIDDatesYearMonthDay",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "day",
                                "in": "path",
                                "description": "day",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/CollectionPlusProducts"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/{day}/products": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show available products for a day for collection",
                        "description": "Returns the available products for a day for collection",
                        "operationId": "getCollectionByIDDatesYearMonthDayProducts",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "day",
                                "in": "path",
                                "description": "day",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/Products"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/{day}/times": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show available hours and products for the hour of day",
                        "description": "Returns the available hours and products for the hour of day",
                        "operationId": "getCollectionByIDDatesYearMonthDayTimes",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "day",
                                "in": "path",
                                "description": "day",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/CollectionPlusProducts"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/{day}/times/{hour}": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show available minutes and products related for hour of day",
                        "description": "Returns the available hours and products related to hour of day",
                        "operationId": "getCollectionByIDDatesYearMonthDayTimesHour",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "day",
                                "in": "path",
                                "description": "day (can also be \"all\")",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "hour",
                                "in": "path",
                                "description": "hour",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/CollectionPlusProducts"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/{day}/times/{hour}/products": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show available products for hour of day",
                        "description": "Returns the available products related to hour of day",
                        "operationId": "getCollectionByIDDatesYearMonthDayTimesHourProducts",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "day",
                                "in": "path",
                                "description": "day (can also be \"all\")",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "hour",
                                "in": "path",
                                "description": "hour",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/Products"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/{day}/times/{hour}/{minute}": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show platforms and product counts for a minute",
                        "description": "Returns the platforms and product counts for a day for collection",
                        "operationId": "getCollectionByIDDatesYearMonthDayTimesHourMinute",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "day",
                                "in": "path",
                                "description": "day (can also be \"all\")",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "hour",
                                "in": "path",
                                "description": "hour",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "minute",
                                "in": "path",
                                "description": "minute",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/CollectionPlusProducts"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/{day}/times/{hour}/{minute}/products": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show products for a minute",
                        "description": "Returns the products for a minute",
                        "operationId": "getCollectionByIDDatesYearMonthDayTimesHourMinuteProducts",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "day",
                                "in": "path",
                                "description": "day (can also be \"all\")",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "hour",
                                "in": "path",
                                "description": "hour",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "minute",
                                "in": "path",
                                "description": "minute",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/Products"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/{day}/times/{hour}/{minute}/platforms": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show all platforms and product counts for a the minute",
                        "description": "Returns the platforms and product counts for a minute",
                        "operationId": "getCollectionByIDDatesYearMonthDayTimesHourMinutePlatforms",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "day",
                                "in": "path",
                                "description": "day (can also be \"all\")",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "hour",
                                "in": "path",
                                "description": "hour",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "minute",
                                "in": "path",
                                "description": "minute",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/CollectionPlusProducts"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/{day}/times/{hour}/{minute}/platforms/{platform}": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show products for a minute and platform",
                        "description": "Returns the products for a minute and platform",
                        "operationId": "getCollectionByIDDatesYearMonthDayTimesHourMinutePlatform",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "day",
                                "in": "path",
                                "description": "day (can also be \"all\")",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "hour",
                                "in": "path",
                                "description": "hour",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "minute",
                                "in": "path",
                                "description": "minute",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "platform",
                                "in": "path",
                                "description": "platform/satellite/mission",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/Products"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/{day}/tiles": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show available zones (e.g. EU) and products for a day for collection",
                        "description": "Returns the available zones (e.g. EU) and products for a day for collection",
                        "operationId": "getCollectionByIDDatesYearMonthDayTiles",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "day",
                                "in": "path",
                                "description": "day",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/CollectionPlusProducts"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/{day}/tiles/{zone}": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show available subGrids and products related to zone for a day of a zone for collection",
                        "description": "Returns the available subGrids and products related to zone for a day of a zone for collection",
                        "operationId": "getCollectionByIDDatesYearMonthDayTilesZone",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "day",
                                "in": "path",
                                "description": "day (can also be \"all\")",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "zone",
                                "in": "path",
                                "description": "zone",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/CollectionPlusProducts"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/{day}/tiles/{zone}/products": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show available products related to a zone for a day for collection",
                        "description": "Returns the available tproducts related to a zone for a day for collection",
                        "operationId": "getCollectionByIDDatesYearMonthDayTilesZoneProducts",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "day",
                                "in": "path",
                                "description": "day",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "zone",
                                "in": "path",
                                "description": "zone",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/Products"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/{day}/tiles/{zone}/t6": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show available tiles for subGrid T6 and products for a day for collection",
                        "description": "Returns the available tiles for subGrid T6 and products for day for collection",
                        "operationId": "getCollectionByIDDatesYearMonthDayTilesZoneT6",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "day",
                                "in": "path",
                                "description": "day",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "zone",
                                "in": "path",
                                "description": "zone",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/CollectionPlusProducts"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/{day}/tiles/{zone}/t6/products": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show available products for all T6 tiles for a day for collection",
                        "description": "Returns the available products for all T6 tiles for a day for collection",
                        "operationId": "getCollectionByIDDatesYearMonthDayTilesZoneT6Products",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "day",
                                "in": "path",
                                "description": "day",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "zone",
                                "in": "path",
                                "description": "zone",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "$ref": "#/definitions/Products"
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                },
                "/collections/{collID}/dates/{year}/{month}/{day}/tiles/{zone}/t6/{t6Tile}": {
                    "get": {
                        "tags": [
                            "Discovery"
                        ],
                        "summary": "Show available products for a t6Tile for a day for collection",
                        "description": "Returns the available products for a t6Tile for a day for collection",
                        "operationId": "getCollectionByIDDatesYearMonthDayTilesZoneT6Tiles",
                        "produces": [
                            "application/geo+json",
                            "text/html"
                        ],
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "format of representation to return: json or html",
                                "required": false,
                                "type": "string",
                                "enum": [
                                    "json",
                                    "html"
                                ]
                            },
                            {
                                "name": "year",
                                "in": "path",
                                "description": "year",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "month",
                                "in": "path",
                                "description": "month",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "day",
                                "in": "path",
                                "description": "day",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "zone",
                                "in": "path",
                                "description": "zone",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "t6Tile",
                                "in": "path",
                                "description": "t6Tile",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "name": "collID",
                                "in": "path",
                                "description": "collection ID",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "successful operation",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Products"
                                    }
                                }
                            },
                            "400": {
                                "description": "The client request has errors."
                            },
                            "404": {
                                "description": "The requested resource was not found."
                            },
                            "405": {
                                "description": "The HTTP method specified in the request is not allowed for this resource."
                            },
                            "500": {
                                "description": "The REST API encountered an internal error that was not foreseen, e.g. because a backend service is down. Error details will be contained in the log files and not be returned to the client."
                            }
                        }
                    }
                }
            },
            "securityDefinitions": {},
            "definitions": {
                "EarthObservation": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "title": "type",
                            "type": "string",
                            "enum": [
                                "Feature"
                            ]
                        },
                        "id": {
                            "type": "string",
                            "format": "uri"
                        },
                        "geometry": {
                            "type": "object"
                        },
                        "properties": {
                            "$ref": "#/definitions/EarthObservationProperties"
                        },
                        "bbox": {
                            "type": "array",
                            "minItems": 4,
                            "maxItems": 4,
                            "items": {
                                "type": "number"
                            }
                        }
                    },
                    "required": [
                        "type",
                        "id",
                        "geometry",
                        "properties"
                    ],
                    "additionalProperties": false
                },
                "EarthObservationProperties": {
                    "type": "object",
                    "allOf": [
                        {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "enum": [
                                        "Properties"
                                    ]
                                },
                                "status": {
                                    "type": "string",
                                    "enum": [
                                        "ARCHIVED",
                                        "PLANNED",
                                        "ACQUIRED",
                                        "CANCELLED",
                                        "FAILED",
                                        "POTENTIAL",
                                        "REJECTED",
                                        "QUALITYDEGRADED"
                                    ]
                                },
                                "acquisitionInformation": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/AcquisitionInformation"
                                    }
                                },
                                "productInformation": {
                                    "$ref": "#/definitions/ProductInformation"
                                },
                                "extraInformation": {
                                    "$ref": "#/definitions/ExtraInformation"
                                },
                                "links": {
                                    "$ref": "#/definitions/ProductLinks"
                                }
                            },
                            "required": [
                                "status",
                                "acquisitionInformation",
                                "links"
                            ]
                        },
                        {
                            "$ref": "#/definitions/DataIdentification"
                        }
                    ]
                },
                "DataIdentification": {
                    "description": "Subset of Properties",
                    "type": "object",
                    "properties": {
                        "parentIdentifier": {
                            "type": "string"
                        },
                        "doi": {
                            "type": "string"
                        },
                        "title": {
                            "type": "string"
                        },
                        "date": {
                            "type": "string"
                        },
                        "updated": {
                            "type": "string",
                            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(Z|[\\+\\-][0-9]{2}:[0-9]{2})$",
                            "format": "date-time"
                        }
                    },
                    "required": [
                        "title",
                        "date",
                        "updated"
                    ]
                },
                "ProductLinks": {
                    "type": "object",
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": [
                                "Links"
                            ]
                        },
                        "qualityReport": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LinkType"
                            }
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LinkType"
                            }
                        },
                        "alternates": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LinkType"
                            }
                        },
                        "via": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LinkType"
                            }
                        },
                        "up": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LinkType"
                            }
                        },
                        "previews": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LinkType"
                            }
                        }
                    }
                },
                "LinkType": {
                    "type": "object",
                    "required": [
                        "href"
                    ],
                    "properties": {
                        "href": {
                            "type": "string",
                            "format": "uri"
                        },
                        "type": {
                            "type": "string"
                        },
                        "title": {
                            "type": "string"
                        },
                        "length": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "category": {
                            "description": "Media category property defined by MediaRSS.",
                            "type": "string",
                            "enum": [
                                "THUMBNAIL",
                                "QUICKLOOK",
                                "ALBUM",
                                "CLOUD",
                                "SNOW",
                                "QUALITY"
                            ]
                        },
                        "expression": {
                            "description": "Media expression property defined by MediaRSS.",
                            "type": "string",
                            "enum": [
                                "full",
                                "sample"
                            ]
                        },
                        "conformsTo": {
                            "type": "string",
                            "format": "uri"
                        }
                    }
                },
                "Collections": {
                    "type": "object",
                    "required": [
                        "links",
                        "numberOfProducts"
                    ],
                    "properties": {
                        "links": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LinkSchema"
                            }
                        },
                        "numberOfProducts": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                },
                "LinkSchema": {
                    "type": "object",
                    "required": [
                        "title",
                        "rel"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "example": "Link"
                        },
                        "href": {
                            "type": "string",
                            "example": "collections/EO%3AEUM%3ADAT%3AMSG%3AHRSEVIRI?format=json"
                        },
                        "mediaType": {
                            "type": "string",
                            "example": "application/json"
                        },
                        "title": {
                            "type": "string",
                            "example": "EO:EUM:DAT:MSG:HRSEVIRI"
                        },
                        "rel": {
                            "type": "string",
                            "example": "collection/details"
                        }
                    }
                },
                "Collection": {
                    "type": "object",
                    "required": [
                        "collection",
                        "links"
                    ],
                    "properties": {
                        "collection": {
                            "$ref": "#/definitions/CollectionFeature"
                        },
                        "links": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LinkSchema"
                            }
                        }
                    }
                },
                "CollectionFeature": {
                    "type": "object",
                    "required": [
                        "type",
                        "id",
                        "properties"
                    ],
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "id": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "properties": {
                            "$ref": "#/definitions/CollectionProperties"
                        }
                    }
                },
                "CollectionProperties": {
                    "type": "object",
                    "required": [
                        "kind",
                        "type",
                        "identifier"
                    ],
                    "properties": {
                        "kind": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        },
                        "identifier": {
                            "type": "string"
                        },
                        "title": {
                            "type": "string"
                        },
                        "date": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "abstract": {
                            "type": "string"
                        },
                        "links": {
                            "$ref": "#/definitions/CollectionLinks"
                        }
                    }
                },
                "CollectionLinks": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "alternates": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "search": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "previews": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "CollectionPlusProducts": {
                    "type": "object",
                    "required": [
                        "links",
                        "numberOfProducts"
                    ],
                    "properties": {
                        "links": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LinkSchema"
                            }
                        },
                        "numberOfProducts": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "products": {
                            "$ref": "#/definitions/LinkSchema"
                        }
                    }
                },
                "Products": {
                    "type": "object",
                    "required": [
                        "products",
                        "numberOfProducts"
                    ],
                    "properties": {
                        "products": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Product"
                            }
                        },
                        "numberOfProducts": {
                            "type": "integer"
                        },
                        "next": {
                            "$ref": "#/definitions/LinkSchema"
                        }
                    }
                },
                "Product": {
                    "type": "object",
                    "required": [
                        "links",
                        "id"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "format": "uri"
                        },
                        "date": {
                            "type": "string"
                        },
                        "links": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LinkSchema"
                            }
                        }
                    }
                },
                "Point": {
                    "title": "Point",
                    "type": "object",
                    "required": [
                        "type",
                        "coordinates"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": [
                                "Point"
                            ]
                        },
                        "coordinates": {
                            "type": "array",
                            "minItems": 2,
                            "items": {
                                "type": "number"
                            }
                        }
                    }
                },
                "Polygon": {
                    "title": "Polygon",
                    "type": "object",
                    "properties": {
                        "coordinates": {
                            "title": "gj:coordinates",
                            "description": "Array of linestrings",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                                "description": "Linear ring, i.e. linestring or array of positions",
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "description": "One position",
                                    "type": "array",
                                    "minItems": 2,
                                    "maxItems": 2,
                                    "items": {
                                        "type": "number"
                                    }
                                }
                            }
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "Polygon"
                            ]
                        }
                    },
                    "required": [
                        "coordinates",
                        "type"
                    ]
                },
                "MultiPolygon": {
                    "title": "MultiPolygon",
                    "type": "object",
                    "properties": {
                        "coordinates": {
                            "title": "gj:coordinates",
                            "description": "One position (longitude, lattitude)",
                            "type": "array",
                            "items": {
                                "type": "number"
                            }
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "MultiPolygon"
                            ]
                        }
                    },
                    "required": [
                        "coordinates",
                        "type"
                    ]
                },
                "AcquisitionInformation": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": [
                                "AcquisitionInformation"
                            ]
                        },
                        "platform": {
                            "$ref": "#/definitions/Platform"
                        },
                        "instrument": {
                            "$ref": "#/definitions/Instrument"
                        },
                        "acquisitionParameters": {
                            "$ref": "#/definitions/AcquisitionParameters"
                        }
                    }
                },
                "Platform": {
                    "type": "object",
                    "minProperties": 1,
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": [
                                "Platform"
                            ]
                        },
                        "id": {
                            "type": "string",
                            "format": "uri"
                        },
                        "platformShortName": {
                            "type": "string"
                        },
                        "platformSerialIdentifier": {
                            "type": "string"
                        },
                        "orbitType": {
                            "type": "string",
                            "enum": [
                                "GEO",
                                "LEO"
                            ]
                        }
                    },
                    "required": [
                        "platformShortName"
                    ],
                    "additionalProperties": false
                },
                "Instrument": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": [
                                "Instrument"
                            ]
                        },
                        "id": {
                            "type": "string",
                            "format": "uri"
                        },
                        "sensorType": {
                            "type": "string",
                            "enum": [
                                "OPTICAL",
                                "RADAR",
                                "ATMOSPHERIC",
                                "ALTIMETRIC",
                                "LIMB"
                            ]
                        },
                        "instrumentShortName": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "operationalMode": {
                            "type": "string"
                        },
                        "swathIdentifier": {
                            "type": "string"
                        },
                        "polarisationMode": {
                            "description": "Sar",
                            "type": "string",
                            "enum": [
                                "S",
                                "D",
                                "T",
                                "Q",
                                "UNDEFINED"
                            ]
                        },
                        "polarisationChannels": {
                            "description": "Sar",
                            "type": "string"
                        },
                        "resolution": {
                            "type": "number"
                        },
                        "verticalResolution": {
                            "description": "Atm, Lmb",
                            "type": "number"
                        },
                        "waveLengths": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/WavelengthInformation"
                            }
                        },
                        "measurementType": {
                            "type": "string",
                            "enum": [
                                "ABSORPTION",
                                "EMISSION"
                            ]
                        },
                        "dopplerFrequency": {
                            "description": "Sar",
                            "type": "string"
                        },
                        "samplingRates": {
                            "description": "Alt",
                            "type": "array",
                            "items": {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                            }
                        }
                    },
                    "required": [
                        "instrumentShortName"
                    ],
                    "additionalProperties": false
                },
                "WavelengthInformation": {
                    "type": "object",
                    "minProperties": 1,
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": [
                                "WavelengthInformation"
                            ]
                        },
                        "discreteWavelengths": {
                            "type": "string"
                        },
                        "endWavelength": {
                            "type": "string"
                        },
                        "spectralRange": {
                            "type": "string",
                            "enum": [
                                "INFRARED",
                                "NEAR-INFRARED",
                                "UV",
                                "VISIBLE",
                                "OTHER"
                            ]
                        },
                        "startWavelength": {
                            "type": "string"
                        },
                        "wavelengthResolution": {
                            "type": "string"
                        }
                    },
                    "additionalProperties": false
                },
                "AcquisitionParameters": {
                    "type": "object",
                    "allOf": [
                        {
                            "type": "object",
                            "properties": {
                                "acquisitionType": {
                                    "type": "string",
                                    "enum": [
                                        "NOMINAL",
                                        "CALIBRATION",
                                        "OTHER"
                                    ]
                                },
                                "acquisitionSubType": {
                                    "type": "string"
                                },
                                "startTimeFromAscendingNode": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "completionTimeFromAscendingNode": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "relativePassNumber": {
                                    "type": "integer"
                                },
                                "track": {
                                    "type": "string"
                                },
                                "frame": {
                                    "type": "string"
                                },
                                "tileId": {
                                    "type": "string"
                                },
                                "groundTrackUncertainty": {
                                    "type": "number"
                                },
                                "orbitNumber": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "relativeOrbitNumber": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "cycleNumber": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "antennaLookDirection": {
                                    "type": "string",
                                    "enum": [
                                        "LEFT",
                                        "RIGHT"
                                    ]
                                },
                                "acquisitionStation": {
                                    "type": "string"
                                },
                                "acquisitionAngles": {
                                    "$ref": "#/definitions/AcquisitionAngles"
                                },
                                "mtgCoverage": {
                                    "$ref": "#/definitions/MTGCoverage"
                                }
                            },
                            "required": [
                                "acquisitionType"
                            ]
                        },
                        {
                            "$ref": "#/definitions/TemporalInformation"
                        },
                        {
                            "$ref": "#/definitions/VerticalSpatialDomain"
                        },
                        {
                            "$ref": "#/definitions/OrbitParameters"
                        }
                    ]
                },
                "AcquisitionAngles": {
                    "type": "object",
                    "properties": {
                        "illuminationAzimuthAngle": {
                            "type": "number"
                        },
                        "illuminationZenithAngle": {
                            "type": "number"
                        },
                        "illuminationElevationAngle": {
                            "type": "number"
                        },
                        "incidenceAngle": {
                            "type": "number"
                        },
                        "minimumIncidenceAngle": {
                            "type": "number"
                        },
                        "maximumIncidenceAngle": {
                            "type": "number"
                        },
                        "incidenceAngleVariation": {
                            "type": "number"
                        },
                        "acrossTrackIncidenceAngle": {
                            "type": "number"
                        },
                        "alongTrackIncidenceAngle": {
                            "type": "number"
                        },
                        "instrumentAzimuthAngle": {
                            "type": "number"
                        },
                        "instrumentZenithAngle": {
                            "type": "number"
                        },
                        "instrumentElevationAngle": {
                            "type": "number"
                        },
                        "pitch": {
                            "type": "number"
                        },
                        "roll": {
                            "type": "number"
                        },
                        "yaw": {
                            "type": "number"
                        }
                    },
                    "additionalProperties": false
                },
                "TemporalInformation": {
                    "description": "Subset of AcquisitionParameters",
                    "type": "object",
                    "properties": {
                        "beginningDateTime": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "endingDateTime": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    "required": [
                        "beginningDateTime",
                        "endingDateTime"
                    ]
                },
                "VerticalSpatialDomain": {
                    "description": "Subset of AcquisitionParameters",
                    "type": "object",
                    "properties": {
                        "highestLocation": {
                            "type": "string"
                        },
                        "lowestLocation": {
                            "type": "string"
                        },
                        "locationUnit": {
                            "type": "string",
                            "enum": [
                                "bar",
                                "m"
                            ]
                        }
                    }
                },
                "OrbitParameters": {
                    "description": "Subset of AcquisitionParameters",
                    "type": "object",
                    "properties": {
                        "orbitDirection": {
                            "type": "string",
                            "enum": [
                                "ASCENDING",
                                "DESCENDING"
                            ]
                        },
                        "orbitDuration": {
                            "type": "integer"
                        },
                        "ascendingNodeDate": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "ascendingNodeLongitude": {
                            "type": "number"
                        },
                        "orbitNumber": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "lastOrbitNumber": {
                            "type": "number"
                        }
                    }
                },
                "MTGCoverage": {
                    "type": "object",
                    "properties": {
                        "repeatCycleIdentifier": {
                            "type": "string"
                        },
                        "majorRegionCoverage": {
                            "type": "string",
                            "minimum": 0
                        },
                        "subRegionIdentifier": {
                            "type": "string",
                            "minimum": 0
                        }
                    }
                },
                "ProductInformation": {
                    "type": "object",
                    "allOf": [
                        {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "enum": [
                                        "ProductInformation"
                                    ]
                                },
                                "productType": {
                                    "type": "string"
                                },
                                "size": {
                                    "type": "integer"
                                },
                                "productVersion": {
                                    "type": "string"
                                },
                                "statusSubType": {
                                    "type": "string",
                                    "enum": [
                                        "ON-LINE",
                                        "OFF-LINE"
                                    ]
                                },
                                "qualityInformation": {
                                    "$ref": "#/definitions/QualityInformation"
                                },
                                "statusDetail": {
                                    "type": "string"
                                },
                                "availabilityTime": {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                "timeliness": {
                                    "type": "string"
                                },
                                "productGroupId": {
                                    "type": "string"
                                },
                                "archivingCenter": {
                                    "type": "string"
                                },
                                "referenceSystemIdentifier": {
                                    "type": "string"
                                },
                                "archivingDate": {
                                    "type": "string",
                                    "format": "date-time"
                                }
                            },
                            "required": [
                                "availabilityTime"
                            ]
                        },
                        {
                            "$ref": "#/definitions/ProcessingInformation"
                        },
                        {
                            "$ref": "#/definitions/CoverageDescription"
                        }
                    ]
                },
                "ExtraInformation": {
                    "type": "object",
                    "allOf": [
                        {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "enum": [
                                        "ExtraInformation"
                                    ]
                                },
                                "fireDetected": {
                                    "type": "boolean"
                                },
                                "md5": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "availabilityTime"
                            ]
                        },
                        {
                            "$ref": "#/definitions/ProcessingInformation"
                        },
                        {
                            "$ref": "#/definitions/CoverageDescription"
                        }
                    ]
                },
                "ProcessingInformation": {
                    "description": "Subset of ProductInformation",
                    "type": "object",
                    "properties": {
                        "processorName": {
                            "type": "string"
                        },
                        "processingCenter": {
                            "description": "Codelist",
                            "type": "string"
                        },
                        "processingDate": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "processingLevel": {
                            "type": "string",
                            "enum": [
                                "1A",
                                "1B",
                                "2",
                                "3"
                            ]
                        },
                        "processingMode": {
                            "description": "Codelist",
                            "type": "string"
                        },
                        "compositeType": {
                            "type": "string"
                        },
                        "productContentsType": {
                            "type": "string"
                        },
                        "processingMethod": {
                            "type": "string"
                        },
                        "processingMethodVersion": {
                            "type": "string"
                        }
                    }
                },
                "CoverageDescription": {
                    "description": "Subset of ProductInformation",
                    "type": "object",
                    "properties": {
                        "cloudCover": {
                            "type": "number"
                        },
                        "snowCover": {
                            "type": "number"
                        }
                    }
                },
                "QualityInformation": {
                    "type": "object",
                    "properties": {
                        "qualityStatus": {
                            "type": "string",
                            "enum": [
                                "NOMINAL",
                                "DEGRADED"
                            ]
                        },
                        "qualityDegradation": {
                            "description": "Percentage",
                            "type": "number"
                        },
                        "qualityDegradationTag": {
                            "type": "string"
                        },
                        "qualityDegradationQuotationMode": {
                            "type": "string",
                            "enum": [
                                "AUTOMATIC",
                                "MANUAL"
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        "wekeo": {
            "basePath": "/databroker",
            "definitions": {
                "Bbox": {
                    "example": [
                        -180,
                        90,
                        180,
                        -90
                    ],
                    "items": {
                        "format": "float",
                        "type": "number"
                    },
                    "maxItems": 4,
                    "minItems": 4,
                    "type": "array"
                },
                "BoundingBoxValue": {
                    "properties": {
                        "bbox": {
                            "$ref": "#/definitions/Bbox"
                        },
                        "name": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "DateRangeSelectValue": {
                    "properties": {
                        "end": {
                            "format": "date-time",
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "start": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    "required": [
                        "end",
                        "name",
                        "start"
                    ],
                    "type": "object"
                },
                "Geojson": {
                    "description": "GeoJSon geometry",
                    "example": {
                        "coordinates": [
                            [
                                [
                                    -180,
                                    90
                                ],
                                [
                                    180,
                                    90
                                ],
                                [
                                    180,
                                    -90
                                ],
                                [
                                    -180,
                                    -90
                                ],
                                [
                                    -180,
                                    90
                                ]
                            ]
                        ],
                        "type": "Polygon"
                    },
                    "type": "object"
                },
                "Geometry": {
                    "description": "GeoJSon geometry",
                    "properties": {
                        "type": {
                            "description": "the geometry type",
                            "enum": [
                                "Point",
                                "LineString",
                                "Polygon",
                                "MultiPoint",
                                "MultiLineString",
                                "MultiPolygon"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "JsonList": {
                    "properties": {
                        "detail": {
                            "type": "string"
                        },
                        "results": {
                            "items": {
                                "$ref": "#/definitions/JsonResponse"
                            },
                            "type": "array"
                        },
                        "state": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "JsonResponse": {
                    "properties": {
                        "data_provider": {
                            "type": "string"
                        },
                        "dataset_id": {
                            "type": "string"
                        },
                        "geometry": {
                            "properties": {},
                            "type": "object"
                        },
                        "metadata_text": {
                            "type": "string"
                        },
                        "product_date": {
                            "type": "string"
                        },
                        "product_id": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "LineString": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Geometry"
                        },
                        {
                            "properties": {
                                "coordinates": {
                                    "items": {
                                        "$ref": "#/definitions/Point2D"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    ],
                    "description": "GeoJSon geometry"
                },
                "MultiLineString": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Geometry"
                        },
                        {
                            "properties": {
                                "coordinates": {
                                    "items": {
                                        "items": {
                                            "$ref": "#/definitions/Point2D"
                                        },
                                        "type": "array"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    ],
                    "description": "GeoJSon geometry"
                },
                "MultiPoint": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Geometry"
                        },
                        {
                            "properties": {
                                "coordinates": {
                                    "items": {
                                        "$ref": "#/definitions/Point2D"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    ],
                    "description": "GeoJSon geometry"
                },
                "MultiPolygon": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Geometry"
                        },
                        {
                            "properties": {
                                "coordinates": {
                                    "items": {
                                        "items": {
                                            "items": {
                                                "$ref": "#/definitions/Point2D"
                                            },
                                            "type": "array"
                                        },
                                        "type": "array"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    ],
                    "description": "GeoJSon geometry"
                },
                "MultiStringSelectValue": {
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "value": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "name"
                    ],
                    "type": "object"
                },
                "Pagination": {
                    "example": {
                        "offset": 0
                    },
                    "properties": {
                        "offset": {
                            "description": "Position in pagination.",
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "Point": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Geometry"
                        },
                        {
                            "properties": {
                                "coordinates": {
                                    "$ref": "#/definitions/Point2D"
                                }
                            }
                        }
                    ],
                    "description": "GeoJSon geometry"
                },
                "Point2D": {
                    "items": {
                        "type": "number"
                    },
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "Polygon": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Geometry"
                        },
                        {
                            "properties": {
                                "coordinates": {
                                    "items": {
                                        "items": {
                                            "$ref": "#/definitions/Point2D"
                                        },
                                        "type": "array"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    ],
                    "description": "GeoJSon geometry"
                },
                "ResultValue": {
                    "properties": {
                        "location": {
                            "type": "string"
                        },
                        "productId": {
                            "type": "string"
                        },
                        "size": {
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "StringChoiceValue": {
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "name",
                        "value"
                    ],
                    "type": "object"
                },
                "StringInputValue": {
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "name",
                        "value"
                    ],
                    "type": "object"
                },
                "adapterBasePayload": {
                    "properties": {
                        "address": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "adapterOrgPayload": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/adapterBasePayload"
                        },
                        {
                            "properties": {
                                "organization": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "organization"
                            ],
                            "type": "object"
                        }
                    ]
                },
                "datasetBasePayload": {
                    "properties": {
                        "abstract": {
                            "description": "Dataset abstarct",
                            "type": "string",
                            "x-nullable": true
                        },
                        "adapterOrganization": {
                            "description": "Dataset adapter organization",
                            "type": "string"
                        },
                        "cacheable": {
                            "type": "boolean"
                        },
                        "created": {
                            "description": "Dataset creating date",
                            "type": "string",
                            "x-nullable": true
                        },
                        "datasetKey": {
                            "description": "Dataset key of the shard",
                            "type": "string"
                        },
                        "dataset_remote_name": {
                            "description": "Dataset name on remote service",
                            "type": "string"
                        },
                        "otherInfo": {
                            "$ref": "#/definitions/datasetInfos"
                        },
                        "parameters": {
                            "description": "Dataset parameters",
                            "type": "string",
                            "x-nullable": true
                        },
                        "status": {
                            "description": "Dataset status",
                            "type": "string",
                            "x-nullable": true
                        },
                        "status_action": {
                            "description": "Dataset status: deleted, available",
                            "type": "string"
                        },
                        "termId": {
                            "description": "ID of the terms",
                            "type": "string"
                        },
                        "title": {
                            "description": "Dataset title",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "datasetContact": {
                    "properties": {
                        "contactEmail": {
                            "type": "string",
                            "x-nullable": true
                        },
                        "contactIndividualName": {
                            "type": "string",
                            "x-nullable": true
                        },
                        "contactOrganizationName": {
                            "type": "string",
                            "x-nullable": true
                        },
                        "contactPhone": {
                            "type": "string",
                            "x-nullable": true
                        },
                        "contactUrl": {
                            "type": "string",
                            "x-nullable": true
                        }
                    },
                    "type": "object"
                },
                "datasetDetails": {
                    "properties": {
                        "instrumentId": {
                            "type": "string",
                            "x-nullable": true
                        },
                        "instrumentName": {
                            "type": "string",
                            "x-nullable": true
                        },
                        "instrumentType": {
                            "type": "string",
                            "x-nullable": true
                        },
                        "orbitType": {
                            "type": "string",
                            "x-nullable": true
                        },
                        "platformDescription": {
                            "type": "string",
                            "x-nullable": true
                        },
                        "platformId": {
                            "type": "string",
                            "x-nullable": true
                        }
                    },
                    "type": "object"
                },
                "datasetExtent": {
                    "properties": {
                        "bbox": {
                            "$ref": "#/definitions/Bbox"
                        },
                        "endDate": {
                            "type": "string",
                            "x-nullable": true
                        },
                        "geoDescription": {
                            "type": "string",
                            "x-nullable": true
                        },
                        "startDate": {
                            "type": "string",
                            "x-nullable": true
                        }
                    },
                    "type": "object"
                },
                "datasetIdPayload": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/datasetBasePayload"
                        },
                        {
                            "properties": {
                                "adapterOrganization": {
                                    "description": "Dataset adapter organization",
                                    "type": "string"
                                },
                                "datasetId": {
                                    "description": "Dataset id",
                                    "type": "string"
                                },
                                "datasetKey": {
                                    "description": "Dataset key of the shard",
                                    "type": "string"
                                },
                                "dataset_remote_name": {
                                    "description": "Dataset name on remote service",
                                    "type": "string"
                                },
                                "status_action": {
                                    "description": "Dataset status: deleted, available",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "adapterOrganization",
                                "datasetId",
                                "datasetKey"
                            ],
                            "type": "object"
                        }
                    ]
                },
                "datasetInfos": {
                    "properties": {
                        "contact": {
                            "$ref": "#/definitions/datasetContact"
                        },
                        "details": {
                            "$ref": "#/definitions/datasetDetails"
                        },
                        "extent": {
                            "$ref": "#/definitions/datasetExtent"
                        }
                    },
                    "type": "object"
                },
                "error": {
                    "properties": {
                        "detail": {
                            "example": "Error description",
                            "type": "string"
                        },
                        "status_code": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "title": {
                            "example": "HTTP status title",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "error400": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/error"
                        },
                        {
                            "example": {
                                "detail": "Error description",
                                "status_code": 400,
                                "title": "Bad Request"
                            },
                            "type": "object"
                        }
                    ]
                },
                "error401": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/error"
                        },
                        {
                            "example": {
                                "detail": "Error description",
                                "status_code": 401,
                                "title": "Unauthorized"
                            },
                            "type": "object"
                        }
                    ]
                },
                "error403": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/error"
                        },
                        {
                            "example": {
                                "detail": "Error description",
                                "status_code": 403,
                                "title": "Forbidden"
                            },
                            "type": "object"
                        }
                    ]
                },
                "error404": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/error"
                        },
                        {
                            "example": {
                                "detail": "Error description",
                                "status_code": 404,
                                "title": "Not found"
                            },
                            "type": "object"
                        }
                    ]
                },
                "error415": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/error"
                        },
                        {
                            "example": {
                                "detail": "Error description",
                                "status_code": 415,
                                "title": "Unsupported Media Type"
                            },
                            "type": "object"
                        }
                    ]
                },
                "error429": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/error"
                        },
                        {
                            "example": {
                                "detail": "Error description",
                                "status_code": 429,
                                "title": "Too Many Requests"
                            },
                            "type": "object"
                        }
                    ]
                },
                "error500": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/error"
                        },
                        {
                            "example": {
                                "detail": "Error description",
                                "status_code": 500,
                                "title": "Internal Server Error",
                                "type": "about:blank"
                            },
                            "properties": {
                                "type": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ]
                },
                "postDataorder": {
                    "properties": {
                        "jobId": {
                            "type": "string"
                        },
                        "uri": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "jobId",
                        "uri"
                    ],
                    "type": "object"
                },
                "postDatarequest": {
                    "example": {
                        "boundingBoxValues": [
                            {
                                "bbox": [
                                    2.092245928227662,
                                    53.61282177960933,
                                    32.33416353120395,
                                    71.89524150791208
                                ],
                                "name": "bbox"
                            }
                        ],
                        "datasetId": "EO:CRYO:DAT:HRSI:ARLIE",
                        "dateRangeSelectValues": [
                            {
                                "end": "2021-02-09T00:00:00.000Z",
                                "name": "Observed",
                                "start": "2019-01-01T00:00:00.000Z"
                            },
                            {
                                "end": "2021-02-09T00:00:00.000Z",
                                "name": "Published",
                                "start": "2019-06-01T00:00:00.000Z"
                            }
                        ],
                        "stringChoiceValues": []
                    },
                    "properties": {
                        "boundingBoxValues": {
                            "items": {
                                "$ref": "#/definitions/BoundingBoxValue"
                            },
                            "type": "array"
                        },
                        "datasetId": {
                            "type": "string"
                        },
                        "dateRangeSelectValues": {
                            "items": {
                                "$ref": "#/definitions/DateRangeSelectValue"
                            },
                            "type": "array"
                        },
                        "multiStringSelectValues": {
                            "items": {
                                "$ref": "#/definitions/MultiStringSelectValue"
                            },
                            "type": "array"
                        },
                        "stringChoiceValues": {
                            "items": {
                                "$ref": "#/definitions/StringChoiceValue"
                            },
                            "type": "array"
                        },
                        "stringInputValues": {
                            "items": {
                                "$ref": "#/definitions/StringInputValue"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "datasetId"
                    ],
                    "type": "object"
                },
                "putActionStatusRequest": {
                    "properties": {
                        "detail": {
                            "type": "string"
                        },
                        "results": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "state": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "putDataorderStatusRequest": {
                    "properties": {
                        "detail": {
                            "type": "string"
                        },
                        "state": {
                            "type": "string"
                        },
                        "url": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "putDatasetStatusRequest": {
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ResultValue"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            },
            "host": "wekeo-broker.apps.mercator.dpi.wekeo.eu",
            "info": {
                "contact": {
                    "email": ""
                },
                "description": "",
                "license": {
                    "name": "Apache 2.0",
                    "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
                },
                "termsOfService": "http://swagger.io/terms/",
                "title": "Broker",
                "version": "1.0.0"
            },
            "paths": {
                "/adapters": {
                    "get": {
                        "description": "Retrieve the adapter list.",
                        "operationId": "adapters_get",
                        "parameters": [
                            {
                                "description": "Number of adapters to show in a page. Default 10.",
                                "in": "query",
                                "name": "size",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "description": "Number of the page to be shown. Default 0.",
                                "in": "query",
                                "name": "page",
                                "required": false,
                                "type": "integer"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "OPERATOR - adapters"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_adapters_controller"
                    },
                    "post": {
                        "description": "Add new adapter.",
                        "operationId": "adapters_post",
                        "parameters": [
                            {
                                "description": "JSON object containing the info about the new adapter.",
                                "in": "body",
                                "name": "queryRequest",
                                "required": true,
                                "schema": {
                                    "$ref": "#/definitions/adapterOrgPayload"
                                }
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not Found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "OPERATOR - adapters"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_adapters_controller"
                    }
                },
                "/adapters/searchsync": {
                    "get": {
                        "description": "Get actions list",
                        "operationId": "adapters_sync_action_search",
                        "parameters": [
                            {
                                "description": "Number of actions to show in a page. Default 10.",
                                "in": "query",
                                "name": "size",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "description": "Number of the page to be shown. Default 0.",
                                "in": "query",
                                "name": "page",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "description": "Id of the Adapter",
                                "in": "query",
                                "name": "adapterId",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not Found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "OPERATOR - adapters"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_adapters_controller"
                    }
                },
                "/adapters/sync/status/{actionId}": {
                    "get": {
                        "description": "Get existing action",
                        "operationId": "adapters_sync_action_get",
                        "parameters": [
                            {
                                "description": "Action id",
                                "in": "path",
                                "name": "actionId",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not Found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "OPERATOR - adapters"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_adapters_controller"
                    },
                    "put": {
                        "description": "Update existing action",
                        "operationId": "adapters_sync_action_put",
                        "parameters": [
                            {
                                "description": "Action id",
                                "in": "path",
                                "name": "actionId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "description": "The response contains product list",
                                "in": "body",
                                "name": "queryRequest",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/putActionStatusRequest"
                                }
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not Found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADAPTER ONLY",
                        "tags": [
                            "OPERATOR - adapters"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_adapters_controller"
                    }
                },
                "/adapters/sync/{actionId}/result": {
                    "get": {
                        "description": "Get action results",
                        "operationId": "adapters_sync_action_result",
                        "parameters": [
                            {
                                "description": "Action id",
                                "in": "path",
                                "name": "actionId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "description": "Number of datasets to show in a page. Default 10.",
                                "in": "query",
                                "name": "size",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "description": "Number of the page to be shown. Default 0.",
                                "in": "query",
                                "name": "page",
                                "required": false,
                                "type": "integer"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not Found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "OPERATOR - adapters"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_adapters_controller"
                    }
                },
                "/adapters/sync/{adapterId}": {
                    "post": {
                        "description": "Trigger the synchronization between adapter and datasource provider",
                        "operationId": "adapters_sync_post",
                        "parameters": [
                            {
                                "description": "Adapter id",
                                "in": "path",
                                "name": "adapterId",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not Found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "OPERATOR - adapters"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_adapters_controller"
                    }
                },
                "/adapters/{adapterId}": {
                    "delete": {
                        "description": "Delete adapter.",
                        "operationId": "adapters_delete_id",
                        "parameters": [
                            {
                                "description": "Adapter id",
                                "in": "path",
                                "name": "adapterId",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not Found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "OPERATOR - adapters"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_adapters_controller"
                    },
                    "get": {
                        "description": "Retrieve the adapter info.",
                        "operationId": "adapters_get_id",
                        "parameters": [
                            {
                                "description": "Adapter id",
                                "in": "path",
                                "name": "adapterId",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "OPERATOR - adapters"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_adapters_controller"
                    },
                    "put": {
                        "description": "Update existing adapter.",
                        "operationId": "adapters_put_id",
                        "parameters": [
                            {
                                "description": "Adapter id",
                                "in": "path",
                                "name": "adapterId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "description": "JSON object containing the info about the adapter to update.",
                                "in": "body",
                                "name": "queryRequest",
                                "required": true,
                                "schema": {
                                    "$ref": "#/definitions/adapterBasePayload"
                                }
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not Found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "OPERATOR - adapters"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_adapters_controller"
                    }
                },
                "/catalogue/datasets": {
                    "get": {
                        "description": "It returns the list of dataset ids synchronized the mongo catalogue. Catalogue populate the datasets trought a datasync",
                        "operationId": "get_dataset_ids",
                        "parameters": [],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - Catalogues"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_catalogues_controller"
                    }
                },
                "/catalogue/{datasetId}": {
                    "delete": {
                        "description": "This API deletes the entire dataset from the mongo catalogue or remove a set of records specifing a temporal range",
                        "operationId": "delete_products",
                        "parameters": [
                            {
                                "description": "ID of the dataset",
                                "in": "path",
                                "name": "datasetId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "description": "date in format YYYY-MM-DD representing the lower limit of the datasets reference date to delete. Must be used togheter end_date",
                                "in": "query",
                                "name": "start_date",
                                "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
                                "required": false,
                                "type": "string",
                                "x-modifiers": [],
                                "x-regex": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
                            },
                            {
                                "description": "date in format YYYY-MM-DD representing the upper limit of the datasets reference date to delete. Must be used togheter start_date",
                                "in": "query",
                                "name": "end_date",
                                "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
                                "required": false,
                                "type": "string",
                                "x-modifiers": [],
                                "x-regex": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "HDA - Catalogues"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_catalogues_controller"
                    }
                },
                "/catalogue/{datasetId}/datasync": {
                    "get": {
                        "description": "This API calls the adapter datasync to collect specific information for a dataset",
                        "operationId": "catalogue_datasync_get",
                        "parameters": [
                            {
                                "description": "ID of the dataset",
                                "in": "path",
                                "name": "datasetId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "description": "date in format YYYY-MM-DD (or YYYY-MM-DDTHH:MM:SSZ) representing the lower limit of the datasets reference date to ingest. Must be used togheter end_date",
                                "in": "query",
                                "name": "start_date",
                                "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{0,6})?Z?)?$",
                                "required": false,
                                "type": "string",
                                "x-modifiers": [],
                                "x-regex": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{0,6})?Z?)?$"
                            },
                            {
                                "description": "date in format YYYY-MM-DD (or YYYY-MM-DDTHH:MM:SSZ) representing the upper limit of the datasets reference date to ingest. Must be used togheter start_date",
                                "in": "query",
                                "name": "end_date",
                                "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{0,6})?Z?)?$",
                                "required": false,
                                "type": "string",
                                "x-modifiers": [],
                                "x-regex": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{0,6})?Z?)?$"
                            },
                            {
                                "description": "ID of the product",
                                "in": "query",
                                "name": "productId",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - Catalogues"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_catalogues_controller"
                    }
                },
                "/catalogue/{datasetId}/querycatalogue": {
                    "post": {
                        "description": "This returns available products for the dataset {datasetid}.",
                        "operationId": "get_catalogue_dataset",
                        "parameters": [
                            {
                                "description": "ID of the dataset",
                                "in": "path",
                                "name": "datasetId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "default": 10,
                                "description": "The number of items to skip before starting to collect the result set. Default 10",
                                "in": "query",
                                "name": "limit",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "default": 0,
                                "description": "The number of items to skip before starting to collect the result set. Default 0",
                                "in": "query",
                                "maximum": 100,
                                "minimum": 0,
                                "name": "offset",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "description": "date in format YYYY-MM-DD (or YYYY-MM-DDTHH:MM:SSZ) representing the lower limit of the datasets reference date to harvest. Must be used togheter end_date",
                                "in": "query",
                                "name": "start_date",
                                "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{0,6})?Z?)?$",
                                "required": false,
                                "type": "string",
                                "x-modifiers": [],
                                "x-regex": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{0,6})?Z?)?$"
                            },
                            {
                                "description": "date in format YYYY-MM-DD (or YYYY-MM-DDTHH:MM:SSZ) representing the upper limit of the datasets reference date to harvest. Must be used togheter start_date",
                                "in": "query",
                                "name": "end_date",
                                "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{0,6})?Z?)?$",
                                "required": false,
                                "type": "string",
                                "x-modifiers": [],
                                "x-regex": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{0,6})?Z?)?$"
                            },
                            {
                                "description": "JSON object with the AOI geometry",
                                "in": "body",
                                "name": "geometry",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/Geojson"
                                }
                            },
                            {
                                "description": "The text will search in the metadata_text field",
                                "in": "query",
                                "name": "metadata_info",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation",
                                "schema": {
                                    "$ref": "#/definitions/Pagination"
                                }
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - Catalogues"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_catalogues_controller"
                    }
                },
                "/catalogue/{datasetId}/querymetadata": {
                    "post": {
                        "description": "It returns the querables fields available for the dataset specified by {datasetid}.",
                        "operationId": "get_catalogue_metadata",
                        "parameters": [
                            {
                                "description": "ID of the dataset",
                                "in": "path",
                                "name": "datasetId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "description": "date in format YYYY-MM-DD (or YYYY-MM-DDTHH:MM:SSZ) representing the lower limit of the datasets reference date to harvest. Must be used togheter end_date",
                                "in": "query",
                                "name": "start_date",
                                "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{0,6})?Z?)?$",
                                "required": true,
                                "type": "string",
                                "x-modifiers": [],
                                "x-regex": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{0,6})?Z?)?$"
                            },
                            {
                                "description": "date in format YYYY-MM-DD (or YYYY-MM-DDTHH:MM:SSZ) representing the upper limit of the datasets reference date to harvest. Must be used togheter start_date",
                                "in": "query",
                                "name": "end_date",
                                "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{0,6})?Z?)?$",
                                "required": true,
                                "type": "string",
                                "x-modifiers": [],
                                "x-regex": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{0,6})?Z?)?$"
                            },
                            {
                                "description": "ID of the product",
                                "in": "query",
                                "name": "productId",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "default": 10,
                                "description": "The number of items to skip before starting to collect the result set. Default 10",
                                "in": "query",
                                "name": "limit",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "default": 0,
                                "description": "The number of items to skip before starting to collect the result set. Default 0",
                                "in": "query",
                                "maximum": 100,
                                "minimum": 0,
                                "name": "offset",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "description": "JSON object with the AOI geometry",
                                "in": "body",
                                "name": "geometry",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/Geojson"
                                }
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation",
                                "schema": {
                                    "$ref": "#/definitions/Pagination"
                                }
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - Catalogues"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_catalogues_controller"
                    }
                },
                "/catalogue/{datasetId}/querytemporal": {
                    "get": {
                        "description": "It returns the timestamp list for a specific datasetId and a time range",
                        "operationId": "get_temporal_bar",
                        "parameters": [
                            {
                                "description": "ID of the dataset",
                                "in": "path",
                                "name": "datasetId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "description": "The start date for the query. Format: YYYY-MM-DD. Must be used togheter endDate",
                                "in": "query",
                                "name": "startDate",
                                "pattern": "\\d{4}-[01]\\d-[0-3]\\d",
                                "required": true,
                                "type": "string",
                                "x-modifiers": [],
                                "x-regex": "\\\\d{4}-[01]\\\\d-[0-3]\\\\d"
                            },
                            {
                                "description": "The end date for the query. Format: YYYY-MM-DD. Must be used togheter endDate",
                                "in": "query",
                                "name": "endDate",
                                "pattern": "\\d{4}-[01]\\d-[0-3]\\d",
                                "required": true,
                                "type": "string",
                                "x-modifiers": [],
                                "x-regex": "\\\\d{4}-[01]\\\\d-[0-3]\\\\d"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - Catalogues"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_catalogues_controller"
                    }
                },
                "/catalogue/{syncId}/datasync": {
                    "put": {
                        "description": "This API synchronizes the catalogue. It starts products ingestion . Used by adapter to put information in the mongo catalogue",
                        "operationId": "catalogue_datasync_put",
                        "parameters": [
                            {
                                "description": "ID of the sync job",
                                "in": "path",
                                "name": "syncId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "description": "The response contains product list",
                                "in": "body",
                                "name": "queryJson",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/JsonList"
                                }
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - Catalogues"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_catalogues_controller"
                    }
                },
                "/dataorder": {
                    "get": {
                        "description": "Retrieve a list of orders",
                        "operationId": "dataorder_get",
                        "parameters": [
                            {
                                "description": "Filter orders by status",
                                "enum": [
                                    "running",
                                    "completed",
                                    "failed"
                                ],
                                "in": "query",
                                "name": "status",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "description": "Number of orders to show in a page. Default 10.",
                                "in": "query",
                                "name": "size",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "description": "Number of the page to be shown. Default 0.",
                                "in": "query",
                                "name": "page",
                                "required": false,
                                "type": "integer"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - dataorder"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_dataorder_controller"
                    },
                    "post": {
                        "description": "Submit an order",
                        "operationId": "dataorder_post",
                        "parameters": [
                            {
                                "description": "JSON object containing the job id and the url of the resources to order.",
                                "in": "body",
                                "name": "queryRequest",
                                "required": true,
                                "schema": {
                                    "$ref": "#/definitions/postDataorder"
                                }
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "429": {
                                "description": "Too Many Requests",
                                "schema": {
                                    "$ref": "#/definitions/error429"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - dataorder"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_dataorder_controller"
                    }
                },
                "/dataorder/download/{orderId}": {
                    "get": {
                        "description": "This endpoint can be used to download a specific data from the result set",
                        "operationId": "dataorder_get_download_id",
                        "parameters": [
                            {
                                "description": "ID of the order",
                                "in": "path",
                                "name": "orderId",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "responses": {
                            "302": {
                                "description": "Successful operation",
                                "headers": {
                                    "Location": {
                                        "type": "string"
                                    }
                                }
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "summary": "",
                        "tags": [
                            "HDA - dataorder"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_dataorder_controller"
                    }
                },
                "/dataorder/status/{orderId}": {
                    "get": {
                        "description": "Get order status",
                        "operationId": "dataorder_get_status_id",
                        "parameters": [
                            {
                                "description": "ID of the order",
                                "in": "path",
                                "name": "orderId",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - dataorder"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_dataorder_controller"
                    },
                    "put": {
                        "description": "Update the dataorder status",
                        "operationId": "dataorder_put_status_id",
                        "parameters": [
                            {
                                "description": "ID of the order",
                                "in": "path",
                                "name": "orderId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "description": "Url of the result",
                                "in": "body",
                                "name": "queryRequest",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/putDataorderStatusRequest"
                                }
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "summary": "ADAPTER ONLY",
                        "tags": [
                            "HDA - dataorder"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_dataorder_controller"
                    }
                },
                "/datarequest": {
                    "post": {
                        "description": "",
                        "operationId": "post_datarequest_v1_1",
                        "parameters": [
                            {
                                "description": "JSON object containing subsetting query details for the dataset.",
                                "in": "body",
                                "name": "queryRequest",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/postDatarequest"
                                }
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "429": {
                                "description": "Too Many Requests",
                                "schema": {
                                    "$ref": "#/definitions/error429"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - datarequest"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_datarequest_controller"
                    }
                },
                "/datarequest/jobs": {
                    "get": {
                        "description": "This returns JSON object containing all the jobs submitted by the user along with the job status and result array for each of the job",
                        "operationId": "datarequest_jobs_get",
                        "parameters": [
                            {
                                "description": "Filter jobs by status",
                                "enum": [
                                    "running",
                                    "completed",
                                    "failed",
                                    "timeout"
                                ],
                                "in": "query",
                                "name": "status",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "description": "Number of jobs to show in a page. Default 10.",
                                "in": "query",
                                "name": "size",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "description": "Number of the page to be shown. Default 0.",
                                "in": "query",
                                "name": "page",
                                "required": false,
                                "type": "integer"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - datarequest"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_datarequest_controller"
                    }
                },
                "/datarequest/jobs/{jobId}/result": {
                    "get": {
                        "description": "API endpoint provides pagination limiting the number of items per request. Parameters for page number and the number of results per page can be used to fetch only the necessary results. The page number are numbered from 0",
                        "operationId": "get_datarequest_job_result",
                        "parameters": [
                            {
                                "description": "ID of the job",
                                "in": "path",
                                "name": "jobId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "description": "Number of results to show in a page. Default 10",
                                "in": "query",
                                "name": "size",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "description": "Number of the page to be shown. Default 0",
                                "in": "query",
                                "name": "page",
                                "required": false,
                                "type": "integer"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - datarequest"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_datarequest_controller"
                    }
                },
                "/datarequest/searchjobs": {
                    "get": {
                        "description": "This endpoint return a filtered list of jobs",
                        "operationId": "datarequest_searchjobs_get",
                        "parameters": [
                            {
                                "description": "Filter jobs by status",
                                "enum": [
                                    "running",
                                    "completed",
                                    "failed",
                                    "timeout"
                                ],
                                "in": "query",
                                "name": "status",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "description": "Filter jobs by user",
                                "in": "query",
                                "name": "user",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "description": "Get all jobs created after the date specified with format YYYY-MM-DD",
                                "in": "query",
                                "name": "createdFrom",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "description": "Get all jobs created before the date specified with format YYYY-MM-DD",
                                "in": "query",
                                "name": "createdTo",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "description": "Filter jobs by datasetId",
                                "in": "query",
                                "name": "datasetId",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "description": "Number of jobs to show in a page. Default 10.",
                                "in": "query",
                                "name": "size",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "description": "Number of the page to be shown. Default 0.",
                                "in": "query",
                                "name": "page",
                                "required": false,
                                "type": "integer"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "HDA - datarequest"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_datarequest_controller"
                    }
                },
                "/datarequest/status/{jobId}": {
                    "get": {
                        "description": "The current status of the submitted job (started, running, completed, failed) can be obtained by using the API endpoint. If the job is successfully completed, the result is an array of strings of the form /datarequest/result/{jobId}. This string when appended to the broker address forms the URL to download the data",
                        "operationId": "get_datarequest_status_id",
                        "parameters": [
                            {
                                "description": "ID of the job",
                                "in": "path",
                                "name": "jobId",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - datarequest"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_datarequest_controller"
                    },
                    "put": {
                        "description": "Update the datarequest status",
                        "operationId": "put_datarequest_status_id",
                        "parameters": [
                            {
                                "description": "ID of the job",
                                "in": "path",
                                "name": "jobId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "description": "Urls of the results",
                                "in": "body",
                                "name": "queryRequest",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/putDatasetStatusRequest"
                                }
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "summary": "ADAPTER ONLY",
                        "tags": [
                            "HDA - datarequest"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_datarequest_controller"
                    }
                },
                "/datarequest/{jobId}": {
                    "delete": {
                        "description": "Delete the job specified in the {jobId}",
                        "operationId": "dataorder_delete",
                        "parameters": [
                            {
                                "description": "ID of the job",
                                "in": "path",
                                "name": "jobId",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - datarequest"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_datarequest_controller"
                    }
                },
                "/datasets": {
                    "get": {
                        "description": "Retrieve the datasets list.",
                        "operationId": "datasets_get",
                        "parameters": [
                            {
                                "description": "Search string",
                                "in": "query",
                                "name": "q",
                                "required": false,
                                "type": "string"
                            },
                            {
                                "description": "Number of datasets to show in a page. Default 10.",
                                "in": "query",
                                "name": "size",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "description": "Number of the page to be shown. Default 0.",
                                "in": "query",
                                "name": "page",
                                "required": false,
                                "type": "integer"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "summary": "",
                        "tags": [
                            "OPERATOR - datasets"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_datasets_controller"
                    },
                    "post": {
                        "description": "Add new dataset.",
                        "operationId": "datasets_post",
                        "parameters": [
                            {
                                "description": "JSON object containing the info about the new dataset.",
                                "in": "body",
                                "name": "queryRequest",
                                "required": true,
                                "schema": {
                                    "$ref": "#/definitions/datasetIdPayload"
                                }
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not Found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "OPERATOR - datasets"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_datasets_controller"
                    }
                },
                "/datasets/{datasetId}": {
                    "delete": {
                        "description": "Delete a dataset.",
                        "operationId": "datasets_delete_id",
                        "parameters": [
                            {
                                "description": "Dataset id",
                                "in": "path",
                                "name": "datasetId",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not Found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "OPERATOR - datasets"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_datasets_controller"
                    },
                    "get": {
                        "description": "Retrieve the dataset info.",
                        "operationId": "datasets_get_id",
                        "parameters": [
                            {
                                "description": "Dataset id",
                                "in": "path",
                                "name": "datasetId",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "404": {
                                "description": "Not Found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "summary": "",
                        "tags": [
                            "OPERATOR - datasets"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_datasets_controller"
                    },
                    "put": {
                        "description": "Update existing dataset.",
                        "operationId": "datasets_put_id",
                        "parameters": [
                            {
                                "description": "Dataset id",
                                "in": "path",
                                "name": "datasetId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "description": "JSON object containing the info about the dataset to update.",
                                "in": "body",
                                "name": "queryRequest",
                                "required": true,
                                "schema": {
                                    "$ref": "#/definitions/datasetBasePayload"
                                }
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not Found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "tags": [
                            "OPERATOR - datasets"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_datasets_controller"
                    }
                },
                "/datasets/{datasetId}/preview": {
                    "put": {
                        "consumes": [
                            "multipart/form-data"
                        ],
                        "description": "Update dataset preview image.",
                        "operationId": "datasets_put_id_preview",
                        "parameters": [
                            {
                                "description": "Dataset id",
                                "in": "path",
                                "name": "datasetId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "description": "Dataset preview image",
                                "in": "formData",
                                "name": "previewImage",
                                "required": true,
                                "type": "file",
                                "x-mimetype": [
                                    "image/jpeg",
                                    "image/png",
                                    "image/gif"
                                ]
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not Found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "415": {
                                "description": "Unsupported Media Type",
                                "schema": {
                                    "$ref": "#/definitions/error415"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "OPERATOR - datasets"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_datasets_controller"
                    }
                },
                "/gettoken": {
                    "get": {
                        "description": " Authenticate users via Basic HTTP and returns the access token",
                        "operationId": "get_accesstoken",
                        "parameters": [],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "basicAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "OPERATOR - authentication"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_authentication_controller"
                    }
                },
                "/querymetadata/{datasetId}": {
                    "get": {
                        "description": "This returns the parameters/metadata that are available for querying the dataset specified by {datasetid}. The response also includes the infromation if the user has accepted the Terms & Conditions of the dataset {datasetid}",
                        "operationId": "get_querymetadata",
                        "parameters": [
                            {
                                "description": "ID of the dataset",
                                "in": "path",
                                "name": "datasetId",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "tags": [
                            "HDA - querymetadata"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_querymetadata_controller"
                    }
                },
                "/termsaccepted": {
                    "get": {
                        "description": "This endpoint returns all the IDs of the different terms and conditions.",
                        "operationId": "termsaccepted_get",
                        "parameters": [],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - Terms and Conditions"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_terms_and_conditions_controller"
                    }
                },
                "/termsaccepted/{termId}": {
                    "delete": {
                        "description": "The request remove the acceptance of the Terms and Conditions",
                        "operationId": "termsaccepted_term_id_delete",
                        "parameters": [
                            {
                                "description": "ID of the terms",
                                "in": "path",
                                "name": "termId",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - Terms and Conditions"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_terms_and_conditions_controller"
                    },
                    "get": {
                        "description": "This endpoint returns boolean flag indicating if the user has accepted or not the Terms and Conditions of the {termId}.",
                        "operationId": "termsaccepted_term_id_get",
                        "parameters": [
                            {
                                "description": "ID of the terms",
                                "in": "path",
                                "name": "termId",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - Terms and Conditions"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_terms_and_conditions_controller"
                    },
                    "put": {
                        "description": "The request sets the acceptance of the Terms and Conditions of the {termId} to True, meaning user has accepted the conditions.",
                        "operationId": "termsaccepted_term_id_put",
                        "parameters": [
                            {
                                "description": "ID of the terms",
                                "in": "path",
                                "name": "termId",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - Terms and Conditions"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_terms_and_conditions_controller"
                    }
                },
                "/users": {
                    "get": {
                        "description": "Retrieve user list.",
                        "operationId": "get_users",
                        "parameters": [
                            {
                                "description": "Search string",
                                "in": "query",
                                "name": "q",
                                "required": false,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "OPERATOR - users"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_users_controller"
                    }
                },
                "/users/{userId}": {
                    "get": {
                        "description": "Retrieve details about user specified in {userId}.",
                        "operationId": "get_users_id",
                        "parameters": [
                            {
                                "description": "Username",
                                "in": "path",
                                "name": "userId",
                                "required": true,
                                "type": "string"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "OPERATOR - users"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_users_controller"
                    },
                    "put": {
                        "description": "Update role of the user specified in {userId}.",
                        "operationId": "put_users_id",
                        "parameters": [
                            {
                                "description": "Username",
                                "in": "path",
                                "name": "userId",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "description": "User role",
                                "enum": [
                                    "ADMIN",
                                    "STAFF",
                                    "REGISTERED"
                                ],
                                "in": "query",
                                "name": "role",
                                "required": true,
                                "type": "string"
                            },
                            {
                                "description": "User job request limit",
                                "in": "query",
                                "name": "requestQuota",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "description": "User order request limit",
                                "in": "query",
                                "name": "orderQuota",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "description": "User simultaneous jobs request limit",
                                "in": "query",
                                "name": "simultaneousQuota",
                                "required": false,
                                "type": "integer"
                            },
                            {
                                "description": "User jobs request time window",
                                "in": "query",
                                "name": "timeWindow",
                                "required": false,
                                "type": "integer"
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "ADMIN ONLY",
                        "tags": [
                            "OPERATOR - users"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.operator_users_controller"
                    }
                },
                "/v1.0/datarequest": {
                    "post": {
                        "description": "",
                        "operationId": "post_datarequest",
                        "parameters": [
                            {
                                "description": "JSON object containing subsetting query details for the dataset.",
                                "in": "body",
                                "name": "queryRequest",
                                "required": false,
                                "schema": {
                                    "$ref": "#/definitions/postDatarequest"
                                }
                            }
                        ],
                        "produces": [
                            "application/json"
                        ],
                        "responses": {
                            "200": {
                                "description": "Successful operation"
                            },
                            "400": {
                                "description": "Bad Request",
                                "schema": {
                                    "$ref": "#/definitions/error400"
                                }
                            },
                            "401": {
                                "description": "Unauthorized",
                                "schema": {
                                    "$ref": "#/definitions/error401"
                                }
                            },
                            "403": {
                                "description": "Forbidden",
                                "schema": {
                                    "$ref": "#/definitions/error403"
                                }
                            },
                            "404": {
                                "description": "Not found",
                                "schema": {
                                    "$ref": "#/definitions/error404"
                                }
                            },
                            "429": {
                                "description": "Too Many Requests",
                                "schema": {
                                    "$ref": "#/definitions/error429"
                                }
                            },
                            "500": {
                                "description": "Internal Server Error",
                                "schema": {
                                    "$ref": "#/definitions/error500"
                                }
                            }
                        },
                        "security": [
                            {
                                "bearerAuth": []
                            }
                        ],
                        "summary": "",
                        "tags": [
                            "HDA - datarequest"
                        ],
                        "x-swagger-router-controller": "swagger_server.controllers.hda_datarequest_controller"
                    }
                }
            },
            "schemes": [
                "https"
            ],
            "securityDefinitions": {
                "basicAuth": {
                    "type": "basic"
                },
                "bearerAuth": {
                    "in": "header",
                    "name": "Authorization",
                    "type": "apiKey"
                }
            },
            "swagger": "2.0",
            "tags": [
                {
                    "description": "Retrieve Token",
                    "name": "OPERATOR - authentication"
                },
                {
                    "description": "Adapters management",
                    "name": "OPERATOR - adapters"
                },
                {
                    "description": "Datasets management",
                    "name": "OPERATOR - datasets"
                },
                {
                    "description": "Users management",
                    "name": "OPERATOR - users"
                },
                {
                    "description": "Retrieve query parameters",
                    "name": "HDA - querymetadata"
                },
                {
                    "description": "Get Data",
                    "name": "HDA - datarequest"
                },
                {
                    "description": "Submit orders",
                    "name": "HDA - dataorder"
                },
                {
                    "description": "T&C management",
                    "name": "HDA - Terms and Conditions"
                },
                {
                    "description": "Distributed catalogue access",
                    "name": "HDA - Catalogues"
                }
            ]
        },
        "eea": {
            "openapi": "3.0.1",
            "info": {
                "title": "GeoNetwork 4.2.5 OpenAPI Documentation",
                "description": "This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.",
                "contact": {
                    "name": "GeoNetwork user mailing list",
                    "url": "https://sourceforge.net/p/geonetwork/mailman/geonetwork-users/",
                    "email": "geonetwork-users@lists.sourceforge.net"
                },
                "license": {
                    "name": "GPL 2.0",
                    "url": "http://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
                },
                "version": "4.2.5"
            },
            "externalDocs": {
                "description": "Learn how to access the catalog using the GeoNetwork REST API.",
                "url": "https://sdi.eea.europa.eu/catalogue/doc/api"
            },
            "servers": [
                {
                    "url": "{catalog}/{portal}/api",
                    "description": "My GeoNetwork",
                    "variables": {
                        "catalog": {
                            "description": "The GeoNetwork catalog to contact",
                            "enum": [
                                "https://sdi.eea.europa.eu/catalogue",
                                "../.."
                            ],
                            "default": "https://sdi.eea.europa.eu/catalogue"
                        },
                        "portal": {
                            "description": "The thematic portal",
                            "enum": [
                                "srv"
                            ],
                            "default": "srv"
                        }
                    }
                }
            ],
            "tags": [
                {
                    "name": "site",
                    "description": "Catalog operations"
                },
                {
                    "name": "standards",
                    "description": "Standard related operations"
                },
                {
                    "name": "mapservices",
                    "description": "Mapservices related operations"
                },
                {
                    "name": "harvesters",
                    "description": "Harvester operations"
                },
                {
                    "name": "selections",
                    "description": "Selection related operations"
                },
                {
                    "name": "tags",
                    "description": "Tags operations"
                },
                {
                    "name": "registries",
                    "description": "Registries related operations"
                },
                {
                    "name": "operations",
                    "description": "Privileges operations"
                },
                {
                    "name": "links",
                    "description": "Record link operations"
                },
                {
                    "name": "userfeedback",
                    "description": "User feedback"
                },
                {
                    "name": "pages",
                    "description": "Static pages inside GeoNetwork"
                },
                {
                    "name": "related",
                    "description": "Related records"
                },
                {
                    "name": "tools",
                    "description": "Utility operations"
                },
                {
                    "name": "formatters",
                    "description": "Formatter admin operations"
                },
                {
                    "name": "status",
                    "description": "Workflow status operations"
                },
                {
                    "name": "eealayoutupdate",
                    "description": "EEA Layout Update API"
                },
                {
                    "name": "languages",
                    "description": "Languages operations"
                },
                {
                    "name": "atom",
                    "description": "ATOM"
                },
                {
                    "name": "customstyle",
                    "description": "Functionalities for custom styling"
                },
                {
                    "name": "formatters",
                    "description": "Formatter operations"
                },
                {
                    "name": "search",
                    "description": "Proxy for ElasticSearch catalog search operations"
                },
                {
                    "name": "processes",
                    "description": "Processing operations"
                },
                {
                    "name": "groups",
                    "description": "Groups operations"
                },
                {
                    "name": "sources",
                    "description": "Source catalogue operations"
                },
                {
                    "name": "records",
                    "description": "Metadata record operations"
                },
                {
                    "name": "mapservers",
                    "description": "Mapservers related operations"
                },
                {
                    "name": "userselections",
                    "description": "User selections related operations"
                },
                {
                    "name": "logos",
                    "description": "Logos operations"
                },
                {
                    "name": "identifiers",
                    "description": "Identifiers operations"
                },
                {
                    "name": "me",
                    "description": "Me operations"
                },
                {
                    "name": "regions",
                    "description": "Regions operations"
                },
                {
                    "name": "usersearches",
                    "description": "User custom searches operations"
                },
                {
                    "name": "ui",
                    "description": "User interface configuration operations"
                },
                {
                    "name": "users",
                    "description": "User operations"
                }
            ],
            "paths": {
                "/customstyle": {
                    "get": {
                        "tags": [
                            "customstyle"
                        ],
                        "summary": "Get CssStyleSettings",
                        "description": "This returns a map with all Less variables.",
                        "operationId": "getCssStyle",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "customstyle"
                        ],
                        "summary": "Saves custom style variables.",
                        "description": "Saves custom style variables.",
                        "operationId": "saveCssStyle",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "string"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/standards/{schema}/codelists/{codelist}/details": {
                    "get": {
                        "tags": [
                            "standards"
                        ],
                        "summary": "Get codelist details",
                        "operationId": "getSchemaCodelistsWithDetails",
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "path",
                                "description": "Schema identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "iso19139"
                            },
                            {
                                "name": "codelist",
                                "in": "path",
                                "description": "Codelist element name or alias",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "parent",
                                "in": "query",
                                "description": "Parent name with namespace which may indicate a more precise label as defined in context attribute.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "displayIf",
                                "in": "query",
                                "description": "Display if condition as defined in the codelist.xml file. Allows to select a more precise codelist when more than one is defined for same name.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "xpath",
                                "in": "query",
                                "description": "XPath of the element to target which may indicate a more precise label as defined in context attribute.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "isoType",
                                "in": "query",
                                "description": "ISO type of the element to target which may indicate a more precise label as defined in context attribute. (Same as context. TODO: Deprecate ?)",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Codelist"
                                        }
                                    },
                                    "application/xml": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Codelist"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/groups/{groupIdentifier}": {
                    "get": {
                        "tags": [
                            "groups"
                        ],
                        "summary": "Get group",
                        "description": "Return the requested group details.",
                        "operationId": "getGroup",
                        "parameters": [
                            {
                                "name": "groupIdentifier",
                                "in": "path",
                                "description": "Group identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Group"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "groups"
                        ],
                        "summary": "Update a group",
                        "operationId": "updateGroup",
                        "parameters": [
                            {
                                "name": "groupIdentifier",
                                "in": "path",
                                "description": "Group identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Group"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "204": {
                                "description": "Group updated."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "groups"
                        ],
                        "summary": "Remove a group",
                        "description": "Remove a group by first removing sharing settings, link to users and finally reindex all affected records.",
                        "operationId": "deleteGroup",
                        "parameters": [
                            {
                                "name": "groupIdentifier",
                                "in": "path",
                                "description": "Group identifier.",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "force",
                                "in": "query",
                                "description": "Force removal even if records are assigned to that group.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "204": {
                                "description": "Group removed."
                            }
                        }
                    }
                },
                "/records/{testId}/validate/inspire": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Check the status of validation with the INSPIRE service.",
                        "description": "User MUST be able to edit the record to validate it. An INSPIRE endpoint must be configured in Settings. If the process is complete an object with status is returned. ",
                        "operationId": "checkValidation",
                        "parameters": [
                            {
                                "name": "testId",
                                "in": "path",
                                "description": "Test identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Report ready.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Report not ready.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            },
                            "404": {
                                "description": "Report id not found.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/i18n/db": {
                    "get": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "List translations for database description table",
                        "operationId": "getTranslations",
                        "parameters": [
                            {
                                "name": "type",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/pages/{language}/{pageId}": {
                    "get": {
                        "tags": [
                            "pages"
                        ],
                        "summary": "Return the page object details except the content",
                        "description": "<a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More info</a>",
                        "operationId": "getPage",
                        "parameters": [
                            {
                                "name": "language",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "pageId",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Page not found",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/PageProperties"
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Page found",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/PageProperties"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/PageProperties"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "pages"
                        ],
                        "summary": "Update a page",
                        "description": "<a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More info</a>",
                        "operationId": "updatePage",
                        "parameters": [
                            {
                                "name": "language",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "pageId",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/PageProperties"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            },
                            "200": {
                                "description": "Page changes saved"
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "pages"
                        ],
                        "summary": "Delete a page",
                        "description": "<a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More info</a>",
                        "operationId": "deletePage",
                        "parameters": [
                            {
                                "name": "language",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "pageId",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Page removed"
                            },
                            "404": {
                                "description": "Page not found"
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/harvesters/properties/{property}": {
                    "get": {
                        "tags": [
                            "harvesters"
                        ],
                        "summary": "Check if a harvester name or host already exist",
                        "operationId": "checkHarvesterPropertyExist",
                        "parameters": [
                            {
                                "name": "property",
                                "in": "path",
                                "description": "The harvester property to check",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "exist",
                                "in": "query",
                                "description": "The value to search",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string",
                                            "enum": [
                                                "100 CONTINUE",
                                                "101 SWITCHING_PROTOCOLS",
                                                "102 PROCESSING",
                                                "103 CHECKPOINT",
                                                "200 OK",
                                                "201 CREATED",
                                                "202 ACCEPTED",
                                                "203 NON_AUTHORITATIVE_INFORMATION",
                                                "204 NO_CONTENT",
                                                "205 RESET_CONTENT",
                                                "206 PARTIAL_CONTENT",
                                                "207 MULTI_STATUS",
                                                "208 ALREADY_REPORTED",
                                                "226 IM_USED",
                                                "300 MULTIPLE_CHOICES",
                                                "301 MOVED_PERMANENTLY",
                                                "302 FOUND",
                                                "302 MOVED_TEMPORARILY",
                                                "303 SEE_OTHER",
                                                "304 NOT_MODIFIED",
                                                "305 USE_PROXY",
                                                "307 TEMPORARY_REDIRECT",
                                                "308 PERMANENT_REDIRECT",
                                                "400 BAD_REQUEST",
                                                "401 UNAUTHORIZED",
                                                "402 PAYMENT_REQUIRED",
                                                "403 FORBIDDEN",
                                                "404 NOT_FOUND",
                                                "405 METHOD_NOT_ALLOWED",
                                                "406 NOT_ACCEPTABLE",
                                                "407 PROXY_AUTHENTICATION_REQUIRED",
                                                "408 REQUEST_TIMEOUT",
                                                "409 CONFLICT",
                                                "410 GONE",
                                                "411 LENGTH_REQUIRED",
                                                "412 PRECONDITION_FAILED",
                                                "413 PAYLOAD_TOO_LARGE",
                                                "413 REQUEST_ENTITY_TOO_LARGE",
                                                "414 URI_TOO_LONG",
                                                "414 REQUEST_URI_TOO_LONG",
                                                "415 UNSUPPORTED_MEDIA_TYPE",
                                                "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                                                "417 EXPECTATION_FAILED",
                                                "418 I_AM_A_TEAPOT",
                                                "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                                                "420 METHOD_FAILURE",
                                                "421 DESTINATION_LOCKED",
                                                "422 UNPROCESSABLE_ENTITY",
                                                "423 LOCKED",
                                                "424 FAILED_DEPENDENCY",
                                                "425 TOO_EARLY",
                                                "426 UPGRADE_REQUIRED",
                                                "428 PRECONDITION_REQUIRED",
                                                "429 TOO_MANY_REQUESTS",
                                                "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                                                "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                                                "500 INTERNAL_SERVER_ERROR",
                                                "501 NOT_IMPLEMENTED",
                                                "502 BAD_GATEWAY",
                                                "503 SERVICE_UNAVAILABLE",
                                                "504 GATEWAY_TIMEOUT",
                                                "505 HTTP_VERSION_NOT_SUPPORTED",
                                                "506 VARIANT_ALSO_NEGOTIATES",
                                                "507 INSUFFICIENT_STORAGE",
                                                "508 LOOP_DETECTED",
                                                "509 BANDWIDTH_LIMIT_EXCEEDED",
                                                "510 NOT_EXTENDED",
                                                "511 NETWORK_AUTHENTICATION_REQUIRED"
                                            ]
                                        }
                                    }
                                }
                            },
                            "404": {
                                "description": "A property with that value already exist.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string",
                                            "enum": [
                                                "100 CONTINUE",
                                                "101 SWITCHING_PROTOCOLS",
                                                "102 PROCESSING",
                                                "103 CHECKPOINT",
                                                "200 OK",
                                                "201 CREATED",
                                                "202 ACCEPTED",
                                                "203 NON_AUTHORITATIVE_INFORMATION",
                                                "204 NO_CONTENT",
                                                "205 RESET_CONTENT",
                                                "206 PARTIAL_CONTENT",
                                                "207 MULTI_STATUS",
                                                "208 ALREADY_REPORTED",
                                                "226 IM_USED",
                                                "300 MULTIPLE_CHOICES",
                                                "301 MOVED_PERMANENTLY",
                                                "302 FOUND",
                                                "302 MOVED_TEMPORARILY",
                                                "303 SEE_OTHER",
                                                "304 NOT_MODIFIED",
                                                "305 USE_PROXY",
                                                "307 TEMPORARY_REDIRECT",
                                                "308 PERMANENT_REDIRECT",
                                                "400 BAD_REQUEST",
                                                "401 UNAUTHORIZED",
                                                "402 PAYMENT_REQUIRED",
                                                "403 FORBIDDEN",
                                                "404 NOT_FOUND",
                                                "405 METHOD_NOT_ALLOWED",
                                                "406 NOT_ACCEPTABLE",
                                                "407 PROXY_AUTHENTICATION_REQUIRED",
                                                "408 REQUEST_TIMEOUT",
                                                "409 CONFLICT",
                                                "410 GONE",
                                                "411 LENGTH_REQUIRED",
                                                "412 PRECONDITION_FAILED",
                                                "413 PAYLOAD_TOO_LARGE",
                                                "413 REQUEST_ENTITY_TOO_LARGE",
                                                "414 URI_TOO_LONG",
                                                "414 REQUEST_URI_TOO_LONG",
                                                "415 UNSUPPORTED_MEDIA_TYPE",
                                                "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                                                "417 EXPECTATION_FAILED",
                                                "418 I_AM_A_TEAPOT",
                                                "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                                                "420 METHOD_FAILURE",
                                                "421 DESTINATION_LOCKED",
                                                "422 UNPROCESSABLE_ENTITY",
                                                "423 LOCKED",
                                                "424 FAILED_DEPENDENCY",
                                                "425 TOO_EARLY",
                                                "426 UPGRADE_REQUIRED",
                                                "428 PRECONDITION_REQUIRED",
                                                "429 TOO_MANY_REQUESTS",
                                                "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                                                "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                                                "500 INTERNAL_SERVER_ERROR",
                                                "501 NOT_IMPLEMENTED",
                                                "502 BAD_GATEWAY",
                                                "503 SERVICE_UNAVAILABLE",
                                                "504 GATEWAY_TIMEOUT",
                                                "505 HTTP_VERSION_NOT_SUPPORTED",
                                                "506 VARIANT_ALSO_NEGOTIATES",
                                                "507 INSUFFICIENT_STORAGE",
                                                "508 LOOP_DETECTED",
                                                "509 BANDWIDTH_LIMIT_EXCEEDED",
                                                "510 NOT_EXTENDED",
                                                "511 NETWORK_AUTHENTICATION_REQUIRED"
                                            ]
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Property does not exist.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string",
                                            "enum": [
                                                "100 CONTINUE",
                                                "101 SWITCHING_PROTOCOLS",
                                                "102 PROCESSING",
                                                "103 CHECKPOINT",
                                                "200 OK",
                                                "201 CREATED",
                                                "202 ACCEPTED",
                                                "203 NON_AUTHORITATIVE_INFORMATION",
                                                "204 NO_CONTENT",
                                                "205 RESET_CONTENT",
                                                "206 PARTIAL_CONTENT",
                                                "207 MULTI_STATUS",
                                                "208 ALREADY_REPORTED",
                                                "226 IM_USED",
                                                "300 MULTIPLE_CHOICES",
                                                "301 MOVED_PERMANENTLY",
                                                "302 FOUND",
                                                "302 MOVED_TEMPORARILY",
                                                "303 SEE_OTHER",
                                                "304 NOT_MODIFIED",
                                                "305 USE_PROXY",
                                                "307 TEMPORARY_REDIRECT",
                                                "308 PERMANENT_REDIRECT",
                                                "400 BAD_REQUEST",
                                                "401 UNAUTHORIZED",
                                                "402 PAYMENT_REQUIRED",
                                                "403 FORBIDDEN",
                                                "404 NOT_FOUND",
                                                "405 METHOD_NOT_ALLOWED",
                                                "406 NOT_ACCEPTABLE",
                                                "407 PROXY_AUTHENTICATION_REQUIRED",
                                                "408 REQUEST_TIMEOUT",
                                                "409 CONFLICT",
                                                "410 GONE",
                                                "411 LENGTH_REQUIRED",
                                                "412 PRECONDITION_FAILED",
                                                "413 PAYLOAD_TOO_LARGE",
                                                "413 REQUEST_ENTITY_TOO_LARGE",
                                                "414 URI_TOO_LONG",
                                                "414 REQUEST_URI_TOO_LONG",
                                                "415 UNSUPPORTED_MEDIA_TYPE",
                                                "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                                                "417 EXPECTATION_FAILED",
                                                "418 I_AM_A_TEAPOT",
                                                "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                                                "420 METHOD_FAILURE",
                                                "421 DESTINATION_LOCKED",
                                                "422 UNPROCESSABLE_ENTITY",
                                                "423 LOCKED",
                                                "424 FAILED_DEPENDENCY",
                                                "425 TOO_EARLY",
                                                "426 UPGRADE_REQUIRED",
                                                "428 PRECONDITION_REQUIRED",
                                                "429 TOO_MANY_REQUESTS",
                                                "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                                                "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                                                "500 INTERNAL_SERVER_ERROR",
                                                "501 NOT_IMPLEMENTED",
                                                "502 BAD_GATEWAY",
                                                "503 SERVICE_UNAVAILABLE",
                                                "504 GATEWAY_TIMEOUT",
                                                "505 HTTP_VERSION_NOT_SUPPORTED",
                                                "506 VARIANT_ALSO_NEGOTIATES",
                                                "507 INSUFFICIENT_STORAGE",
                                                "508 LOOP_DETECTED",
                                                "509 BANDWIDTH_LIMIT_EXCEEDED",
                                                "510 NOT_EXTENDED",
                                                "511 NETWORK_AUTHENTICATION_REQUIRED"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/user/actions/forgot-password": {
                    "put": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Send user password reminder by email",
                        "description": "An email is sent to the requested user with a link to reset his password. User MUST have an email to get the link. LDAP users will not be able to retrieve their password using this service.",
                        "operationId": "sendPasswordByEmail",
                        "parameters": [
                            {
                                "name": "username",
                                "in": "query",
                                "description": "The user name",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/registries/actions/entries/synchronize": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Preview updated matching entries in records",
                        "description": "Scan one or more records for element matching the XPath provided and then check if this element is available in the directory. If Found, the element from the directory update the element in the record and optionally text or attribute value properties are preserved using propertiesToCopy. Elements can be lost if not existing in the directory entry (eg. from an gex:Extent directory containing only description and bounding polygon, the update can remove temporal element).<br/><br/>The identifier XPath is used to find a match. An optional filtercan be added to restrict search to a subset of the directory. If no identifier XPaths is provided, the UUID is based on the content of the snippet (hash). It is recommended to use an identifier for better matching (eg. ISO19139 contact with different roles will not match on the automatic UUID mode).",
                        "operationId": "previewUpdatedRecordEntries",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "xpath",
                                "in": "query",
                                "description": "XPath of the elements to extract as entry.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": ".//gmd:CI_ResponsibleParty"
                            },
                            {
                                "name": "identifierXpath",
                                "in": "query",
                                "description": "XPath of the element identifier. If not defined a random UUID is generated and analysis will not check for duplicates.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "@uuid or .//gmd:electronicMailAddress/gco:CharacterString/text()"
                            },
                            {
                                "name": "propertiesToCopy",
                                "in": "query",
                                "description": "List of XPath of properties to copy from record to matching entry. Only support text or attribute eg. ./gmd:role/*/@codeListValue",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "example": "./gmd:role/*/@codeListValue"
                            },
                            {
                                "name": "substituteAsXLink",
                                "in": "query",
                                "description": "Replace entry by XLink.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "example": "@uuid"
                            },
                            {
                                "name": "fq",
                                "in": "query",
                                "description": "Filter query for directory search.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "groupPublished:IFREMER"
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Update matching entries in records",
                        "description": "Scan one or more records for element matching the XPath provided and then check if this element is available in the directory. If Found, the element from the directory update the element in the record and optionally text or attribute value properties are preserved using propertiesToCopy. Elements can be lost if not existing in the directory entry (eg. from an gex:Extent directory containing only description and bounding polygon, the update can remove temporal element).<br/><br/>The identifier XPath is used to find a match. An optional filtercan be added to restrict search to a subset of the directory. If no identifier XPaths is provided, the UUID is based on the content of the snippet (hash). It is recommended to use an identifier for better matching (eg. ISO19139 contact with different roles will not match on the automatic UUID mode).",
                        "operationId": "updateRecordEntries",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "xpath",
                                "in": "query",
                                "description": "XPath of the elements to extract as entry.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": ".//gmd:CI_ResponsibleParty"
                            },
                            {
                                "name": "identifierXpath",
                                "in": "query",
                                "description": "XPath of the element identifier. If not defined a random UUID is generated and analysis will not check for duplicates.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "@uuid"
                            },
                            {
                                "name": "propertiesToCopy",
                                "in": "query",
                                "description": "List of XPath of properties to copy from record to matching entry. Only support text or attribute eg. ./gmd:role/*/@codeListValue",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "example": "./gmd:role/*/@codeListValue"
                            },
                            {
                                "name": "substituteAsXLink",
                                "in": "query",
                                "description": "Replace entry by XLink.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "fq",
                                "in": "query",
                                "description": "Filter query for directory search.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "groupPublished:IFREMER"
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get catalog content as RDF. This endpoint supports the same Lucene query parameters as for the GUI search.",
                        "description": ".",
                        "operationId": "getAsRdf",
                        "parameters": [
                            {
                                "name": "from",
                                "in": "query",
                                "description": "Indicates the start position in a sorted list of matches that the client wants to use as the beginning of a page result.",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 1
                                }
                            },
                            {
                                "name": "hitsPerPage",
                                "in": "query",
                                "description": "Indicates the number of hits per page.",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "any",
                                "in": "query",
                                "description": "Search key",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "title",
                                "in": "query",
                                "description": "A search key for the title.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "facet.q",
                                "in": "query",
                                "description": "A search facet in the Lucene index. Use the GeoNetwork GUI search to generate the suitable filter values. Example: standard/dcat-ap&createDateYear/2018&sourceCatalog/6d93613e-2b76-4e26-94af-4b4c420a1758 (filter by creation year and source catalog).",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "sortBy",
                                "in": "query",
                                "description": "Lucene sortBy criteria. Relevant values: relevance, title, changeDate.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "sortOrder",
                                "in": "query",
                                "description": "Sort order. Possible values: reverse.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "similarity",
                                "in": "query",
                                "description": "Use the Lucene FuzzyQuery. Values range from 0.0 to 1.0 and defaults to 0.8.",
                                "schema": {
                                    "type": "number",
                                    "format": "float",
                                    "default": 0.8
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Return the catalog content as RDF."
                            },
                            "303": {
                                "description": "Redirect the client to the first in-sequence page resource. This happens when the paging parameters (from, hitsPerPage) are not included in the request."
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add a record",
                        "description": "Add one or more record from an XML fragment, URL or file in a folder on the catalog server. When loadingfrom the catalog server folder, it might be faster to use a local filesystem harvester.",
                        "operationId": "insert",
                        "parameters": [
                            {
                                "name": "metadataType",
                                "in": "query",
                                "description": "The type of record.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "METADATA",
                                        "TEMPLATE",
                                        "SUB_TEMPLATE",
                                        "TEMPLATE_OF_SUB_TEMPLATE"
                                    ],
                                    "default": "METADATA"
                                }
                            },
                            {
                                "name": "url",
                                "in": "query",
                                "description": "URL of a file to download and insert.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "serverFolder",
                                "in": "query",
                                "description": "Server folder where to look for files.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "recursiveSearch",
                                "in": "query",
                                "description": "(Server folder import only) Recursive search in folder.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "publishToAll",
                                "in": "query",
                                "description": "(XML file only and if workflow is not enabled) Publish record.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "assignToCatalog",
                                "in": "query",
                                "description": "(MEF file only) Assign to current catalog.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "uuidProcessing",
                                "in": "query",
                                "description": "Record identifier processing.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "GENERATEUUID",
                                        "NOTHING",
                                        "OVERWRITE"
                                    ],
                                    "default": "NOTHING"
                                }
                            },
                            {
                                "name": "group",
                                "in": "query",
                                "description": "The group the record is attached to.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "category",
                                "in": "query",
                                "description": "Tags to assign to the record.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "rejectIfInvalid",
                                "in": "query",
                                "description": "Validate the record first and reject it if not valid.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "transformWith",
                                "in": "query",
                                "description": "XSL transformation to apply to the record.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "_none_"
                                }
                            },
                            {
                                "name": "schema",
                                "in": "query",
                                "description": "Force the schema of the record. If not set, schema autodetection is used (and is the preferred method).",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "allowEditGroupMembers",
                                "in": "query",
                                "description": "Is editable by group members with editor profile? If not, only the author and administrator can edit the record.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "extra",
                                "in": "query",
                                "description": "(experimental) Add extra information to the record.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/xml": {
                                    "schema": {
                                        "type": "string",
                                        "description": "XML fragment."
                                    }
                                },
                                "application/json": {
                                    "schema": {
                                        "type": "string",
                                        "description": "XML fragment."
                                    }
                                },
                                "application/x-www-form-urlencoded": {
                                    "schema": {
                                        "type": "string",
                                        "description": "XML fragment."
                                    }
                                }
                            }
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Report about imported records.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add a record from XML or MEF/ZIP file",
                        "description": "Add record in the catalog by uploading files.",
                        "operationId": "insertFile",
                        "parameters": [
                            {
                                "name": "metadataType",
                                "in": "query",
                                "description": "The type of record.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "METADATA",
                                        "TEMPLATE",
                                        "SUB_TEMPLATE",
                                        "TEMPLATE_OF_SUB_TEMPLATE"
                                    ],
                                    "default": "METADATA"
                                }
                            },
                            {
                                "name": "file",
                                "in": "query",
                                "description": "XML or MEF file to upload",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            },
                            {
                                "name": "uuidProcessing",
                                "in": "query",
                                "description": "Record identifier processing.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "GENERATEUUID",
                                        "NOTHING",
                                        "OVERWRITE"
                                    ],
                                    "default": "NOTHING"
                                }
                            },
                            {
                                "name": "group",
                                "in": "query",
                                "description": "The group the record is attached to.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "category",
                                "in": "query",
                                "description": "Tags to assign to the record.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "rejectIfInvalid",
                                "in": "query",
                                "description": "Validate the record first and reject it if not valid.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "publishToAll",
                                "in": "query",
                                "description": "(XML file only) Publish record.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "assignToCatalog",
                                "in": "query",
                                "description": "(MEF file only) Assign to current catalog.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "transformWith",
                                "in": "query",
                                "description": "XSL transformation to apply to the record.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "_none_"
                                }
                            },
                            {
                                "name": "schema",
                                "in": "query",
                                "description": "Force the schema of the record. If not set, schema autodetection is used (and is the preferred method).",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "extra",
                                "in": "query",
                                "description": "(experimental) Add extra information to the record.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "allowEditGroupMembers",
                                "in": "query",
                                "description": "Is editable by group members with editor profile? If not, only the author and administrator can edit the record.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Report about imported records.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete one or more records",
                        "description": "User MUST be able to edit the record to delete it. ",
                        "operationId": "deleteRecords",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "withBackup",
                                "in": "query",
                                "description": "Backup first the record as MEF in the metadata removed folder.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "Report about deleted records.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/query": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "List saved queries for this metadata",
                        "operationId": "getSavedQueries",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Saved query available.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SavedQuery"
                                            }
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SavedQuery"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/pages/config/sections": {
                    "get": {
                        "tags": [
                            "pages"
                        ],
                        "operationId": "getPageSections",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Page found",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "enum": [
                                                    "TOP",
                                                    "FOOTER",
                                                    "MENU",
                                                    "SUBMENU",
                                                    "CUSTOM_MENU1",
                                                    "CUSTOM_MENU2",
                                                    "CUSTOM_MENU3"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/processes": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get suggestions",
                        "description": "Analyze the record an suggest processes to improve the quality of the record.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/workflow/batchupdate-xsl.html'>More info</a>",
                        "operationId": "getSuggestions",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SuggestionType"
                                            }
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Record suggestions.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SuggestionType"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/site/info/staging/{profile}": {
                    "put": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Update staging profile",
                        "description": "TODO: Needs doc",
                        "operationId": "updateStagingProfile",
                        "parameters": [
                            {
                                "name": "profile",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "testing",
                                        "development",
                                        "production"
                                    ]
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "204": {
                                "description": "Staging profile saved."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it."
                            }
                        }
                    }
                },
                "/users/{userIdentifier}": {
                    "get": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Get user",
                        "operationId": "getUser",
                        "parameters": [
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier.",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Update a user",
                        "description": "Updates a catalog user.",
                        "operationId": "updateUser",
                        "parameters": [
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier.",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/UserDto"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Delete a user",
                        "description": "Deletes a catalog user by identifier.",
                        "operationId": "deleteUser",
                        "parameters": [
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier.",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/site/logo": {
                    "put": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Set catalog logo",
                        "description": "Logos are stored in the data directory resources/images/harvesting as PNG or GIF images. When a logo is assigned to the catalog, a new image is created in images/logos/<catalogUuid>.png.",
                        "operationId": "setLogo",
                        "parameters": [
                            {
                                "name": "file",
                                "in": "query",
                                "description": "Logo to use for the catalog",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "asFavicon",
                                "in": "query",
                                "description": "Create favicon too",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "204": {
                                "description": "Logo set."
                            }
                        }
                    }
                },
                "/processes/reports": {
                    "get": {
                        "tags": [
                            "processes"
                        ],
                        "summary": "Get current process reports",
                        "description": "When processing, the report is stored in memory and allows to retrieve progress repport during processing. Usually, process reports are returned by the synchronous processing operation.",
                        "operationId": "getProcessReport",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "List of reports returned.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProcessingReport"
                                            }
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only authenticated user can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProcessingReport"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "processes"
                        ],
                        "summary": "Clear process reports list",
                        "operationId": "delete",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only authenticated user can access it."
                            },
                            "204": {
                                "description": "Report registry cleared."
                            }
                        }
                    }
                },
                "/users/owners": {
                    "get": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Get owners",
                        "description": "Return users who actually owns one or more records.",
                        "operationId": "getRecordOwners",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OwnerResponse"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Transfer privileges",
                        "operationId": "saveOwners",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/TransferRequest"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/processes/{process}": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Preview process result",
                        "description": "Process a metadata with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process.",
                        "operationId": "processRecordPreview",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "process",
                                "in": "path",
                                "description": "Process identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "A preview of the processed record.",
                                "content": {}
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {}
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Apply a process",
                        "description": "Process a metadata with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process.",
                        "operationId": "processRecord",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "process",
                                "in": "path",
                                "description": "Process identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "Record processed and saved.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/groups": {
                    "get": {
                        "tags": [
                            "groups"
                        ],
                        "summary": "Get groups",
                        "description": "The catalog contains one or more groups. By default, there is 3 reserved groups (Internet, Intranet, Guest) and a sample group.<br/>This service returns all catalog groups when not authenticated or when current is user is an administrator. The list can contains or not reserved groups depending on the parameters.<br/>When authenticated, return user groups optionally filtered on a specific user profile.",
                        "operationId": "getGroups",
                        "parameters": [
                            {
                                "name": "withReservedGroup",
                                "in": "query",
                                "description": "Including Internet, Intranet, Guest groups or not",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "profile",
                                "in": "query",
                                "description": "For a specific profile",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Group"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "groups"
                        ],
                        "summary": "Add a group",
                        "description": "Return the identifier of the group created.",
                        "operationId": "addGroup",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Group"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            },
                            "400": {
                                "description": "Group with that id or name already exist.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Group created.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/i18n/db/translations": {
                    "get": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "List database translations (used to overrides client application translations).",
                        "operationId": "getDbTranslations",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "{ < * >: string }"
                                        },
                                        "example": {
                                            "translationKey1": "Translated Key One",
                                            "translationKey2": "Translated Key Two",
                                            "translationKey3": "Translated Key Two"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Add or update all database translations.",
                        "operationId": "addTranslations",
                        "parameters": [
                            {
                                "name": "replace",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/Translations"
                                        }
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Remove all database translations.",
                        "operationId": "removeAllTranslations",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created"
                            }
                        }
                    }
                },
                "/records/validate": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Validate one or more records",
                        "description": "Update validation status for all records.",
                        "operationId": "validateRecords",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "approved",
                                "in": "query",
                                "description": "Use approved version or not",
                                "required": false,
                                "schema": {
                                    "type": "boolean"
                                },
                                "example": true
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Records validated.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Clear validation status of one or more records",
                        "operationId": "cleanValidationStatus",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Records validation status cleared.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/related": {
                    "get": {
                        "tags": [
                            "related"
                        ],
                        "summary": "Get record related resources for all requested metadatas",
                        "description": "Retrieve related services, datasets, onlines, thumbnails, sources, ... to all requested records.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'>More info</a>",
                        "operationId": "getAssociatedResourcesForRecords",
                        "parameters": [
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Type of related resource. If none, all resources are returned.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "children",
                                            "parent",
                                            "brothersAndSisters",
                                            "siblings",
                                            "associated",
                                            "services",
                                            "datasets",
                                            "fcats",
                                            "hasfeaturecats",
                                            "sources",
                                            "hassources",
                                            "related",
                                            "onlines",
                                            "thumbnails"
                                        ]
                                    },
                                    "default": []
                                }
                            },
                            {
                                "name": "uuid",
                                "in": "query",
                                "description": "Uuids of the metadatas you request the relations from.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "default": []
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Return the associated resources.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "$ref": "#/components/schemas/RelatedResponse"
                                            }
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "$ref": "#/components/schemas/RelatedResponse"
                                            }
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "$ref": "#/components/schemas/RelatedResponse"
                                            }
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "$ref": "#/components/schemas/RelatedResponse"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/usersearches/{searchIdentifier}": {
                    "get": {
                        "tags": [
                            "usersearches"
                        ],
                        "summary": "Get custom search",
                        "operationId": "getUserCustomSearch",
                        "parameters": [
                            {
                                "name": "searchIdentifier",
                                "in": "path",
                                "description": "User search identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/UserSearchDto"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "usersearches"
                        ],
                        "summary": "Update a user search",
                        "operationId": "updateCustomUserSearch",
                        "parameters": [
                            {
                                "name": "searchIdentifier",
                                "in": "path",
                                "description": "User search identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/UserSearchDto"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            },
                            "204": {
                                "description": "User search  updated."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "usersearches"
                        ],
                        "summary": "Delete a user search",
                        "description": "Deletes a user search by identifier.",
                        "operationId": "deleteUserCustomSerach",
                        "parameters": [
                            {
                                "name": "searchIdentifier",
                                "in": "path",
                                "description": "Search identifier.",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/duplicate": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Create a new record",
                        "description": "Create a record from a template or by copying an existing record.Return the UUID of the newly created record. Existing links in the source record are preserved, this means that the new record may contains link to the source attachments. They need to be manually updated after creation.",
                        "operationId": "create",
                        "parameters": [
                            {
                                "name": "metadataType",
                                "in": "query",
                                "description": "The type of record.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "METADATA",
                                        "TEMPLATE",
                                        "SUB_TEMPLATE",
                                        "TEMPLATE_OF_SUB_TEMPLATE"
                                    ],
                                    "default": "METADATA"
                                }
                            },
                            {
                                "name": "sourceUuid",
                                "in": "query",
                                "description": "UUID of the source record to copy.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "targetUuid",
                                "in": "query",
                                "description": "Assign a custom UUID. If this UUID already exist an error is returned. This is enabled only if metadata create / generate UUID settings is activated.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "group",
                                "in": "query",
                                "description": "The group the record is attached to.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "allowEditGroupMembers",
                                "in": "query",
                                "description": "Is editable by group members with editor profile? If not, only the author and administrator can edit the record.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "category",
                                "in": "query",
                                "description": "Tags to assign to the record.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "hasCategoryOfSource",
                                "in": "query",
                                "description": "Copy categories from source?",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "isChildOfSource",
                                "in": "query",
                                "description": "Is child of the record to copy?",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "hasAttachmentsOfSource",
                                "in": "query",
                                "description": "Copy attachments from source?",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Return the internal id of the newly created record.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/registries/vocabularies/{thesaurus}": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Download a thesaurus by name",
                        "description": "Download the thesaurus in SKOS format.",
                        "operationId": "getThesaurus",
                        "parameters": [
                            {
                                "name": "thesaurus",
                                "in": "path",
                                "description": "Thesaurus to download.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            },
                            "200": {
                                "description": "Thesaurus in SKOS format."
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Updates the information of a local thesaurus",
                        "description": "Updates the information of a local thesaurus.",
                        "operationId": "updateThesaurus",
                        "parameters": [
                            {
                                "name": "thesaurus",
                                "in": "path",
                                "description": "Thesaurus to update.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/ThesaurusInfo"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it."
                            },
                            "201": {
                                "description": "Thesaurus created."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Delete a thesaurus by name",
                        "description": "Delete a thesaurus.",
                        "operationId": "deleteThesaurus",
                        "parameters": [
                            {
                                "name": "thesaurus",
                                "in": "path",
                                "description": "Thesaurus to delete.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "200": {
                                "description": "Thesaurus deleted."
                            }
                        }
                    }
                },
                "/mapservers/{mapserverId}": {
                    "get": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Get a mapserver",
                        "operationId": "getMapserver",
                        "parameters": [
                            {
                                "name": "mapserverId",
                                "in": "path",
                                "description": "Mapserver identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/AnonymousMapserver"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/AnonymousMapserver"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Update a mapserver",
                        "operationId": "updateMapserver_1",
                        "parameters": [
                            {
                                "name": "mapserverId",
                                "in": "path",
                                "description": "Mapserver identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/MapServer"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            },
                            "204": {
                                "description": "Mapserver updated."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Remove a mapserver",
                        "operationId": "deleteMapserver",
                        "parameters": [
                            {
                                "name": "mapserverId",
                                "in": "path",
                                "description": "Mapserver identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            },
                            "204": {
                                "description": "Mapserver removed."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it."
                            }
                        }
                    }
                },
                "/tools/mail/test": {
                    "get": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Test mail configuration",
                        "description": "Send an email to the catalog feedback email.",
                        "operationId": "testMailConfiguration",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/editor/attributes": {
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete attribute",
                        "operationId": "deleteAttribute",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "ref",
                                "in": "query",
                                "description": "Reference of the attribute to remove.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "displayAttributes",
                                "in": "query",
                                "description": "Should attributes be shown on the editor snippet?",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "204": {
                                "description": "Attribute removed."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/userfeedback/{uuid}": {
                    "get": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Finds a specific user feedback",
                        "operationId": "getUserComment",
                        "parameters": [
                            {
                                "name": "uuid",
                                "in": "path",
                                "description": "User feedback UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/UserFeedbackDTO"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Removes a user feedback",
                        "description": "Removes a user feedback",
                        "operationId": "deleteUserFeedback",
                        "parameters": [
                            {
                                "name": "uuid",
                                "in": "path",
                                "description": "User feedback UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "204": {
                                "description": "User feedback removed.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/users": {
                    "get": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Get users",
                        "operationId": "getUsers",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Creates a user",
                        "description": "Creates a catalog user.",
                        "operationId": "createUser",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/UserDto"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/versions": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "(Experimental) Enable version control for one or more records",
                        "operationId": "enableVersionControlForRecords",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/site/info/notificationLevels": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get notification levels",
                        "operationId": "getNotificationLevel",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "List of notification levels.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "enum": [
                                                    "statusUserOwner",
                                                    "catalogueAdministrator",
                                                    "catalogueProfileAdministrator",
                                                    "catalogueProfileUserAdmin",
                                                    "catalogueProfileReviewer",
                                                    "catalogueProfileEditor",
                                                    "catalogueProfileRegisteredUser",
                                                    "catalogueProfileGuest",
                                                    "recordProfileReviewer",
                                                    "recordUserAuthor",
                                                    "recordGroupEmail"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/tags": {
                    "get": {
                        "tags": [
                            "tags"
                        ],
                        "summary": "Get tags",
                        "operationId": "getTags",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "List of tags.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MetadataCategory"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "tags"
                        ],
                        "summary": "Create a tag",
                        "description": "If labels are not defined, a default label is created with the category name for all languages.",
                        "operationId": "putTag",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/MetadataCategory"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Tag created. Return the new tag identifier.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/reports/datauploads": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get uploaded files to metadata records during a period.",
                        "operationId": "getReportDataUploads",
                        "parameters": [
                            {
                                "name": "dateFrom",
                                "in": "query",
                                "description": "From date of the metadata uploads",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "dateTo",
                                "in": "query",
                                "description": "To date of the metadata uploads",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "groups",
                                "in": "query",
                                "description": "Metadata group(s)",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/site/settings": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get settings",
                        "description": "Return public settings for anonymous users, internals are allowed for authenticated.",
                        "operationId": "getSettingsSet",
                        "parameters": [
                            {
                                "name": "set",
                                "in": "query",
                                "description": "Setting set. A common set of settings to retrieve.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "INSPIRE",
                                            "CSW",
                                            "HARVESTER",
                                            "USER_GROUP_ONLY",
                                            "AUTH",
                                            "READ_ONLY",
                                            "INDEX",
                                            "SYSTEMINFO",
                                            "STAGING_PROFILE",
                                            "TYPE"
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "key",
                                "in": "query",
                                "description": "Setting key",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Settings.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SettingsListResponse"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Save settings",
                        "operationId": "saveSettings",
                        "parameters": [
                            {
                                "name": "allRequestParams",
                                "in": "query",
                                "required": true,
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it."
                            },
                            "204": {
                                "description": "Settings saved."
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/attachments": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "List all metadata attachments",
                        "description": "<a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/using-filestore.html'>More info</a>",
                        "operationId": "getAllResources",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "43d7c186-2187-4bcd-8843-41e575a5ef56"
                            },
                            {
                                "name": "sort",
                                "in": "query",
                                "description": "Sort by",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "type",
                                        "name"
                                    ],
                                    "default": "name"
                                },
                                "example": "type"
                            },
                            {
                                "name": "approved",
                                "in": "query",
                                "description": "Use approved version or not",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                },
                                "example": true
                            },
                            {
                                "name": "filter",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "*.*"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Return the record attachments.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MetadataResource"
                                            }
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MetadataResource"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Create a new resource from a URL for a given metadata",
                        "operationId": "putResourceFromURL",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "43d7c186-2187-4bcd-8843-41e575a5ef56"
                            },
                            {
                                "name": "visibility",
                                "in": "query",
                                "description": "The sharing policy",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "public",
                                        "private"
                                    ],
                                    "default": "public"
                                },
                                "example": "public"
                            },
                            {
                                "name": "url",
                                "in": "query",
                                "description": "The URL to load in the store",
                                "required": true,
                                "schema": {
                                    "type": "string",
                                    "format": "url"
                                }
                            },
                            {
                                "name": "approved",
                                "in": "query",
                                "description": "Use approved version or not",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "example": true
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Attachment added.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataResource"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataResource"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Create a new resource for a given metadata",
                        "operationId": "putResource",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "43d7c186-2187-4bcd-8843-41e575a5ef56"
                            },
                            {
                                "name": "visibility",
                                "in": "query",
                                "description": "The sharing policy",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "public",
                                        "private"
                                    ],
                                    "default": "public"
                                },
                                "example": "public"
                            },
                            {
                                "name": "approved",
                                "in": "query",
                                "description": "Use approved version or not",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "example": true
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "required": [
                                            "file"
                                        ],
                                        "type": "object",
                                        "properties": {
                                            "file": {
                                                "type": "string",
                                                "description": "The file to upload",
                                                "format": "binary"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataResource"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Attachment uploaded.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataResource"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete all uploaded metadata resources",
                        "operationId": "delResources",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "43d7c186-2187-4bcd-8843-41e575a5ef56"
                            },
                            {
                                "name": "approved",
                                "in": "query",
                                "description": "Use approved version or not",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "example": true
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            },
                            "204": {
                                "description": "Attachment added."
                            }
                        }
                    }
                },
                "/userselections": {
                    "get": {
                        "tags": [
                            "userselections"
                        ],
                        "summary": "Get list of user selection sets",
                        "operationId": "getSelectionList",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Selection"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "userselections"
                        ],
                        "summary": "Add a user selection set",
                        "operationId": "createPersistentSelectionType",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Selection"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Selection created.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "400": {
                                "description": "A selection with that id or name already exist.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/approve": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Set the records status to approved",
                        "operationId": "approve",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/MetadataBatchApproveParameter"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Metadata approved .",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "400": {
                                "description": "Metadata workflow not enabled.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/publish": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Publish one or more records",
                        "description": "See record sharing for more details.",
                        "operationId": "publish",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Report about updated privileges.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/users/{userIdentifier}/groups": {
                    "get": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Retrieve user groups",
                        "description": "Retrieve the user groups.",
                        "operationId": "retrieveUserGroups",
                        "parameters": [
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier.",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserGroup"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/userfeedbackrating": {
                    "get": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Provides an average rating for a metadata record",
                        "operationId": "getMetadataRating",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Metadata record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/RatingAverage"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/tools/ogc/sld": {
                    "get": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Get the list of SLD available",
                        "operationId": "getSLD",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Generate a SLD with a new filter",
                        "description": "Get the currend SLD for the requested layers, add new filters in, save the SLD and return the new SLD URL.",
                        "operationId": "buildSLD",
                        "parameters": [
                            {
                                "name": "url",
                                "in": "query",
                                "description": "The WMS server URL",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "layers",
                                "in": "query",
                                "description": "The layers",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "filters",
                                "in": "query",
                                "description": "The filters in JSON",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Remove all SLD files",
                        "description": "Clean all SLD generated previously",
                        "operationId": "deteleSLD",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/robots.txt": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "robots.txt",
                        "operationId": "getRobotsText",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "robots.txt file for SEO.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/formatters/{schema}/{formatter}/files/{file}": {
                    "get": {
                        "tags": [
                            "formatters"
                        ],
                        "summary": "Get formatter file content",
                        "operationId": "getFormatterFileContent",
                        "parameters": [
                            {
                                "name": "formatter",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "schema",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "file",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "formatters"
                        ],
                        "summary": "Update formatter file",
                        "operationId": "updateFormatterFile",
                        "parameters": [
                            {
                                "name": "formatter",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "schema",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "file",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "data",
                                "in": "query",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created"
                            }
                        }
                    }
                },
                "/usersearches": {
                    "get": {
                        "tags": [
                            "usersearches"
                        ],
                        "summary": "Get user custom searches",
                        "operationId": "getUserCustomSearches",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserSearchDto"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "usersearches"
                        ],
                        "summary": "Creates a user search",
                        "description": "Creates a user search.",
                        "operationId": "createUserCustomSearch",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/UserSearchDto"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "User search created.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/regions/types": {
                    "get": {
                        "tags": [
                            "regions"
                        ],
                        "summary": "Get list of region types",
                        "operationId": "getRegionTypes",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "List of region types.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Category"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/me": {
                    "get": {
                        "tags": [
                            "me"
                        ],
                        "summary": "Get information about me",
                        "description": "If not authenticated, return status 204 (NO_CONTENT), else return basic user information. This operation is usually used to know if current user is authenticated or not.It returns also info about groups and profiles.",
                        "operationId": "getMe",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Authenticated. Return user details.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MeResponse"
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "Not authenticated.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MeResponse"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/ui/{uiIdentifier}": {
                    "get": {
                        "tags": [
                            "ui"
                        ],
                        "summary": "Get a UI configuration",
                        "operationId": "getUiConfiguration",
                        "parameters": [
                            {
                                "name": "uiIdentifier",
                                "in": "path",
                                "description": "UI identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "UI configuration.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/UiSetting"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "ui"
                        ],
                        "summary": "Update a UI configuration",
                        "operationId": "updateUiConfiguration",
                        "parameters": [
                            {
                                "name": "uiIdentifier",
                                "in": "path",
                                "description": "UI configuration identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/UiSetting"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "UI configuration updated.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "ui"
                        ],
                        "summary": "Remove a UI Configuration",
                        "operationId": "deleteUiConfiguration",
                        "parameters": [
                            {
                                "name": "uiIdentifier",
                                "in": "path",
                                "description": "UI configuration identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "UI Configuration removed.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "404": {
                                "description": "UI Configuration not found.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/alert": {
                    "post": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Send an email to catalogue administrator or record's contact",
                        "operationId": "sendEmailToContact",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Metadata record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "recaptcha",
                                "in": "query",
                                "description": "Recaptcha validation key.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "name",
                                "in": "query",
                                "description": "User name.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "org",
                                "in": "query",
                                "description": "User organisation.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "email",
                                "in": "query",
                                "description": "User email address.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "comments",
                                "in": "query",
                                "description": "A comment or question.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "phone",
                                "in": "query",
                                "description": "User phone number.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "subject",
                                "in": "query",
                                "description": "Email subject.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "User feedback"
                                }
                            },
                            {
                                "name": "function",
                                "in": "query",
                                "description": "User function.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "-"
                                }
                            },
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Comment type.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "-"
                                }
                            },
                            {
                                "name": "category",
                                "in": "query",
                                "description": "Comment category.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "-"
                                }
                            },
                            {
                                "name": "metadataEmail",
                                "in": "query",
                                "description": "List of record's contact to send this email (separated by comma).",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/registries/vocabularies/import/csv": {
                    "post": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Uploads a CSV file and convert it to SKOS format",
                        "description": "CSV file MUST contains columns at least for concept id and label. For multilingual thesaurus, consider using columns like label, label_fre, label_ita with languages parameter set to [en, fr, it]. Default language value is used if translations are empty. The thesaurus filename will be the filename of the CSV file (with .rdf extension). It is recommended to set the thesaurus title and namespace URL even if default values will be used based on the filename. Thesaurus dates are set to the date of import.",
                        "operationId": "importCsvAsThesaurus",
                        "parameters": [
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Local or external (default).",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "external",
                                        "local"
                                    ],
                                    "default": "external"
                                }
                            },
                            {
                                "name": "dir",
                                "in": "query",
                                "description": "Type of thesaurus, usually one of the ISO thesaurus type codelist value. Default is theme.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "theme"
                                }
                            },
                            {
                                "name": "encoding",
                                "in": "query",
                                "description": "Encoding. Default is UTF-8.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "UTF-8"
                                }
                            },
                            {
                                "name": "thesaurusNs",
                                "in": "query",
                                "description": "Thesaurus namespace. Default is filename.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "languages",
                                "in": "query",
                                "description": "Thesaurus languages",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "default": [
                                        "en"
                                    ]
                                }
                            },
                            {
                                "name": "thesaurusTitle",
                                "in": "query",
                                "description": "Thesaurus title. Default is filename.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "conceptIdColumn",
                                "in": "query",
                                "description": "Column name for concept id. Default is id.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "id"
                                }
                            },
                            {
                                "name": "conceptLabelColumn",
                                "in": "query",
                                "description": "Column name for concept label. Default is label.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "label"
                                }
                            },
                            {
                                "name": "conceptDescriptionColumn",
                                "in": "query",
                                "description": "Column name for concept description. Default is description.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "conceptBroaderIdColumn",
                                "in": "query",
                                "description": "Column name for broader concept id. Default is broader.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "broader"
                                }
                            },
                            {
                                "name": "conceptNarrowerIdColumn",
                                "in": "query",
                                "description": "Column name for narrower concept id. Default is narrower.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "narrower"
                                }
                            },
                            {
                                "name": "conceptRelatedIdColumn",
                                "in": "query",
                                "description": "Column name for related concept id. Default is related.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "related"
                                }
                            },
                            {
                                "name": "conceptLinkSeparator",
                                "in": "query",
                                "description": "Separator used when multiple broader/narrower/related ids are in the same column. Default is '|'.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "\\|"
                                }
                            },
                            {
                                "name": "importAsThesaurus",
                                "in": "query",
                                "description": "Import CSV file as thesaurus if true (default) or return it in  SKOS format.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "properties": {
                                            "file": {
                                                "type": "string",
                                                "description": "If set, do a file upload.",
                                                "format": "binary"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Thesaurus converted and imported in SKOS format."
                            },
                            "200": {
                                "description": "Thesaurus converted and returned in response in SKOS format."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it."
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/validate/inspire": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Submit a record to the INSPIRE service for validation.",
                        "description": "User MUST be able to edit the record to validate it. An INSPIRE endpoint must be configured in Settings. This activates an asyncronous process, this method does not return any report. This method returns an id to be used to get the report.",
                        "operationId": "validateRecordForInspire",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "testsuite",
                                "in": "query",
                                "description": "Test suite to run",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "mode",
                                "in": "query",
                                "description": "Define the encoding of the record to use. By default, ISO19139 are used as is and ISO19115-3 are converted to ISO19139.If mode = csw, a GetRecordById request is used.If mode = any portal id, then a GetRecordById request is used on this portal CSW entry point which may define custom CSW post processing. See https://github.com/geonetwork/core-geonetwork/pull/4493.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Metadata not found.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "500": {
                                "description": "Service unavailable.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Check status of the report.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/validate/internal": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Validate a record",
                        "description": "User MUST be able to edit the record to validate it. FIXME : id MUST be the id of the current metadata record in session ?",
                        "operationId": "validateRecord",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "isvalid",
                                "in": "query",
                                "description": "Validation status. Should be provided only in case of SUBTEMPLATE validation. If provided for another type, throw a BadParameter Exception",
                                "required": false,
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Validation report.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Reports"
                                        }
                                    },
                                    "application/xml": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Reports"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Reports"
                                        }
                                    },
                                    "application/xml": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Reports"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/registries/vocabularies/search": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Search keywords",
                        "operationId": "searchKeywords",
                        "parameters": [
                            {
                                "name": "q",
                                "in": "query",
                                "description": "Query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "lang",
                                "in": "query",
                                "description": "Query in that language",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "eng"
                                }
                            },
                            {
                                "name": "rows",
                                "in": "query",
                                "description": "Number of rows",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 1000
                                }
                            },
                            {
                                "name": "start",
                                "in": "query",
                                "description": "Start from",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 0
                                }
                            },
                            {
                                "name": "pLang",
                                "in": "query",
                                "description": "Return keyword information in one or more languages",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "thesaurus",
                                "in": "query",
                                "description": "Thesaurus identifier",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Type of search",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "STARTS_WITH",
                                        "CONTAINS",
                                        "MATCH"
                                    ],
                                    "default": "CONTAINS"
                                }
                            },
                            {
                                "name": "uri",
                                "in": "query",
                                "description": "URI query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "sort",
                                "in": "query",
                                "description": "Sort by",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "DESC"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    },
                                    "application/xml": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/mapservers/{mapserverId}/records/{metadataUuid}": {
                    "get": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Check metadata mapserver resource is published ",
                        "operationId": "getMapserverResource",
                        "parameters": [
                            {
                                "name": "mapserverId",
                                "in": "path",
                                "description": "Mapserver identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "resource",
                                "in": "query",
                                "description": "Resource name (could be a file or a db connection)",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "metadataTitle",
                                "in": "query",
                                "description": "Metadata title",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "metadataAbstract",
                                "in": "query",
                                "description": "Metadata abstract",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Publish a metadata resource in a mapserver",
                        "operationId": "publishMapserverResource",
                        "parameters": [
                            {
                                "name": "mapserverId",
                                "in": "path",
                                "description": "Mapserver identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "resource",
                                "in": "query",
                                "description": "Resource name (could be a file or a db connection)",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "metadataTitle",
                                "in": "query",
                                "description": "Metadata title",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "metadataAbstract",
                                "in": "query",
                                "description": "Metadata abstract",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Remove a metadata mapserver resource",
                        "operationId": "deleteMapserverResource",
                        "parameters": [
                            {
                                "name": "mapserverId",
                                "in": "path",
                                "description": "Mapserver identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "resource",
                                "in": "query",
                                "description": "Resource name (could be a file or a db connection)",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "metadataTitle",
                                "in": "query",
                                "description": "Metadata title",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "metadataAbstract",
                                "in": "query",
                                "description": "Metadata abstract",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/usersearches/featured": {
                    "get": {
                        "tags": [
                            "usersearches"
                        ],
                        "summary": "Get featured user custom searches",
                        "operationId": "getFeaturedUserCustomSearches",
                        "parameters": [
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Number of records to return",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "HOME",
                                        "EDITOR_BOARD"
                                    ]
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserSearchDto"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/tools/ogc/sld/{id}.{extension}": {
                    "get": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Download a SLD",
                        "operationId": "downloadSLD",
                        "parameters": [
                            {
                                "name": "id",
                                "in": "path",
                                "description": "The SLD identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "extension",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/users/{userIdentifier}/actions/forget-password": {
                    "post": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Resets user password",
                        "description": "Resets the user password.",
                        "operationId": "resetUserPassword",
                        "parameters": [
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier.",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/PasswordResetDto"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/site/index/status": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Index status",
                        "operationId": "indexStatus",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Status"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/sources/{sourceIdentifier}": {
                    "put": {
                        "tags": [
                            "sources"
                        ],
                        "summary": "Update a source",
                        "operationId": "updateSource",
                        "parameters": [
                            {
                                "name": "sourceIdentifier",
                                "in": "path",
                                "description": "Source identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Source"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Source not found.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "Source updated.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "sources"
                        ],
                        "summary": "Remove a source",
                        "operationId": "deleteSource",
                        "parameters": [
                            {
                                "name": "sourceIdentifier",
                                "in": "path",
                                "description": "Source identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Source deleted.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/sharing": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get record sharing settings",
                        "description": "Return current sharing options for a record.",
                        "operationId": "getRecordSharingSettings",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "The record sharing settings.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SharingResponse"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SharingResponse"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Set record sharing",
                        "description": "Privileges are assigned by group. User needs to be able to edit a record to set sharing settings. For reserved group (ie. Internet, Intranet & Guest), user MUST be reviewer of one group. For other group, if Only set privileges to user's groups is set in catalog configuration user MUST be a member of the group.<br/>Clear first allows to unset all operations first before setting the new ones.Clear option does not remove reserved groups operation if user is not an administrator, a reviewer or the owner of the record.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/publishing/managing-privileges.html'>More info</a>",
                        "operationId": "share",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/SharingParameter"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            },
                            "204": {
                                "description": "Settings updated."
                            }
                        }
                    }
                },
                "/registries/vocabularies/import/spatial": {
                    "post": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Create thesaurus from Shapefile",
                        "operationId": "importSpatial",
                        "parameters": [
                            {
                                "name": "uuidAttribute",
                                "in": "query",
                                "description": "Attribute to use for UUID. If none, random UUID are generated.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "uuidPattern",
                                "in": "query",
                                "description": "Pattern to build UUID from. Default is '{{uuid}}'.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "{{uuid}}"
                                }
                            },
                            {
                                "name": "descriptionAttribute",
                                "in": "query",
                                "description": "Attribute to use for extent description. If none, no extent description defined. TODO: Add per language desc ?",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "geomProjectionTo",
                                "in": "query",
                                "description": "geomProjectionTo",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "lenient",
                                "in": "query",
                                "description": "lenient",
                                "required": false,
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            {
                                "name": "charset",
                                "in": "query",
                                "description": "Attribute table charset",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "onlyBoundingBox",
                                "in": "query",
                                "description": "Create only bounding box for each spatial objects.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Local or external (default).",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "external",
                                        "local"
                                    ],
                                    "default": "external"
                                }
                            },
                            {
                                "name": "dir",
                                "in": "query",
                                "description": "Type of thesaurus, usually one of the ISO thesaurus type codelist value. Default is theme.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "place"
                                }
                            },
                            {
                                "name": "thesaurusNs",
                                "in": "query",
                                "description": "Thesaurus namespace. Default is filename.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "languages",
                                "in": "query",
                                "description": "Thesaurus languages",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "default": [
                                        "en"
                                    ]
                                }
                            },
                            {
                                "name": "thesaurusTitle",
                                "in": "query",
                                "description": "Thesaurus title. Default is filename.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "importAsThesaurus",
                                "in": "query",
                                "description": "Import Shapefile file as thesaurus if true (default) or return it in SKOS format.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "multipart/form-data": {
                                    "schema": {
                                        "required": [
                                            "file"
                                        ],
                                        "type": "object",
                                        "properties": {
                                            "file": {
                                                "type": "string",
                                                "description": "The ZIP file to upload containing the Shapefile.",
                                                "format": "binary"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Thesaurus created."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it."
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/doi": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Submit a record to the Datacite metadata store in order to create a DOI.",
                        "operationId": "createDoi",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Metadata not found.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            },
                            "500": {
                                "description": "Service unavailable.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Check status of the report.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Remove a DOI (this is not recommended, DOI are supposed to be persistent once created. This is mainly here for testing).",
                        "operationId": "unregisterDoi",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Metadata or DOI not found.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "DOI unregistered.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "500": {
                                "description": "Service unavailable.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/links/analyzeurl": {
                    "post": {
                        "tags": [
                            "links"
                        ],
                        "summary": "Analyze one or more links",
                        "operationId": "analyzeLinks",
                        "parameters": [
                            {
                                "name": "url",
                                "in": "query",
                                "description": "URL",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created"
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/editor": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Edit a record",
                        "description": "Return HTML form for editing.",
                        "operationId": "startEditing",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "currTab",
                                "in": "query",
                                "description": "Tab",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "withAttributes",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "The editor form."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Save edits",
                        "description": "Save the HTML form content.",
                        "operationId": "saveEdits",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "tab",
                                "in": "query",
                                "description": "Tab",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "simple"
                                }
                            },
                            {
                                "name": "withAttributes",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "withValidationErrors",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "minor",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "status",
                                "in": "query",
                                "description": "Submit for review directly after save.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "1"
                                }
                            },
                            {
                                "name": "commit",
                                "in": "query",
                                "description": "Save current edits.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "terminate",
                                "in": "query",
                                "description": "Save and terminate session.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "data",
                                "in": "query",
                                "description": "Record as XML. TODO: rename xml",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "The editor form."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Cancel edits",
                        "description": "Cancel current editing session.",
                        "operationId": "cancelEdits",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            },
                            "204": {
                                "description": "Editing session cancelled."
                            }
                        }
                    }
                },
                "/userfeedback/ratingcriteria": {
                    "get": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Get list of rating criteria",
                        "operationId": "getRatingCriteria",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RatingCriteria"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/operations": {
                    "get": {
                        "tags": [
                            "operations"
                        ],
                        "summary": "Get operations",
                        "description": "Return the list of operations. Operations are used to define authorization per group. Extending the list of default operations (ie. view, dynamic, download, editing, notify, featured) might be feasible but is experimental.<br/> Featured is not really used anymore (was used in past version for home page highlights).",
                        "operationId": "getOperations",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Operation"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/extents.json": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get list of record extents",
                        "description": "A rendering of the geometry as a png. If no background is specified the image will be transparent. In getMap the envelope of the geometry is calculated then it is expanded by a factor.  That factor is the size of the map.  This allows the map to be slightly bigger than the geometry allowing some context to be shown. This parameter allows different factors to be chosen per scale level.\nProportion is the proportion of the world that the geometry covers (bounds of WGS84)/(bounds of geometry in WGS84)\n\nNamed backgrounds allow the background parameter to be a simple key and the complete URL will be looked up from this list of named backgrounds\n",
                        "operationId": "getAllRecordExtentAsJson",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ExtentDto"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/formatters": {
                    "get": {
                        "tags": [
                            "formatters"
                        ],
                        "summary": "Get formatters",
                        "operationId": "listFormatters",
                        "parameters": [
                            {
                                "name": "id",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "uuid",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "schema",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "all"
                                }
                            },
                            {
                                "name": "pluginOnly",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "publishedOnly",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/FormatterDataResponse"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "formatters"
                        ],
                        "summary": "Import a XSLT formatter (usually a zip named 'schema-formatter.zip')",
                        "operationId": "addFormatter",
                        "parameters": [
                            {
                                "name": "file",
                                "in": "query",
                                "required": true,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created"
                            }
                        }
                    }
                },
                "/site/info": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get site informations",
                        "operationId": "getInformation",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Site information.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SiteInformation"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/links/csv": {
                    "get": {
                        "tags": [
                            "links"
                        ],
                        "description": "Get record links as CSV",
                        "operationId": "getRecordLinksAsCsv",
                        "parameters": [
                            {
                                "name": "filter",
                                "in": "query",
                                "description": "Filter, e.g. \"{url: 'png', lastState: 'ko', records: 'e421', groupId: 12}\", lastState being 'ok'/'ko'/'unknown'",
                                "required": false,
                                "schema": {
                                    "$ref": "#/components/schemas/JSONObject"
                                }
                            },
                            {
                                "name": "groupIdFilter",
                                "in": "query",
                                "description": "Optional, filter links to records published in that group.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            },
                            {
                                "name": "groupOwnerIdFilter",
                                "in": "query",
                                "description": "Optional, filter links to records created in that group.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            },
                            {
                                "name": "page",
                                "in": "query",
                                "description": "Results page you want to retrieve (0..N)",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "size",
                                "in": "query",
                                "description": "Number of records per page.",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "sort",
                                "in": "query",
                                "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. ",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/userselections/{selectionIdentifier}": {
                    "put": {
                        "tags": [
                            "userselections"
                        ],
                        "summary": "Update a user selection set",
                        "operationId": "updateUserSelection",
                        "parameters": [
                            {
                                "name": "selectionIdentifier",
                                "in": "path",
                                "description": "Selection identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Selection"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "404": {
                                "description": "Selection not found.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "Selection updated.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "userselections"
                        ],
                        "summary": "Remove a user selection set",
                        "operationId": "deleteUserSelection",
                        "parameters": [
                            {
                                "name": "selectionIdentifier",
                                "in": "path",
                                "description": "Selection identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "404": {
                                "description": "Selection not found.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "Selection removed.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/processes/{process}": {
                    "get": {
                        "tags": [
                            "processes"
                        ],
                        "summary": "Preview process result applied to one or more records",
                        "description": "Preview result of a process applied to metadata records with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process. Append mode has 2 limitations. First, it only support a set of records in the same schema. Secondly, it does not propagate URL parameters. This mode is mainly used to create custom reports based on metadata records content.If process name ends with '.csv', the XSL process output a text document which is returned. When errors occur during processing, the processing report is returned in JSON format.",
                        "operationId": "previewProcessRecords",
                        "parameters": [
                            {
                                "name": "process",
                                "in": "path",
                                "description": "Process identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "diffType",
                                "in": "query",
                                "description": "Return differences with diff, diffhtml or patch",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "patch",
                                        "diff",
                                        "diffhtml"
                                    ]
                                }
                            },
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "appendFirst",
                                "in": "query",
                                "description": "Append documents before processing",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "example": false
                            },
                            {
                                "name": "applyUpdateFixedInfo",
                                "in": "query",
                                "description": "Apply update fixed info",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                },
                                "example": false
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Processed records.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "processes"
                        ],
                        "summary": "Apply a process to one or more records",
                        "description": "Process a metadata with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process.",
                        "operationId": "processRecords",
                        "parameters": [
                            {
                                "name": "process",
                                "in": "path",
                                "description": "Process identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "updateDateStamp",
                                "in": "query",
                                "description": "If true updates the DateStamp (or equivalent in standards different to ISO 19139) field in the metadata with the current timestamp",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "index",
                                "in": "query",
                                "description": "Index after processing",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                },
                                "example": false
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/XsltMetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Report about processed records.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/XsltMetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/isolanguages": {
                    "get": {
                        "tags": [
                            "languages"
                        ],
                        "summary": "Get ISO languages",
                        "description": "ISO languages provides a list of all languages (eg. used for autocompletion in metadata editor).",
                        "operationId": "getIsoLanguages",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/IsoLanguage"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/reports/metadatainternal": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get the metadata not published during a period.",
                        "operationId": "getReportInternalMetadata",
                        "parameters": [
                            {
                                "name": "dateFrom",
                                "in": "query",
                                "description": "From date of metadata change date",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "dateTo",
                                "in": "query",
                                "description": "To date of metadata change date",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "groups",
                                "in": "query",
                                "description": "Metadata group(s)",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Metadata not published during a period."
                            }
                        }
                    }
                },
                "/records/tags": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add or remove tags to one or more records",
                        "operationId": "tagRecords",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "id",
                                "in": "query",
                                "description": "Tag identifier",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            },
                            {
                                "name": "removeId",
                                "in": "query",
                                "description": "Tag identifier to remove.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            },
                            {
                                "name": "clear",
                                "in": "query",
                                "description": "Clear all before adding new ones",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Report about updated records.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete tags to one or more records",
                        "operationId": "deleteTagForRecords",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "id",
                                "in": "query",
                                "description": "Tag identifier",
                                "required": true,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Report about removed records.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/attachments/print-thumbnail": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Create an overview using the map print module",
                        "description": "<a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/linking-thumbnail.html#generating-a-thumbnail-using-wms-layers'>More info</a>",
                        "operationId": "saveThumbnail",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "jsonConfig",
                                "in": "query",
                                "description": "The mapprint module JSON configuration",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "rotationAngle",
                                "in": "query",
                                "description": "The rotation angle of the map",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 0
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Thumbnail created.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataResource"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataResource"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/links/analyze": {
                    "post": {
                        "tags": [
                            "links"
                        ],
                        "summary": "Analyze records links",
                        "description": "One of uuids or bucket parameter is required if not an Administrator. Only records that you can edit will be validated.",
                        "operationId": "analyzeRecordLinks",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "removeFirst",
                                "in": "query",
                                "description": "Only allowed if Administrator.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "analyze",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/site/info/transforms": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get XSL tranformations available",
                        "description": "XSL transformations may be applied while importing or harvesting records.",
                        "operationId": "getXslTransformations",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "XSLT available.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/atom/feeds": {
                    "get": {
                        "tags": [
                            "atom"
                        ],
                        "summary": "Get ATOM feeds",
                        "operationId": "feedsAsHtml_1",
                        "parameters": [
                            {
                                "name": "fileIdentifier",
                                "in": "query",
                                "description": "fileIdentifier",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Get a list of feeds.",
                                "content": {
                                    "text/html": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "Not authenticated.",
                                "content": {
                                    "text/html": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/eealayoutupdate/footer": {
                    "get": {
                        "tags": [
                            "eealayoutupdate"
                        ],
                        "summary": "Get EEA footer html",
                        "operationId": "getFooter",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/xhtml+xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/versions": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "(Experimental) Enable version control",
                        "operationId": "enableVersionControl",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/user/{username}": {
                    "patch": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Update user password",
                        "description": "Get a valid changekey by email first and then update your password.",
                        "operationId": "updatePassword",
                        "parameters": [
                            {
                                "name": "username",
                                "in": "path",
                                "description": "The user name",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/PasswordUpdateParameter"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/registries/vocabularies": {
                    "put": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Uploads a new thesaurus from URL or Registry",
                        "description": "Uploads a new thesaurus.",
                        "operationId": "uploadThesaurusFromUrl",
                        "parameters": [
                            {
                                "name": "url",
                                "in": "query",
                                "description": "If set, try to download from the Internet.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "registryUrl",
                                "in": "query",
                                "description": "If set, try to download from a registry.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "registryType",
                                "in": "query",
                                "description": "If using registryUrl, then define the type of registry. If not set, default mode is re3gistry.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "re3gistry",
                                        "ldRegistry"
                                    ]
                                }
                            },
                            {
                                "name": "registryLanguage",
                                "in": "query",
                                "description": "Languages to download from a registry.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Local or external (default).",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "external",
                                        "local"
                                    ],
                                    "default": "external"
                                }
                            },
                            {
                                "name": "dir",
                                "in": "query",
                                "description": "Type of thesaurus, usually one of the ISO thesaurus type codelist value. Default is theme.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "theme"
                                }
                            },
                            {
                                "name": "stylesheet",
                                "in": "query",
                                "description": "XSL to be use to convert the thesaurus before load. Default _none_.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "_none_"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/ThesaurusInfo"
                                    }
                                }
                            }
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Thesaurus uploaded in SKOS format.",
                                "content": {
                                    "text/xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it.",
                                "content": {
                                    "text/xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Uploads a new thesaurus from a file",
                        "description": "Uploads a new thesaurus.",
                        "operationId": "uploadThesaurus",
                        "parameters": [
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Local or external (default).",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "external",
                                        "local"
                                    ],
                                    "default": "external"
                                }
                            },
                            {
                                "name": "dir",
                                "in": "query",
                                "description": "Type of thesaurus, usually one of the ISO thesaurus type codelist value. Default is theme.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "theme"
                                }
                            },
                            {
                                "name": "stylesheet",
                                "in": "query",
                                "description": "XSL to be use to convert the thesaurus before load. Default _none_.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "_none_"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "properties": {
                                            "file": {
                                                "type": "string",
                                                "description": "If set, do a file upload.",
                                                "format": "binary"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Thesaurus uploaded in SKOS format.",
                                "content": {
                                    "text/xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it.",
                                "content": {
                                    "text/xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/standards/{schema}/codelists": {
                    "get": {
                        "tags": [
                            "standards"
                        ],
                        "summary": "Get multiple codelist translations",
                        "description": "All translations are combined in the same object. No distinction by codelist. This is useful if you need lots of codelists terms to be loaded.",
                        "operationId": "getCodelistsTranslations",
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "path",
                                "description": "Schema identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "iso19139"
                            },
                            {
                                "name": "codelist",
                                "in": "query",
                                "description": "Codelist element name or alias",
                                "required": true,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/usersearches/allpaginated": {
                    "get": {
                        "tags": [
                            "usersearches"
                        ],
                        "summary": "Get user custom searches for all users (paginated)",
                        "operationId": "getAllUserCustomSearchesPage",
                        "parameters": [
                            {
                                "name": "featuredType",
                                "in": "query",
                                "description": "Featured  type search.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "HOME",
                                        "EDITOR_BOARD"
                                    ]
                                }
                            },
                            {
                                "name": "search",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "offset",
                                "in": "query",
                                "description": "From page",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 0
                                }
                            },
                            {
                                "name": "limit",
                                "in": "query",
                                "description": "Number of records to return",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 10
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/PaginatedUserSearchResponse"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/backups": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Trigger MEF backup archive",
                        "description": "The backup contains all metadata not harvested including templates.",
                        "operationId": "trigger",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Return succeed message.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/pages": {
                    "get": {
                        "tags": [
                            "pages"
                        ],
                        "summary": "List all pages according to the filters",
                        "description": "<a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More info</a>",
                        "operationId": "listPages",
                        "parameters": [
                            {
                                "name": "language",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "section",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "TOP",
                                        "FOOTER",
                                        "MENU",
                                        "SUBMENU",
                                        "CUSTOM_MENU1",
                                        "CUSTOM_MENU2",
                                        "CUSTOM_MENU3"
                                    ]
                                }
                            },
                            {
                                "name": "format",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "LINK",
                                        "HTML",
                                        "HTMLPAGE",
                                        "TEXT"
                                    ]
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PageProperties"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "pages"
                        ],
                        "summary": "Add a page",
                        "description": "<p>Is not possible to load a link and a file at the same time.</p> <a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More info</a>",
                        "operationId": "addPageWithoutUploadingFile",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/PageProperties"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "500": {
                                "description": "File not valid",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "400": {
                                "description": "Wrong parameters are provided",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Page saved",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "409": {
                                "description": "Page already in the system: use PUT",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "pages"
                        ],
                        "summary": "Add a page by uploading a file",
                        "description": "<p>Is not possible to load a link and a file at the same time.</p> <a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More info</a>",
                        "operationId": "addPageUploadingFile",
                        "parameters": [
                            {
                                "name": "language",
                                "in": "query",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "pageId",
                                "in": "query",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "sections",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "TOP",
                                            "FOOTER",
                                            "MENU",
                                            "SUBMENU",
                                            "CUSTOM_MENU1",
                                            "CUSTOM_MENU2",
                                            "CUSTOM_MENU3"
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "status",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "PUBLIC",
                                        "PUBLIC_ONLY",
                                        "PRIVATE",
                                        "HIDDEN"
                                    ]
                                }
                            },
                            {
                                "name": "format",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "LINK",
                                        "HTML",
                                        "HTMLPAGE",
                                        "TEXT"
                                    ]
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "multipart/form-data": {
                                    "schema": {
                                        "required": [
                                            "data"
                                        ],
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "type": "string",
                                                "format": "binary"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "500": {
                                "description": "File not valid",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "400": {
                                "description": "Wrong parameters are provided",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Page saved",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "409": {
                                "description": "Page already in the system: use PUT",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/ownership": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Set group and owner for one or more records",
                        "operationId": "setGroupAndOwner",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "groupIdentifier",
                                "in": "query",
                                "description": "Group identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "userIdentifier",
                                "in": "query",
                                "description": "User identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "approved",
                                "in": "query",
                                "description": "Use approved version or not",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "example": true
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Records group and owner updated",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/registries/actions/entries/collect": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Preview directory entries extracted from records",
                        "description": "Scan one or more records for element matching the XPath provided and save them as directory entries (ie. subtemplate).<br/><br/>Only records that the current user can edit are analyzed.<br/><br/>Examples:<br/>For ISO19115-3 records, use .//cit:CI_Responsibility and compute identifier based on email with .//cit:electronicMailAddress/*/text() to create a contact directory.",
                        "operationId": "previewExtractedEntries",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "xpath",
                                "in": "query",
                                "description": "XPath of the elements to extract as entry.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": ".//gmd:CI_ResponsibleParty"
                            },
                            {
                                "name": "identifierXpath",
                                "in": "query",
                                "description": "XPath of the element identifier. If not defined a random UUID is generated and analysis will not check for duplicates.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "@uuid"
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Extracts directory entries from records",
                        "description": "Scan one or more records for element matching the XPath provided and save them as directory entries (ie. subtemplate).<br/><br/>Only records that the current user can edit are analyzed.<br/><br/>Examples:<br/>For ISO19115-3 records, use .//cit:CI_Responsibility and compute identifier based on email with .//cit:electronicMailAddress/*/text() to create a contact directory.",
                        "operationId": "extractEntries",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "xpath",
                                "in": "query",
                                "description": "XPath of the elements to extract as entry.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": ".//gmd:CI_ResponsibleParty"
                            },
                            {
                                "name": "identifierXpath",
                                "in": "query",
                                "description": "XPath of the element identifier. If not defined a random UUID is generated and analysis will not check for duplicates.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "@uuid"
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/usersearches/all": {
                    "get": {
                        "tags": [
                            "usersearches"
                        ],
                        "summary": "Get user custom searches for all users (no paginated)",
                        "operationId": "getAllUserCustomSearches",
                        "parameters": [
                            {
                                "name": "featuredType",
                                "in": "query",
                                "description": "Featured type search.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "HOME",
                                        "EDITOR_BOARD"
                                    ]
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserSearchDto"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/samples": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add samples",
                        "description": "Add sample records for one or more schemas. Samples are defined for each standard in the samples folder as MEF files.",
                        "operationId": "addSamples",
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "query",
                                "description": "Schema identifiers",
                                "required": true,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "example": "iso19139"
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Return a report of what has been done.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/validate/inspire/testsuites": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get test suites available.",
                        "description": "TG13, TG2, ...",
                        "operationId": "getTestSuites",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "List of testsuites available.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/group": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Set record group",
                        "description": "A record is related to one group.",
                        "operationId": "setRecordGroup",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "integer",
                                        "description": "Group identifier",
                                        "format": "int32"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "204": {
                                "description": "Record group updated."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/formatters/{schema}/{formatter}": {
                    "get": {
                        "tags": [
                            "formatters"
                        ],
                        "summary": "Download a formatter as ZIP",
                        "operationId": "downloadFormatter",
                        "parameters": [
                            {
                                "name": "formatter",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "schema",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK"
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "formatters"
                        ],
                        "summary": "Delete a formatter",
                        "operationId": "deleteFormatter",
                        "parameters": [
                            {
                                "name": "formatter",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "schema",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "204": {
                                "description": "No Content"
                            }
                        }
                    }
                },
                "/mapservers": {
                    "get": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Get mapservers",
                        "description": "Mapservers are used by the catalog to publish record attachments (eg. ZIP file with shape) or record associated resources (eg. database table, file on the local network) in a remote mapserver like GeoServer or MapServer. The catalog communicate with the mapserver using GeoServer REST API.",
                        "operationId": "getMapservers",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AnonymousMapserver"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Add a mapserver",
                        "description": "Return the id of the newly created mapserver.",
                        "operationId": "addMapserver",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/MapServer"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Mapserver created.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            },
                            "400": {
                                "description": "Bad parameters.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/processes/search-and-replace": {
                    "post": {
                        "tags": [
                            "processes"
                        ],
                        "summary": "Search and replace values in one or more ISO19139 records",
                        "description": "Service to apply replacements to one or more records.\n To define a replacement, send the following parameters:\n * mdsection-139815551372=metadata\n * mdfield-1398155513728=id.contact.individualName\n * replaceValue-1398155513728=Juan\n * searchValue-1398155513728=Jose\n\n<br/>Batch editing can also be used for similar works.",
                        "operationId": "searchAndReplace",
                        "parameters": [
                            {
                                "name": "process",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "massive-content-update"
                                }
                            },
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "isTesting",
                                "in": "query",
                                "description": "Test only (ie. metadata are not saved). Return the report only.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "isCaseInsensitive",
                                "in": "query",
                                "description": "Case insensitive search.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "vacuumMode",
                                "in": "query",
                                "description": "'record' to apply vacuum.xsl, 'element' to remove empty elements. Empty to not affect empty elements.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Replacements applied.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataReplacementProcessingReport"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataReplacementProcessingReport"
                                        }
                                    }
                                }
                            }
                        },
                        "deprecated": true
                    }
                },
                "/i18n/db/translations/{key}": {
                    "put": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Add or update database translations for a key.",
                        "description": "Database translations can be used to customize labels in the UI for different languages.",
                        "operationId": "addTranslationsFor",
                        "parameters": [
                            {
                                "name": "key",
                                "in": "path",
                                "description": "Untranslated key for which translations are provided.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "replace",
                                "in": "query",
                                "description": "Set to `true` to erase all existing translations for that key",
                                "required": false,
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        ],
                        "requestBody": {
                            "description": "An object where keys are valid 3-letter language codes (e.g. `eng` or `fre`) and values are custom translations for the corresponding language.",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "string"
                                        }
                                    },
                                    "example": {
                                        "eng": "my translation",
                                        "ger": "meine \u00dcbersetzung",
                                        "fre": "ma traduction"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Delete database translations.",
                        "description": "Delete custom translations stored in the database.",
                        "operationId": "deleteTranslations",
                        "parameters": [
                            {
                                "name": "key",
                                "in": "path",
                                "description": "Untranslated key for which all translations will be deleted.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/records/links": {
                    "get": {
                        "tags": [
                            "links"
                        ],
                        "summary": "Get record links",
                        "operationId": "getRecordLinks",
                        "parameters": [
                            {
                                "name": "filter",
                                "in": "query",
                                "description": "Filter, e.g. \"{url: 'png', lastState: 'ko', records: 'e421', groupId: 12}\", lastState being 'ok'/'ko'/'unknown'",
                                "required": false,
                                "schema": {
                                    "$ref": "#/components/schemas/JSONObject"
                                }
                            },
                            {
                                "name": "groupIdFilter",
                                "in": "query",
                                "description": "Optional, filter links to records published in that group.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            },
                            {
                                "name": "groupOwnerIdFilter",
                                "in": "query",
                                "description": "Optional, filter links to records created in that group.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            },
                            {
                                "name": "page",
                                "in": "query",
                                "description": "Results page you want to retrieve (0..N)",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "size",
                                "in": "query",
                                "description": "Number of records per page.",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "sort",
                                "in": "query",
                                "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. ",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/PageLink"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "links"
                        ],
                        "summary": "Get record links",
                        "operationId": "getRecordLinksPost",
                        "parameters": [
                            {
                                "name": "filter",
                                "in": "query",
                                "description": "Filter, e.g. \"{url: 'png', lastState: 'ko', records: 'e421', groupId: 12}\", lastState being 'ok'/'ko'/'unknown'",
                                "required": false,
                                "schema": {
                                    "$ref": "#/components/schemas/JSONObject"
                                }
                            },
                            {
                                "name": "groupIdFilter",
                                "in": "query",
                                "description": "Optional, filter links to records published in that group.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            },
                            {
                                "name": "groupOwnerIdFilter",
                                "in": "query",
                                "description": "Optional, filter links to records created in that group.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            },
                            {
                                "name": "page",
                                "in": "query",
                                "description": "Results page you want to retrieve (0..N)",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "size",
                                "in": "query",
                                "description": "Number of records per page.",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "sort",
                                "in": "query",
                                "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. ",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/PageLink"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "links"
                        ],
                        "summary": "Remove all links and status history",
                        "operationId": "purgeAll",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/doi/checkDoiUrl": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Check the DOI URL created based on current configuration and pattern.",
                        "operationId": "checkDoiUrl",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "DOI URL created.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "404": {
                                "description": "Metadata not found.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "500": {
                                "description": "Service unavailable.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/extents/{geometryIndex}.png": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get one record extent as image",
                        "description": "A rendering of the geometry as a png. If no background is specified the image will be transparent. In getMap the envelope of the geometry is calculated then it is expanded by a factor.  That factor is the size of the map.  This allows the map to be slightly bigger than the geometry allowing some context to be shown. This parameter allows different factors to be chosen per scale level.\nProportion is the proportion of the world that the geometry covers (bounds of WGS84)/(bounds of geometry in WGS84)\n\nNamed backgrounds allow the background parameter to be a simple key and the complete URL will be looked up from this list of named backgrounds\n",
                        "operationId": "getOneRecordExtentAsImage",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "geometryIndex",
                                "in": "path",
                                "description": "Index of the geometry or bounding box to display. Starts at 1.",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "mapsrs",
                                "in": "query",
                                "description": "(optional) the background map projection. If not passed uses the region/getmap/mapproj setting. If the setting is not set defaults to EPSG:4326",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "width",
                                "in": "query",
                                "description": "(optional) width of the image that is created. Only one of width and height are permitted",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 300
                                }
                            },
                            {
                                "name": "height",
                                "in": "query",
                                "description": "(optional) height of the image that is created. Only one of width and height are permitted",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "background",
                                "in": "query",
                                "description": "(optional) URL for loading a background image for regions or a key that references the namedBackgrounds (configured in config-spring-geonetwork.xml). A WMS GetMap request is the typical example. The URL must be parameterized with the following parameters: minx, maxx, miny, maxy, width, height",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "settings"
                                }
                            },
                            {
                                "name": "fillColor",
                                "in": "query",
                                "description": "(optional) Fill color with format RED,GREEN,BLUE,ALPHA",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "0,0,0,50"
                                }
                            },
                            {
                                "name": "strokeColor",
                                "in": "query",
                                "description": "(optional) Stroke color with format RED,GREEN,BLUE,ALPHA",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "0,0,0,255"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "image/png": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "format": "byte"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/formatters/{formatterId}": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get a formatted metadata record",
                        "operationId": "getRecordFormattedBy",
                        "parameters": [
                            {
                                "name": "Accept",
                                "in": "header",
                                "description": "Formatter type to use.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "text/html"
                                }
                            },
                            {
                                "name": "formatterId",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "width",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "_25",
                                        "_50",
                                        "_75",
                                        "_100"
                                    ],
                                    "default": "_100"
                                }
                            },
                            {
                                "name": "mdpath",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "language",
                                "in": "query",
                                "description": "Optional language ISO 3 letters code to override HTTP Accept-language header.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "output",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "txt",
                                        "html",
                                        "xml",
                                        "json",
                                        "jsonld",
                                        "pdf",
                                        "testpdf"
                                    ]
                                }
                            },
                            {
                                "name": "approved",
                                "in": "query",
                                "description": "Download the approved version",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/records/status/search": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Search status",
                        "operationId": "getWorkflowStatusByType",
                        "parameters": [
                            {
                                "name": "type",
                                "in": "query",
                                "description": "One or more types to retrieve (ie. worflow, event, task). Default is all.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "workflow",
                                            "task",
                                            "event"
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "details",
                                "in": "query",
                                "description": "All event details including XML changes. Responses are bigger. Default is false",
                                "required": false,
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            {
                                "name": "sortOrder",
                                "in": "query",
                                "description": "Sort Order (ie. DESC or ASC). Default is none.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "ASC",
                                        "DESC"
                                    ]
                                }
                            },
                            {
                                "name": "author",
                                "in": "query",
                                "description": "One or more event author. Default is all.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            },
                            {
                                "name": "owner",
                                "in": "query",
                                "description": "One or more event owners. Default is all.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            },
                            {
                                "name": "id",
                                "in": "query",
                                "description": "One or more record identifier. Default is all.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            },
                            {
                                "name": "record",
                                "in": "query",
                                "description": "One or more metadata record identifier. Default is all.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            },
                            {
                                "name": "uuid",
                                "in": "query",
                                "description": "One or more metadata uuid. Default is all.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "statusIds",
                                "in": "query",
                                "description": "One or more status id. Default is all.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "dateFrom",
                                "in": "query",
                                "description": "Start date",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "dateTo",
                                "in": "query",
                                "description": "End date",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "from",
                                "in": "query",
                                "description": "From page",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 0
                                }
                            },
                            {
                                "name": "size",
                                "in": "query",
                                "description": "Number of records to return",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 100
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {}
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}": {
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete a record status",
                        "operationId": "deleteRecordStatus",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "statusId",
                                "in": "path",
                                "description": "Status identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "userId",
                                "in": "path",
                                "description": "User identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "changeDate",
                                "in": "path",
                                "description": "Change date",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Status not found."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it."
                            },
                            "204": {
                                "description": "Status removed."
                            }
                        }
                    }
                },
                "/formatters/cache": {
                    "delete": {
                        "tags": [
                            "formatters"
                        ],
                        "summary": "Clear formatter cache",
                        "description": "Formatters are used to render records in various format (HTML, PDF, ...). When a record is rendered a cache is populated for better performance. By default the cache is an H2 database with files on the filesystems (See <dataDirectory>/resources/htmlcache/formatter-cache folder).",
                        "operationId": "clearFormatterCache",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrator can access it."
                            },
                            "204": {
                                "description": "Cache cleared."
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/featureCatalog": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Returns a map to decode attributes in a dataset (from the associated feature catalog)",
                        "operationId": "getFeatureCatalog",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Return the associated resources.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "$ref": "#/components/schemas/FeatureResponse"
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/FeatureResponse"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "$ref": "#/components/schemas/FeatureResponse"
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/FeatureResponse"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/users/{userIdentifier}.png": {
                    "get": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Get user identicon",
                        "operationId": "getUserIdenticon",
                        "parameters": [
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier.",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "size",
                                "in": "query",
                                "description": "Size.",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 18
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/userfeedback/{uuid}/publish": {
                    "get": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Publishes a feedback",
                        "description": "For reviewers",
                        "operationId": "publishFeedback",
                        "parameters": [
                            {
                                "name": "uuid",
                                "in": "path",
                                "description": "User feedback UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "User feedback published.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/site/info/readonly": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Is in read-only mode?",
                        "operationId": "isReadOnly",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/groups/{groupIdentifier}/users": {
                    "get": {
                        "tags": [
                            "groups"
                        ],
                        "summary": "Get group users",
                        "operationId": "getGroupUsers",
                        "parameters": [
                            {
                                "name": "groupIdentifier",
                                "in": "path",
                                "description": "Group identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "List of users in that group.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/site/logging/activity": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get last activity",
                        "operationId": "getLastActivity",
                        "parameters": [
                            {
                                "name": "lines",
                                "in": "query",
                                "description": "Number of lines to return",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 2000
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/standards/batchconfiguration": {
                    "get": {
                        "tags": [
                            "standards"
                        ],
                        "summary": "Get batch editor configuration for standards",
                        "operationId": "getConfigurations",
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "query",
                                "description": "Schema identifiers",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "example": "iso19139"
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Batch editor configuration.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "$ref": "#/components/schemas/BatchEditing"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/userselections/{selectionIdentifier}/{userIdentifier}": {
                    "get": {
                        "tags": [
                            "userselections"
                        ],
                        "summary": "Get record in a user selection set",
                        "operationId": "getSelectionRecords",
                        "parameters": [
                            {
                                "name": "selectionIdentifier",
                                "in": "path",
                                "description": "Selection identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "userselections"
                        ],
                        "summary": "Add items to a user selection set",
                        "operationId": "addToUserSelection",
                        "parameters": [
                            {
                                "name": "selectionIdentifier",
                                "in": "path",
                                "description": "Selection identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "uuid",
                                "in": "query",
                                "description": "One or more record UUIDs.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "404": {
                                "description": "Selection or user or at least one UUID not found.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Records added to selection set.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "userselections"
                        ],
                        "summary": "Remove items to a user selection set",
                        "operationId": "deleteFromUserSelection",
                        "parameters": [
                            {
                                "name": "selectionIdentifier",
                                "in": "path",
                                "description": "Selection identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "userIdentifier",
                                "in": "path",
                                "description": "User identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "uuid",
                                "in": "query",
                                "description": "One or more record UUIDs. If null, remove all.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "Items removed from a set.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "404": {
                                "description": "Selection or user not found.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/popularity": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get record popularity",
                        "operationId": "getRecordPopularity",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Popularity.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Increase record popularity",
                        "description": "Used when a view is based on the search results content and does not really access the record. Record is then added to the indexing queue and popularity will be updated soon.",
                        "operationId": "increaseRecordPopularity",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Popularity updated.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/related": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get record related resources",
                        "description": "Retrieve related services, datasets, onlines, thumbnails, sources, ... to this records.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'>More info</a>",
                        "operationId": "getAssociatedResources",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Type of related resource. If none, all resources are returned.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "children",
                                            "parent",
                                            "brothersAndSisters",
                                            "siblings",
                                            "associated",
                                            "services",
                                            "datasets",
                                            "fcats",
                                            "hasfeaturecats",
                                            "sources",
                                            "hassources",
                                            "related",
                                            "onlines",
                                            "thumbnails"
                                        ]
                                    },
                                    "default": []
                                }
                            },
                            {
                                "name": "start",
                                "in": "query",
                                "description": "Start offset for paging. Default 1. Only applies to related metadata records (ie. not for thumbnails).",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 0
                                }
                            },
                            {
                                "name": "rows",
                                "in": "query",
                                "description": "Number of rows returned. Default 100.",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 100
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Return the associated resources.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "$ref": "#/components/schemas/RelatedResponse"
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/RelatedResponse"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "$ref": "#/components/schemas/RelatedResponse"
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/RelatedResponse"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/selections/{bucket}": {
                    "get": {
                        "tags": [
                            "selections"
                        ],
                        "summary": "Get current selection",
                        "operationId": "get",
                        "parameters": [
                            {
                                "name": "bucket",
                                "in": "path",
                                "description": "Bucket name",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "metadata"
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "uniqueItems": true,
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "selections"
                        ],
                        "summary": "Select one or more items",
                        "operationId": "add",
                        "parameters": [
                            {
                                "name": "bucket",
                                "in": "path",
                                "description": "Bucket name",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "metadata"
                            },
                            {
                                "name": "uuid",
                                "in": "query",
                                "description": "One or more record UUIDs. If null, select all in current search if bucket name is 'metadata' (TODO: remove this limitation?).",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "selections"
                        ],
                        "summary": "Clear selection or remove items",
                        "operationId": "clear",
                        "parameters": [
                            {
                                "name": "bucket",
                                "in": "path",
                                "description": "Selection bucket name",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "metadata"
                            },
                            {
                                "name": "uuid",
                                "in": "query",
                                "description": "One or more record UUIDs",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/site/info/build": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get build details",
                        "description": "To know when and how this version of the application was built.",
                        "operationId": "getSystemInfo",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Build info.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SystemInfo"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/user/actions/register": {
                    "put": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Create user account",
                        "description": "User is created with a registered user profile. username field is ignored and the email is used as username. Password is sent by email. Catalog administrator is also notified.",
                        "operationId": "registerUser",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/UserRegisterDto"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/identifiers": {
                    "get": {
                        "tags": [
                            "identifiers"
                        ],
                        "summary": "Get identifier templates",
                        "description": "Identifier templates are used to create record UUIDs havind a particular structure. The template will be used when user creates a new record. The template identifier to use is defined in the administration > settings.",
                        "operationId": "getIdentifiers",
                        "parameters": [
                            {
                                "name": "userDefinedOnly",
                                "in": "query",
                                "description": "Only user defined ones",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "List of identifier templates.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MetadataIdentifierTemplate"
                                            }
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editor can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MetadataIdentifierTemplate"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "identifiers"
                        ],
                        "summary": "Add an identifier template",
                        "operationId": "addIdentifier",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/MetadataIdentifierTemplate"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Identifier template created.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editor can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/logos/{file}": {
                    "get": {
                        "tags": [
                            "logos"
                        ],
                        "summary": "Get a logo",
                        "operationId": "getLogo",
                        "parameters": [
                            {
                                "name": "file",
                                "in": "path",
                                "description": "The logo filename",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "200": {
                                "description": "Logo returned."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "logos"
                        ],
                        "summary": "Remove a logo",
                        "operationId": "deleteLogo",
                        "parameters": [
                            {
                                "name": "file",
                                "in": "path",
                                "description": "The logo filename to delete",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it."
                            },
                            "204": {
                                "description": "Logo removed."
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/attachments/{resourceId}": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get a metadata resource",
                        "operationId": "getResource",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "43d7c186-2187-4bcd-8843-41e575a5ef56"
                            },
                            {
                                "name": "resourceId",
                                "in": "path",
                                "description": "The resource identifier (ie. filename)",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "approved",
                                "in": "query",
                                "description": "Use approved version or not",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                },
                                "example": true
                            },
                            {
                                "name": "size",
                                "in": "query",
                                "description": "Size (only applies to images). From 1px to 2048px.",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "example": 200
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to download the resource.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "format": "byte"
                                            }
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Record attachment.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "format": "byte"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete a metadata resource",
                        "operationId": "delResource",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "43d7c186-2187-4bcd-8843-41e575a5ef56"
                            },
                            {
                                "name": "resourceId",
                                "in": "path",
                                "description": "The resource identifier (ie. filename)",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "approved",
                                "in": "query",
                                "description": "Use approved version or not",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "example": true
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            },
                            "204": {
                                "description": "Attachment visibility removed."
                            }
                        }
                    },
                    "patch": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Update the metadata resource visibility",
                        "operationId": "patchResource",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "43d7c186-2187-4bcd-8843-41e575a5ef56"
                            },
                            {
                                "name": "resourceId",
                                "in": "path",
                                "description": "The resource identifier (ie. filename)",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "visibility",
                                "in": "query",
                                "description": "The visibility",
                                "required": true,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "public",
                                        "private"
                                    ]
                                },
                                "example": "public"
                            },
                            {
                                "name": "approved",
                                "in": "query",
                                "description": "Use approved version or not",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "example": true
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Attachment visibility updated.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataResource"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataResource"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/doi/checkPreConditions": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Check that a record can be submitted to DataCite for DOI creation. DataCite requires some fields to be populated.",
                        "operationId": "checkDoiStatus",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Record can be proposed to DataCite.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "boolean"
                                            }
                                        }
                                    }
                                }
                            },
                            "404": {
                                "description": "Metadata not found.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "boolean"
                                            }
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "boolean"
                                            }
                                        }
                                    }
                                }
                            },
                            "500": {
                                "description": "Service unavailable.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "boolean"
                                            }
                                        }
                                    }
                                }
                            },
                            "400": {
                                "description": "Record does not meet preconditions. Check error message.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "boolean"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/validate/inspire": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Validate one or more records in INSPIRE validator",
                        "description": "Update validation status for all records.",
                        "operationId": "validateRecordsInspire",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "mode",
                                "in": "query",
                                "description": "Define the encoding of the record to use. By default, ISO19139 are used as is and ISO19115-3 are converted to ISO19139.If mode = csw, a GetRecordById request is used.If mode = any portal id, then a GetRecordById request is used on this portal CSW entry point which may define custom CSW post processing. See https://github.com/geonetwork/core-geonetwork/pull/4493.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Records validated.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/associated": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get record associated resources",
                        "description": "Retrieve related services, datasets, sources, ... to this records.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'>More info</a>",
                        "operationId": "getAssociatedResources_1",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Type of related resource. If none, all resources are returned.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "children",
                                            "parent",
                                            "brothersAndSisters",
                                            "siblings",
                                            "associated",
                                            "services",
                                            "datasets",
                                            "fcats",
                                            "hasfeaturecats",
                                            "sources",
                                            "hassources",
                                            "related",
                                            "onlines",
                                            "thumbnails"
                                        ]
                                    },
                                    "default": []
                                }
                            },
                            {
                                "name": "start",
                                "in": "query",
                                "description": "Start offset for paging. Default 1. Only applies to related metadata records (ie. not for thumbnails).",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 0
                                }
                            },
                            {
                                "name": "rows",
                                "in": "query",
                                "description": "Number of rows returned. Default 100.",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 100
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Return the associated resources.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/AssociatedRecord"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/AssociatedRecord"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/before": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get saved content from the status record before changes",
                        "operationId": "showStatusBefore",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "statusId",
                                "in": "path",
                                "description": "Status identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "userId",
                                "in": "path",
                                "description": "User identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "changeDate",
                                "in": "path",
                                "description": "Change date",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Previous version of the record.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/after": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get saved content from the status record after changes",
                        "operationId": "showStatusAfter",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "statusId",
                                "in": "path",
                                "description": "Status identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "userId",
                                "in": "path",
                                "description": "User identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "changeDate",
                                "in": "path",
                                "description": "Change date",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Version of the record after changes.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/users/properties/{property}": {
                    "get": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Check if a user property already exist",
                        "operationId": "checkUserPropertyExist",
                        "parameters": [
                            {
                                "name": "property",
                                "in": "path",
                                "description": "The user property to check",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "exist",
                                "in": "query",
                                "description": "The value to search",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string",
                                            "enum": [
                                                "100 CONTINUE",
                                                "101 SWITCHING_PROTOCOLS",
                                                "102 PROCESSING",
                                                "103 CHECKPOINT",
                                                "200 OK",
                                                "201 CREATED",
                                                "202 ACCEPTED",
                                                "203 NON_AUTHORITATIVE_INFORMATION",
                                                "204 NO_CONTENT",
                                                "205 RESET_CONTENT",
                                                "206 PARTIAL_CONTENT",
                                                "207 MULTI_STATUS",
                                                "208 ALREADY_REPORTED",
                                                "226 IM_USED",
                                                "300 MULTIPLE_CHOICES",
                                                "301 MOVED_PERMANENTLY",
                                                "302 FOUND",
                                                "302 MOVED_TEMPORARILY",
                                                "303 SEE_OTHER",
                                                "304 NOT_MODIFIED",
                                                "305 USE_PROXY",
                                                "307 TEMPORARY_REDIRECT",
                                                "308 PERMANENT_REDIRECT",
                                                "400 BAD_REQUEST",
                                                "401 UNAUTHORIZED",
                                                "402 PAYMENT_REQUIRED",
                                                "403 FORBIDDEN",
                                                "404 NOT_FOUND",
                                                "405 METHOD_NOT_ALLOWED",
                                                "406 NOT_ACCEPTABLE",
                                                "407 PROXY_AUTHENTICATION_REQUIRED",
                                                "408 REQUEST_TIMEOUT",
                                                "409 CONFLICT",
                                                "410 GONE",
                                                "411 LENGTH_REQUIRED",
                                                "412 PRECONDITION_FAILED",
                                                "413 PAYLOAD_TOO_LARGE",
                                                "413 REQUEST_ENTITY_TOO_LARGE",
                                                "414 URI_TOO_LONG",
                                                "414 REQUEST_URI_TOO_LONG",
                                                "415 UNSUPPORTED_MEDIA_TYPE",
                                                "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                                                "417 EXPECTATION_FAILED",
                                                "418 I_AM_A_TEAPOT",
                                                "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                                                "420 METHOD_FAILURE",
                                                "421 DESTINATION_LOCKED",
                                                "422 UNPROCESSABLE_ENTITY",
                                                "423 LOCKED",
                                                "424 FAILED_DEPENDENCY",
                                                "425 TOO_EARLY",
                                                "426 UPGRADE_REQUIRED",
                                                "428 PRECONDITION_REQUIRED",
                                                "429 TOO_MANY_REQUESTS",
                                                "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                                                "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                                                "500 INTERNAL_SERVER_ERROR",
                                                "501 NOT_IMPLEMENTED",
                                                "502 BAD_GATEWAY",
                                                "503 SERVICE_UNAVAILABLE",
                                                "504 GATEWAY_TIMEOUT",
                                                "505 HTTP_VERSION_NOT_SUPPORTED",
                                                "506 VARIANT_ALSO_NEGOTIATES",
                                                "507 INSUFFICIENT_STORAGE",
                                                "508 LOOP_DETECTED",
                                                "509 BANDWIDTH_LIMIT_EXCEEDED",
                                                "510 NOT_EXTENDED",
                                                "511 NETWORK_AUTHENTICATION_REQUIRED"
                                            ]
                                        }
                                    }
                                }
                            },
                            "404": {
                                "description": "A property with that value already exist.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string",
                                            "enum": [
                                                "100 CONTINUE",
                                                "101 SWITCHING_PROTOCOLS",
                                                "102 PROCESSING",
                                                "103 CHECKPOINT",
                                                "200 OK",
                                                "201 CREATED",
                                                "202 ACCEPTED",
                                                "203 NON_AUTHORITATIVE_INFORMATION",
                                                "204 NO_CONTENT",
                                                "205 RESET_CONTENT",
                                                "206 PARTIAL_CONTENT",
                                                "207 MULTI_STATUS",
                                                "208 ALREADY_REPORTED",
                                                "226 IM_USED",
                                                "300 MULTIPLE_CHOICES",
                                                "301 MOVED_PERMANENTLY",
                                                "302 FOUND",
                                                "302 MOVED_TEMPORARILY",
                                                "303 SEE_OTHER",
                                                "304 NOT_MODIFIED",
                                                "305 USE_PROXY",
                                                "307 TEMPORARY_REDIRECT",
                                                "308 PERMANENT_REDIRECT",
                                                "400 BAD_REQUEST",
                                                "401 UNAUTHORIZED",
                                                "402 PAYMENT_REQUIRED",
                                                "403 FORBIDDEN",
                                                "404 NOT_FOUND",
                                                "405 METHOD_NOT_ALLOWED",
                                                "406 NOT_ACCEPTABLE",
                                                "407 PROXY_AUTHENTICATION_REQUIRED",
                                                "408 REQUEST_TIMEOUT",
                                                "409 CONFLICT",
                                                "410 GONE",
                                                "411 LENGTH_REQUIRED",
                                                "412 PRECONDITION_FAILED",
                                                "413 PAYLOAD_TOO_LARGE",
                                                "413 REQUEST_ENTITY_TOO_LARGE",
                                                "414 URI_TOO_LONG",
                                                "414 REQUEST_URI_TOO_LONG",
                                                "415 UNSUPPORTED_MEDIA_TYPE",
                                                "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                                                "417 EXPECTATION_FAILED",
                                                "418 I_AM_A_TEAPOT",
                                                "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                                                "420 METHOD_FAILURE",
                                                "421 DESTINATION_LOCKED",
                                                "422 UNPROCESSABLE_ENTITY",
                                                "423 LOCKED",
                                                "424 FAILED_DEPENDENCY",
                                                "425 TOO_EARLY",
                                                "426 UPGRADE_REQUIRED",
                                                "428 PRECONDITION_REQUIRED",
                                                "429 TOO_MANY_REQUESTS",
                                                "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                                                "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                                                "500 INTERNAL_SERVER_ERROR",
                                                "501 NOT_IMPLEMENTED",
                                                "502 BAD_GATEWAY",
                                                "503 SERVICE_UNAVAILABLE",
                                                "504 GATEWAY_TIMEOUT",
                                                "505 HTTP_VERSION_NOT_SUPPORTED",
                                                "506 VARIANT_ALSO_NEGOTIATES",
                                                "507 INSUFFICIENT_STORAGE",
                                                "508 LOOP_DETECTED",
                                                "509 BANDWIDTH_LIMIT_EXCEEDED",
                                                "510 NOT_EXTENDED",
                                                "511 NETWORK_AUTHENTICATION_REQUIRED"
                                            ]
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Property does not exist.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string",
                                            "enum": [
                                                "100 CONTINUE",
                                                "101 SWITCHING_PROTOCOLS",
                                                "102 PROCESSING",
                                                "103 CHECKPOINT",
                                                "200 OK",
                                                "201 CREATED",
                                                "202 ACCEPTED",
                                                "203 NON_AUTHORITATIVE_INFORMATION",
                                                "204 NO_CONTENT",
                                                "205 RESET_CONTENT",
                                                "206 PARTIAL_CONTENT",
                                                "207 MULTI_STATUS",
                                                "208 ALREADY_REPORTED",
                                                "226 IM_USED",
                                                "300 MULTIPLE_CHOICES",
                                                "301 MOVED_PERMANENTLY",
                                                "302 FOUND",
                                                "302 MOVED_TEMPORARILY",
                                                "303 SEE_OTHER",
                                                "304 NOT_MODIFIED",
                                                "305 USE_PROXY",
                                                "307 TEMPORARY_REDIRECT",
                                                "308 PERMANENT_REDIRECT",
                                                "400 BAD_REQUEST",
                                                "401 UNAUTHORIZED",
                                                "402 PAYMENT_REQUIRED",
                                                "403 FORBIDDEN",
                                                "404 NOT_FOUND",
                                                "405 METHOD_NOT_ALLOWED",
                                                "406 NOT_ACCEPTABLE",
                                                "407 PROXY_AUTHENTICATION_REQUIRED",
                                                "408 REQUEST_TIMEOUT",
                                                "409 CONFLICT",
                                                "410 GONE",
                                                "411 LENGTH_REQUIRED",
                                                "412 PRECONDITION_FAILED",
                                                "413 PAYLOAD_TOO_LARGE",
                                                "413 REQUEST_ENTITY_TOO_LARGE",
                                                "414 URI_TOO_LONG",
                                                "414 REQUEST_URI_TOO_LONG",
                                                "415 UNSUPPORTED_MEDIA_TYPE",
                                                "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                                                "417 EXPECTATION_FAILED",
                                                "418 I_AM_A_TEAPOT",
                                                "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                                                "420 METHOD_FAILURE",
                                                "421 DESTINATION_LOCKED",
                                                "422 UNPROCESSABLE_ENTITY",
                                                "423 LOCKED",
                                                "424 FAILED_DEPENDENCY",
                                                "425 TOO_EARLY",
                                                "426 UPGRADE_REQUIRED",
                                                "428 PRECONDITION_REQUIRED",
                                                "429 TOO_MANY_REQUESTS",
                                                "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                                                "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                                                "500 INTERNAL_SERVER_ERROR",
                                                "501 NOT_IMPLEMENTED",
                                                "502 BAD_GATEWAY",
                                                "503 SERVICE_UNAVAILABLE",
                                                "504 GATEWAY_TIMEOUT",
                                                "505 HTTP_VERSION_NOT_SUPPORTED",
                                                "506 VARIANT_ALSO_NEGOTIATES",
                                                "507 INSUFFICIENT_STORAGE",
                                                "508 LOOP_DETECTED",
                                                "509 BANDWIDTH_LIMIT_EXCEEDED",
                                                "510 NOT_EXTENDED",
                                                "511 NETWORK_AUTHENTICATION_REQUIRED"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/close": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Close a record task",
                        "operationId": "closeTask",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "statusId",
                                "in": "path",
                                "description": "Status identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "userId",
                                "in": "path",
                                "description": "User identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "changeDate",
                                "in": "path",
                                "description": "Change date",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "closeDate",
                                "in": "query",
                                "description": "Close date",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Status not found."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            },
                            "204": {
                                "description": "Task closed."
                            }
                        }
                    }
                },
                "/search/records/_msearch": {
                    "post": {
                        "tags": [
                            "search"
                        ],
                        "summary": "Search endpoint",
                        "description": "See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html for search parameters details.",
                        "operationId": "msearch",
                        "parameters": [
                            {
                                "name": "bucket",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "metadata"
                                }
                            },
                            {
                                "name": "relatedType",
                                "in": "query",
                                "description": "Type of related resource. If none, no associated resource returned.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "children",
                                            "parent",
                                            "brothersAndSisters",
                                            "siblings",
                                            "associated",
                                            "services",
                                            "datasets",
                                            "fcats",
                                            "hasfeaturecats",
                                            "sources",
                                            "hassources",
                                            "related",
                                            "onlines",
                                            "thumbnails"
                                        ]
                                    },
                                    "default": []
                                }
                            }
                        ],
                        "requestBody": {
                            "description": "JSON request based on Elasticsearch API.",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/site/index/synchronized": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Index synchronized with database",
                        "operationId": "indexAndDbSynchronizationStatus",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "object"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/batchediting/preview": {
                    "post": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Preview edits made by XPath expressions.",
                        "operationId": "previewBatchEdit",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "diffType",
                                "in": "query",
                                "description": "Return differences with diff, diffhtml or patch",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "patch",
                                        "diff",
                                        "diffhtml"
                                    ]
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/BatchEditParameter"
                                        }
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Processed records.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/standards/{schema}/editor/associatedpanel/config/{name}.json": {
                    "get": {
                        "tags": [
                            "standards"
                        ],
                        "summary": "Get editor associated resources panel configuration",
                        "operationId": "getEditorAssociatedPanelConfiguration",
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "path",
                                "description": "Schema identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "iso19139"
                            },
                            {
                                "name": "name",
                                "in": "path",
                                "description": "Configuration identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "default"
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/identifiers/{identifier}": {
                    "put": {
                        "tags": [
                            "identifiers"
                        ],
                        "summary": "Update an identifier template",
                        "operationId": "updateIdentifier",
                        "parameters": [
                            {
                                "name": "identifier",
                                "in": "path",
                                "description": "Identifier template identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/MetadataIdentifierTemplate"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editor can access it."
                            },
                            "204": {
                                "description": "Identifier template updated."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "identifiers"
                        ],
                        "summary": "Remove an identifier template",
                        "operationId": "deleteIdentifier",
                        "parameters": [
                            {
                                "name": "identifier",
                                "in": "path",
                                "description": "Identifier template identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editor can access it."
                            },
                            "204": {
                                "description": "Template identifier removed."
                            }
                        }
                    }
                },
                "/site/logging/activity/zip": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get last activity in a ZIP",
                        "operationId": "getLastActivityInAZip",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/registries/crs/types": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Get list of CRS type",
                        "operationId": "getCrsTypes",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "List of CRS types.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "enum": [
                                                    "CoordinateReferenceSystem",
                                                    "VerticalCRS",
                                                    "GeographicCRS",
                                                    "ProjectedCRS"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/site/logging": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get log files",
                        "operationId": "getLogFiles",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LogFileResponse"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/eealayoutupdate/script": {
                    "get": {
                        "tags": [
                            "eealayoutupdate"
                        ],
                        "summary": "Get EEA embedded scripts",
                        "operationId": "getScript",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/xhtml+xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/pages/{language}/{pageId}/content": {
                    "get": {
                        "tags": [
                            "pages"
                        ],
                        "summary": "Return the static html content identified by pageId",
                        "description": "<a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More info</a>",
                        "operationId": "getPageContent",
                        "parameters": [
                            {
                                "name": "language",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "pageId",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Page not found",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Page found",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/backups/latest": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Download MEF backup archive",
                        "description": "The backup contains all metadata not harvested including templates.",
                        "operationId": "downloadBackup",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found.",
                                "content": {
                                    "application/zip": {
                                        "schema": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/regions": {
                    "get": {
                        "tags": [
                            "regions"
                        ],
                        "summary": "Get list of regions",
                        "operationId": "getRegions",
                        "parameters": [
                            {
                                "name": "label",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "categoryId",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "maxRecords",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": -1
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "List of regions.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ListRegionsResponse"
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ListRegionsResponse"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/eealayoutupdate/header": {
                    "get": {
                        "tags": [
                            "eealayoutupdate"
                        ],
                        "summary": "Get EEA header html content",
                        "operationId": "getHeader",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/xhtml+xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/site/info/isCasEnabled": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Is CAS enabled?",
                        "operationId": "isCasEnabled",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/i18n/packages/{pack}": {
                    "get": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Get a translation package.",
                        "operationId": "getTranslationsPackage",
                        "parameters": [
                            {
                                "name": "pack",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/site/indexing": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Is indexing?",
                        "operationId": "isIndexing",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/languages/{langCode}": {
                    "put": {
                        "tags": [
                            "languages"
                        ],
                        "summary": "Add a language",
                        "description": "Add all default translations from all *Desc tables in the database. This operation will only add translations for a default catalog installation. Defaults can be customized in SQL scripts located in WEB-INF/classes/setup/sql/data/*.",
                        "operationId": "addLanguages",
                        "parameters": [
                            {
                                "name": "langCode",
                                "in": "path",
                                "description": "ISO 3 letter code",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Language translations added."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrator can access it."
                            },
                            "404": {
                                "description": "Resource not found. eg. No SQL file available for that langugae."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "languages"
                        ],
                        "summary": "Remove a language",
                        "description": "Delete all translations from all *Desc tables in the database. Warning: This will also remove all translations you may have done to those objects (eg. custom groups).",
                        "operationId": "deleteLanguage",
                        "parameters": [
                            {
                                "name": "langCode",
                                "in": "path",
                                "description": "ISO 3 letter code",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrator can access it."
                            },
                            "204": {
                                "description": "Language translations removed."
                            }
                        }
                    }
                },
                "/registries/crs/{id}": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Get CRS",
                        "operationId": "getCrs",
                        "parameters": [
                            {
                                "name": "id",
                                "in": "path",
                                "description": "CRS identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "CRS not found.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Crs"
                                        }
                                    },
                                    "application/xml": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Crs"
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "CRS details.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Crs"
                                        }
                                    },
                                    "application/xml": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Crs"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/unpublish": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Unsets privileges for ALL group to publish the metadata for all users.",
                        "operationId": "unpublish",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            },
                            "204": {
                                "description": "Settings updated."
                            }
                        }
                    }
                },
                "/userfeedback": {
                    "get": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Finds a list of user feedback records. ",
                        "description": " This list will include also the draft user feedback if the client is logged as reviewer.",
                        "operationId": "getUserComments",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "query",
                                "description": "Metadata record UUID.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "size",
                                "in": "query",
                                "description": "Maximum number of feedback to return.",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": -1
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserFeedbackDTO"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Creates a user feedback",
                        "description": "Creates a user feedback in draft status if the user is not logged in.",
                        "operationId": "newUserFeedback",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/UserFeedbackDTO"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/tools/migration/steps/{stepName}": {
                    "put": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Call a migration step",
                        "operationId": "callStep",
                        "parameters": [
                            {
                                "name": "stepName",
                                "in": "path",
                                "description": "Class name to execute corresponding to a migration step. See DatabaseMigrationTask.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "org.fao.geonet.api.records.attachments.MetadataResourceDatabaseMigration"
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Created",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/sources": {
                    "get": {
                        "tags": [
                            "sources"
                        ],
                        "summary": "Get all sources",
                        "description": "Sources are the local catalogue, subportal, external catalogue (when importing MEF files) or harvesters.",
                        "operationId": "getSubPortals_1",
                        "parameters": [
                            {
                                "name": "group",
                                "in": "query",
                                "description": "Group owner of the source (only applies to subportal).",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "List of source catalogues.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Source"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "sources"
                        ],
                        "summary": "Add a source",
                        "operationId": "addSource",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Source"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Source created.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/registries/vocabularies/keyword": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Get keyword by id",
                        "description": "Retrieve XML representation of keyword(s) from same thesaurususing different transformations. 'to-iso19139-keyword' is the default and return an ISO19139 snippet.'to-iso19139-keyword-as-xlink' return an XLinked element. Custom transformation can be create on a per schema basis.",
                        "operationId": "getKeywordById_1",
                        "parameters": [
                            {
                                "name": "id",
                                "in": "query",
                                "description": "Keyword identifier or list of keyword identifiers comma separated.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "thesaurus",
                                "in": "query",
                                "description": "Thesaurus to look info for the keyword(s).",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "lang",
                                "in": "query",
                                "description": "Languages.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "keywordOnly",
                                "in": "query",
                                "description": "Only print the keyword, no thesaurus information.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "transformation",
                                "in": "query",
                                "description": "XSL template to use (ISO19139 keyword by default, see convert.xsl).",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "langMap",
                                "in": "query",
                                "description": "langMap, that converts the values in the 'lang' parameter to how they will be actually represented in the record. {'fre':'fra'} or {'fre':'fr'}.  Missing/empty means to convert to iso 2 letter.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "Accept",
                                "in": "header",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "application/xml"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "XML snippet with requested keywords.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Get keyword by id",
                        "description": "Retrieve XML representation of keyword(s) from same thesaurususing different transformations. 'to-iso19139-keyword' is the default and return an ISO19139 snippet.'to-iso19139-keyword-as-xlink' return an XLinked element. Custom transformation can be create on a per schema basis.",
                        "operationId": "getKeywordById",
                        "parameters": [
                            {
                                "name": "id",
                                "in": "query",
                                "description": "Keyword identifier or list of keyword identifiers comma separated.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "thesaurus",
                                "in": "query",
                                "description": "Thesaurus to look info for the keyword(s).",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "lang",
                                "in": "query",
                                "description": "Languages.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "keywordOnly",
                                "in": "query",
                                "description": "Only print the keyword, no thesaurus information.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "transformation",
                                "in": "query",
                                "description": "XSL template to use (ISO19139 keyword by default, see convert.xsl).",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "langMap",
                                "in": "query",
                                "description": "langMap, that converts the values in the 'lang' parameter to how they will be actually represented in the record. {'fre':'fra'} or {'fre':'fr'}.  Missing/empty means to convert to iso 2 letter.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "Accept",
                                "in": "header",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "application/xml"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "XML snippet with requested keywords.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/editor/elements/{direction}": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Reorder element",
                        "operationId": "addElement",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "ref",
                                "in": "query",
                                "description": "Reference of the element to move.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "direction",
                                "in": "path",
                                "description": "Direction",
                                "required": true,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "up",
                                        "down"
                                    ]
                                }
                            },
                            {
                                "name": "displayAttributes",
                                "in": "query",
                                "description": "Should attributes be shown on the editor snippet?",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Element reordered."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/records/sharing": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get record sharing settings",
                        "operationId": "getSharingSettings",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SharingResponse"
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Return a default array of group and operations that can be used to set record sharing properties.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SharingResponse"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Set sharing settings for one or more records",
                        "description": "See record sharing for more details.",
                        "operationId": "share_1",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/SharingParameter"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Report about updated privileges.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/status": {
                    "get": {
                        "tags": [
                            "status"
                        ],
                        "summary": "Get status",
                        "operationId": "getStatusList",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/StatusValue"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "status"
                        ],
                        "summary": "Delete all record history and status",
                        "operationId": "deleteAllHistoryAndStatus",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it."
                            },
                            "204": {
                                "description": "Status removed."
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/status/{type}": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get record status history by type",
                        "operationId": "getRecordStatusHistoryByType",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "type",
                                "in": "path",
                                "description": "Type",
                                "required": true,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "workflow",
                                        "task",
                                        "event"
                                    ]
                                }
                            },
                            {
                                "name": "details",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            {
                                "name": "sortOrder",
                                "in": "query",
                                "description": "Sort direction",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "ASC",
                                        "DESC"
                                    ],
                                    "default": "DESC"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {}
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/editor/elements": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add element",
                        "operationId": "addElement_1",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "ref",
                                "in": "query",
                                "description": "Reference of the insertion point.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "name",
                                "in": "query",
                                "description": "Name of the element to add (with prefix)",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "child",
                                "in": "query",
                                "description": "Use geonet:attribute for attributes or child name.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "displayAttributes",
                                "in": "query",
                                "description": "Should attributes be shown on the editor snippet?",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Element added."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete element",
                        "operationId": "deleteElement",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "ref",
                                "in": "query",
                                "description": "Reference of the element to remove.",
                                "required": true,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "parent",
                                "in": "query",
                                "description": "Name of the parent.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "displayAttributes",
                                "in": "query",
                                "description": "Should attributes be shown on the editor snippet?",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "204": {
                                "description": "Element removed."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/pages/config/status": {
                    "get": {
                        "tags": [
                            "pages"
                        ],
                        "operationId": "getPageStatus",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Page found",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "enum": [
                                                    "PUBLIC",
                                                    "PUBLIC_ONLY",
                                                    "PRIVATE",
                                                    "HIDDEN"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/zip": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get a set of metadata records as ZIP",
                        "description": "Metadata Exchange Format (MEF) is returned. MEF is a ZIP file containing the metadata as XML and some others files depending on the version requested. See http://geonetwork-opensource.org/manuals/trunk/eng/users/annexes/mef-format.html.",
                        "operationId": "exportAsMef",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "format",
                                "in": "query",
                                "description": "MEF file format.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "simple",
                                        "partial",
                                        "full"
                                    ],
                                    "default": "full"
                                }
                            },
                            {
                                "name": "withRelated",
                                "in": "query",
                                "description": "With related records (parent and service).",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "withXLinksResolved",
                                "in": "query",
                                "description": "Resolve XLinks in the records.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "withXLinkAttribute",
                                "in": "query",
                                "description": "Preserve XLink URLs in the records.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "addSchemaLocation",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "approved",
                                "in": "query",
                                "description": "Download the approved version",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "Accept",
                                "in": "header",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "application/x-gn-mef-2-zip"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Return requested records as ZIP."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    }
                },
                "/site/settings/details": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get settings with details",
                        "description": "Provides also setting properties.",
                        "operationId": "getSettingsDetails",
                        "parameters": [
                            {
                                "name": "set",
                                "in": "query",
                                "description": "Setting set. A common set of settings to retrieve.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "INSPIRE",
                                            "CSW",
                                            "HARVESTER",
                                            "USER_GROUP_ONLY",
                                            "AUTH",
                                            "READ_ONLY",
                                            "INDEX",
                                            "SYSTEMINFO",
                                            "STAGING_PROFILE",
                                            "TYPE"
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "key",
                                "in": "query",
                                "description": "Setting key",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Settings with details.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Setting"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/rate": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Rate a record",
                        "description": "User rating of metadata. If the metadata was harvested using the 'GeoNetwork' protocol and the system setting localrating/enable is false (the default), the user's rating is shared between GN nodes in this harvesting network. If the metadata was not harvested or if localrating/enable is true then 'local rating' is applied, counting only rating from users of this node.<br/>When a remote rating is applied, the local rating is not updated. It will be updated on the next harvest run (FIXME ?).",
                        "operationId": "rateRecord",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "integer",
                                        "description": "Rating",
                                        "format": "int32"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "New rating value.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/reports/users": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get the list of users \"active\" during a time period.",
                        "operationId": "getActiveUsers",
                        "parameters": [
                            {
                                "name": "dateFrom",
                                "in": "query",
                                "description": "From date of users login date",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "dateTo",
                                "in": "query",
                                "description": "To date of users login date",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "groups",
                                "in": "query",
                                "description": "Group(s) for the users",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "List of users \"active\" during a time period."
                            }
                        }
                    }
                },
                "/pages/config/formats": {
                    "get": {
                        "tags": [
                            "pages"
                        ],
                        "operationId": "getPageFormats",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Page found",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "enum": [
                                                    "LINK",
                                                    "HTML",
                                                    "HTMLPAGE",
                                                    "TEXT"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/formatters/zip": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get a metadata record as ZIP",
                        "description": "Metadata Exchange Format (MEF) is returned. MEF is a ZIP file containing the metadata as XML and some others files depending on the version requested. See http://geonetwork-opensource.org/manuals/trunk/eng/users/annexes/mef-format.html.",
                        "operationId": "getRecordAsZip",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "format",
                                "in": "query",
                                "description": "MEF file format.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "simple",
                                        "partial",
                                        "full"
                                    ],
                                    "default": "full"
                                }
                            },
                            {
                                "name": "withRelated",
                                "in": "query",
                                "description": "With related records (parent and service).",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "withXLinksResolved",
                                "in": "query",
                                "description": "Resolve XLinks in the records.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "withXLinkAttribute",
                                "in": "query",
                                "description": "Preserve XLink URLs in the records.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "addSchemaLocation",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "approved",
                                "in": "query",
                                "description": "Download the approved version",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "Accept",
                                "in": "header",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "application/x-gn-mef-2-zip"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Return the record."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    }
                },
                "/logos": {
                    "get": {
                        "tags": [
                            "logos"
                        ],
                        "summary": "Get all logos",
                        "description": "Logos are used for the catalog, the groups logos, and harvester icons. Logos are stored in the data directory in <dataDirectory>/resources/images/harvesting.<br/> Records are attached to a source. A source can be the local catalog or a harvester node. When a source is created, its logo is located in the images/logos folder with the source UUID as filename. For some sources the logo can be automatically retrieved (eg. when harvesting GeoNetwork catalogs). For others, the logo is usually manually defined when configuring the harvester.",
                        "operationId": "getLogos",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "uniqueItems": true,
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "logos"
                        ],
                        "summary": "Add a logo",
                        "operationId": "addLogo",
                        "parameters": [
                            {
                                "name": "file",
                                "in": "query",
                                "description": "The logo image to upload",
                                "required": true,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            },
                            {
                                "name": "overwrite",
                                "in": "query",
                                "description": "Overwrite if exists",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Logo added.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/submit": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Set the records status to submitted",
                        "operationId": "submit",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/MetadataBatchSubmitParameter"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "400": {
                                "description": "Metadata workflow not enabled.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Metadata submitted .",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/templates": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add templates",
                        "description": "Add template records for one or more schemas. Templates are defined for each standard in the template folder as XML files. Template may also contains subtemplates.",
                        "operationId": "addTemplates",
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "query",
                                "description": "Schema identifiers",
                                "required": true,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "example": "iso19139"
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Return a report of what has been done.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/status/workflow/last": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get last workflow status for a record",
                        "operationId": "getStatus",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Record status.",
                                "content": {}
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {}
                            }
                        }
                    }
                },
                "/i18n/db/custom": {
                    "get": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "List custom user translations",
                        "operationId": "getCustomTranslations",
                        "parameters": [
                            {
                                "name": "type",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Translations"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/importfrommap": {
                    "post": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add a map metadata record from OGC OWS context",
                        "description": "Add record in the catalog by uploading a map context.",
                        "operationId": "insertOgcMapContextFile",
                        "parameters": [
                            {
                                "name": "title",
                                "in": "query",
                                "description": "A map title",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "recordAbstract",
                                "in": "query",
                                "description": "A map abstract",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "xml",
                                "in": "query",
                                "description": "OGC OWS context as string",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "filename",
                                "in": "query",
                                "description": "OGC OWS context file name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "url",
                                "in": "query",
                                "description": "OGC OWS context URL",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "viewerUrl",
                                "in": "query",
                                "description": "A map viewer URL to visualize the map",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "overview",
                                "in": "query",
                                "description": "Map overview as PNG (base64 encoded)",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "overviewFilename",
                                "in": "query",
                                "description": "Map overview filename",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "topic",
                                "in": "query",
                                "description": "Topic category",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "publishToAll",
                                "in": "query",
                                "description": "Publish record.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "uuidProcessing",
                                "in": "query",
                                "description": "Record identifier processing.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "GENERATEUUID",
                                        "NOTHING",
                                        "OVERWRITE"
                                    ],
                                    "default": "NOTHING"
                                }
                            },
                            {
                                "name": "group",
                                "in": "query",
                                "description": "The group the record is attached to.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Report about imported records.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/languages/application": {
                    "get": {
                        "tags": [
                            "languages"
                        ],
                        "summary": "Get languages available in the application",
                        "description": "Languages available in this version of the application. Those that you can add using PUT operation and which have SQL script to initialize the language.",
                        "operationId": "getApplicationLanguages",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Language"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/status": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get record status history",
                        "operationId": "getRecordStatusHistory",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "details",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            {
                                "name": "sortOrder",
                                "in": "query",
                                "description": "Sort direction",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "ASC",
                                        "DESC"
                                    ],
                                    "default": "DESC"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {}
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Set the record status",
                        "operationId": "setStatus",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/MetadataStatusParameter"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "400": {
                                "description": "Metadata workflow not enabled.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string",
                                                "enum": [
                                                    "UPDATED",
                                                    "UNCHANGED",
                                                    "DELETED"
                                                ]
                                            }
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string",
                                                "enum": [
                                                    "UPDATED",
                                                    "UNCHANGED",
                                                    "DELETED"
                                                ]
                                            }
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Status updated.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string",
                                                "enum": [
                                                    "UPDATED",
                                                    "UNCHANGED",
                                                    "DELETED"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete all record status",
                        "operationId": "deleteAllRecordStatus",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Status not found."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it."
                            },
                            "204": {
                                "description": "Status removed."
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/tags": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get record tags",
                        "description": "Tags are used to classify information.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/tag-information/tagging-with-categories.html'>More info</a>",
                        "operationId": "getRecordTags",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Record tags.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "uniqueItems": true,
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MetadataCategory"
                                            }
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "uniqueItems": true,
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MetadataCategory"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Add tags to a record",
                        "operationId": "tagRecord",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "id",
                                "in": "query",
                                "description": "Tag identifier",
                                "required": true,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            },
                            {
                                "name": "clear",
                                "in": "query",
                                "description": "Clear all before adding new ones",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            },
                            "201": {
                                "description": "Record tags added."
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete tags of a record",
                        "operationId": "deleteTags",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "id",
                                "in": "query",
                                "description": "Tag identifier. If none, all tags are removed.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "204": {
                                "description": "Record tags removed."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/i18n/packages": {
                    "get": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Get list of translation packages.",
                        "operationId": "getTranslationsPackage_1",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/userfeedback": {
                    "get": {
                        "tags": [
                            "userfeedback"
                        ],
                        "summary": "Finds a list of user feedback for a specific records. ",
                        "description": " This list will include also the draft user feedback if the client is logged as reviewer.",
                        "operationId": "getUserCommentsOnARecord",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Metadata record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "size",
                                "in": "query",
                                "description": "Maximum number of feedback to return.",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": -1
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserFeedbackDTO"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/users/groups": {
                    "get": {
                        "tags": [
                            "users"
                        ],
                        "summary": "Retrieve all user groups",
                        "operationId": "retrieveAllUserGroups",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserGroupsResponse"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/status/{type}": {
                    "get": {
                        "tags": [
                            "status"
                        ],
                        "summary": "Get status by type",
                        "operationId": "getStatusByType",
                        "parameters": [
                            {
                                "name": "type",
                                "in": "path",
                                "description": "Type",
                                "required": true,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "workflow",
                                        "task",
                                        "event"
                                    ]
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/StatusValue"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/pdf": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get a set of metadata records as PDF",
                        "description": "The PDF is a short summary of each records with links to the complete metadata record in different format (ie. landing page on the portal, XML)",
                        "operationId": "exportAsPdf",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Return requested records as PDF."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    }
                },
                "/processes/db/search-and-replace": {
                    "get": {
                        "tags": [
                            "processes"
                        ],
                        "summary": "Preview of search and replace text.",
                        "description": " When errors occur during processing, the processing report is returned in JSON format.",
                        "operationId": "previewProcessSearchAndReplace",
                        "parameters": [
                            {
                                "name": "useRegexp",
                                "in": "query",
                                "description": "Use regular expression (may not be supported by all databases - tested with H2 and PostgreSQL)",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "search",
                                "in": "query",
                                "description": "Value to search for",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "replace",
                                "in": "query",
                                "description": "Replacement",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "regexpFlags",
                                "in": "query",
                                "description": "regexpFlags",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "diffType",
                                "in": "query",
                                "description": "Return differences with diff, diffhtml or patch",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "patch",
                                        "diff",
                                        "diffhtml"
                                    ]
                                }
                            },
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "500": {
                                "description": "If one record processed is invalid.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Processed records.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "post": {
                        "tags": [
                            "processes"
                        ],
                        "summary": "Apply a database search and replace to one or more records",
                        "description": "Process a metadata with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process.",
                        "operationId": "processSearchAndReplace",
                        "parameters": [
                            {
                                "name": "useRegexp",
                                "in": "query",
                                "description": "Use regular expression (may not be supported by all databases - tested with H2 and PostgreSQL)",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "search",
                                "in": "query",
                                "description": "Value to search for",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "replace",
                                "in": "query",
                                "description": "Replacement",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "regexpFlags",
                                "in": "query",
                                "description": "regexpFlags",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "updateDateStamp",
                                "in": "query",
                                "description": "If true updates the DateStamp (or equivalent in standards different to ISO 19139) field in the metadata with the current timestamp",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "index",
                                "in": "query",
                                "description": "Index after processing",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                },
                                "example": false
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/XsltMetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Report about processed records.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/XsltMetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/ownership": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Set record group and owner",
                        "operationId": "setRecordOwnership",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "groupIdentifier",
                                "in": "query",
                                "description": "Group identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "userIdentifier",
                                "in": "query",
                                "description": "User identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "approved",
                                "in": "query",
                                "description": "Use approved version or not",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                },
                                "example": true
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "Record group and owner updated",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/unpublish": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Un-publish one or more records",
                        "description": "See record sharing for more details.",
                        "operationId": "unpublish_1",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Report about updated privileges.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Editors can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/sources/{type}": {
                    "get": {
                        "tags": [
                            "sources"
                        ],
                        "summary": "Get all sources by type",
                        "description": "Sources are the local catalogue, subportal, external catalogue (when importing MEF files) or harvesters.",
                        "operationId": "getSourcesByType",
                        "parameters": [
                            {
                                "name": "type",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "portal",
                                        "subportal",
                                        "externalportal",
                                        "harvester"
                                    ]
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Source"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/reports/metadataupdated": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get the updated metadata during a period.",
                        "operationId": "getReportUpdatedMetadata",
                        "parameters": [
                            {
                                "name": "dateFrom",
                                "in": "query",
                                "description": "From date of metadata change date",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "dateTo",
                                "in": "query",
                                "description": "To date of metadata change date",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "groups",
                                "in": "query",
                                "description": "Metadata group(s)",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Updated metadata during a period."
                            }
                        }
                    }
                },
                "/eealayoutupdate/head": {
                    "get": {
                        "tags": [
                            "eealayoutupdate"
                        ],
                        "summary": "Get EEA <head> content",
                        "operationId": "getHead",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/xhtml+xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/site/index/commit": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Index commit",
                        "operationId": "indexCommit",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK"
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Force to commit pending documents in index.",
                        "description": "May be used when indexing task is hanging.",
                        "operationId": "commitIndexChanges",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Changes committed."
                            }
                        }
                    }
                },
                "/standards": {
                    "get": {
                        "tags": [
                            "standards"
                        ],
                        "summary": "Get standards",
                        "operationId": "getStandardConfigurations",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "List of standards.",
                                "content": {}
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/restore": {
                    "post": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Restore saved content from a status record",
                        "operationId": "restoreAtStatusSave",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "statusId",
                                "in": "path",
                                "description": "Status identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "userId",
                                "in": "path",
                                "description": "User identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "changeDate",
                                "in": "path",
                                "description": "Change date",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Record restored."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/standards/{schema}/batchconfiguration": {
                    "get": {
                        "tags": [
                            "standards"
                        ],
                        "summary": "Get batch editor configuration for a standard",
                        "operationId": "getConfiguration",
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "path",
                                "description": "Schema identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "iso19139"
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "$ref": "#/components/schemas/BatchEditing"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/standards/{schema}/descriptors/{element}/details": {
                    "get": {
                        "tags": [
                            "standards"
                        ],
                        "summary": "Get descriptor details",
                        "operationId": "getElementDetails",
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "path",
                                "description": "Schema identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "iso19139"
                            },
                            {
                                "name": "element",
                                "in": "path",
                                "description": "Descriptor name",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "parent",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "displayIf",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "xpath",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "isoType",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Element"
                                        }
                                    },
                                    "application/xml": {
                                        "schema": {
                                            "$ref": "#/components/schemas/Element"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/reports/datadownloads": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get list of metadata file downloads",
                        "operationId": "getReportDataDownloads",
                        "parameters": [
                            {
                                "name": "dateFrom",
                                "in": "query",
                                "description": "From date of the metadata downloads",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "dateTo",
                                "in": "query",
                                "description": "To date of the metadata downloads",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "groups",
                                "in": "query",
                                "description": "Metadata group(s)",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "List of metadata file downloads."
                            }
                        }
                    }
                },
                "/tags/{tagIdentifier}": {
                    "get": {
                        "tags": [
                            "tags"
                        ],
                        "summary": "Get a tag",
                        "operationId": "getTag",
                        "parameters": [
                            {
                                "name": "tagIdentifier",
                                "in": "path",
                                "description": "Tag identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Tag details.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/MetadataCategory"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "tags"
                        ],
                        "summary": "Update a tag",
                        "operationId": "updateTag",
                        "parameters": [
                            {
                                "name": "tagIdentifier",
                                "in": "path",
                                "description": "Tag identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/MetadataCategory"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "Tag updated.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "tags"
                        ],
                        "summary": "Remove a tag",
                        "operationId": "deleteTag",
                        "parameters": [
                            {
                                "name": "tagIdentifier",
                                "in": "path",
                                "description": "Tag identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "Tag removed.",
                                "content": {
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/index": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Index a set of records",
                        "description": "Index a set of records provided either by a bucket or a list of uuids",
                        "operationId": "index",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Administrators can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "nullObject": {
                                                    "type": "boolean"
                                                },
                                                "array": {
                                                    "type": "boolean"
                                                },
                                                "empty": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": {
                                                "type": "object"
                                            }
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Record indexed.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "nullObject": {
                                                    "type": "boolean"
                                                },
                                                "array": {
                                                    "type": "boolean"
                                                },
                                                "empty": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": {
                                                "type": "object"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/mapservers/{mapserverId}/auth": {
                    "post": {
                        "tags": [
                            "mapservers"
                        ],
                        "summary": "Update a mapserver authentication",
                        "description": "The remote mapserver REST API may require basic authentication. This operation set the username and password.",
                        "operationId": "updateMapserver",
                        "parameters": [
                            {
                                "name": "mapserverId",
                                "in": "path",
                                "description": "Mapserver identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "username",
                                "in": "query",
                                "description": "User name",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "password",
                                "in": "query",
                                "description": "Password",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found."
                            },
                            "204": {
                                "description": "Mapserver updated."
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it."
                            }
                        }
                    }
                },
                "/records/{metadataUuid}": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get a metadata record",
                        "description": "Depending on the accept header the appropriate formatter is used. When requesting a ZIP, a MEF version 2 file is returned. When requesting HTML, the default formatter is used.",
                        "operationId": "getRecord",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "Accept",
                                "in": "header",
                                "description": "Accept header should indicate which is the appropriate format to return. It could be text/html, application/xml, application/zip, ...If no appropriate Accept header found, the XML format is returned.",
                                "required": true,
                                "schema": {
                                    "type": "string",
                                    "default": "application/xml"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found.",
                                "content": {
                                    "text/html": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/xhtml+xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/pdf": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/zip": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/x-gn-mef-1-zip": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/x-gn-mef-2-zip": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Return the record.",
                                "content": {
                                    "text/html": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/xhtml+xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/pdf": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/zip": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/x-gn-mef-1-zip": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/x-gn-mef-2-zip": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "text/html": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/xhtml+xml": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/pdf": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/zip": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/x-gn-mef-1-zip": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "application/x-gn-mef-2-zip": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    },
                                    "*/*": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "delete": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Delete a record",
                        "description": "User MUST be able to edit the record to delete it. By default, a backup is made in ZIP format. After that, the record attachments are removed, the document removed from the index and then from the database.",
                        "operationId": "deleteRecord",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "withBackup",
                                "in": "query",
                                "description": "Backup first the record as MEF in the metadata removed folder.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "204": {
                                "description": "Record deleted."
                            },
                            "401": {
                                "description": "This template is referenced"
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            }
                        }
                    }
                },
                "/registries/crs": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Search coordinate reference system (CRS)",
                        "description": "Based on GeoTools EPSG database. If phrase query, each words are searched separately.",
                        "operationId": "searchCrs",
                        "parameters": [
                            {
                                "name": "q",
                                "in": "query",
                                "description": "Search value",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "type",
                                "in": "query",
                                "description": "Type of CRS",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "CoordinateReferenceSystem",
                                        "VerticalCRS",
                                        "GeographicCRS",
                                        "ProjectedCRS"
                                    ]
                                }
                            },
                            {
                                "name": "rows",
                                "in": "query",
                                "description": "Number of results. Default is: 100",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 100
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "List of CRS.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Crs"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/standards/reload": {
                    "get": {
                        "tags": [
                            "standards"
                        ],
                        "summary": "Reload standards",
                        "operationId": "reloadSchema",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Standards reloaded."
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/formatters/xml": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get a metadata record as XML or JSON",
                        "operationId": "getRecordAs",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "addSchemaLocation",
                                "in": "query",
                                "description": "Add XSD schema location based on standard configuration (see schema-ident.xml).",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "increasePopularity",
                                "in": "query",
                                "description": "Increase record popularity",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "withInfo",
                                "in": "query",
                                "description": "Add geonet:info details",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "attachment",
                                "in": "query",
                                "description": "Download as a file",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "approved",
                                "in": "query",
                                "description": "Download the approved version",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "Accept",
                                "in": "header",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "application/xml"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Return the record.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/formatters/json": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get a metadata record as XML or JSON",
                        "operationId": "getRecordAs_1",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "addSchemaLocation",
                                "in": "query",
                                "description": "Add XSD schema location based on standard configuration (see schema-ident.xml).",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "increasePopularity",
                                "in": "query",
                                "description": "Increase record popularity",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "withInfo",
                                "in": "query",
                                "description": "Add geonet:info details",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "attachment",
                                "in": "query",
                                "description": "Download as a file",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "approved",
                                "in": "query",
                                "description": "Download the approved version",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "Accept",
                                "in": "header",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "application/xml"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Return the record.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "application/xml": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    },
                                    "application/json": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/csv": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get a set of metadata records as CSV",
                        "description": "The CSV is a short summary of each records.",
                        "operationId": "exportAsCsv",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Return requested records as CSV."
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource."
                            }
                        }
                    }
                },
                "/atom/describe/service/{metadataUuid}": {
                    "get": {
                        "tags": [
                            "atom"
                        ],
                        "summary": "Describe service",
                        "operationId": "describe",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "metadataUuid",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Feeds.",
                                "content": {}
                            },
                            "204": {
                                "description": "Not authenticated.",
                                "content": {}
                            }
                        }
                    }
                },
                "/search/records/_search": {
                    "post": {
                        "tags": [
                            "search"
                        ],
                        "summary": "Search endpoint",
                        "description": "See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html for search parameters details.",
                        "operationId": "search",
                        "parameters": [
                            {
                                "name": "bucket",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "metadata"
                                }
                            },
                            {
                                "name": "relatedType",
                                "in": "query",
                                "description": "Type of related resource. If none, no associated resource returned.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "children",
                                            "parent",
                                            "brothersAndSisters",
                                            "siblings",
                                            "associated",
                                            "services",
                                            "datasets",
                                            "fcats",
                                            "hasfeaturecats",
                                            "sources",
                                            "hassources",
                                            "related",
                                            "onlines",
                                            "thumbnails"
                                        ]
                                    },
                                    "default": []
                                }
                            }
                        ],
                        "requestBody": {
                            "description": "JSON request based on Elasticsearch API.",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/records/batchediting": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Edit a set of records by XPath expressions. This operations applies the update-fixed-info.xsl transformation for the metadata schema and updates the change date if the parameter updateDateStamp is set to true.",
                        "operationId": "batchEdit",
                        "parameters": [
                            {
                                "name": "uuids",
                                "in": "query",
                                "description": "Record UUIDs. If null current selection is used.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "updateDateStamp",
                                "in": "query",
                                "description": "If true updates the DateStamp (or equivalent in standards different to ISO 19139) field in the metadata with the current timestamp",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/BatchEditParameter"
                                        }
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Return a report of what has been done.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/IProcessingReport"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/IProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/ui": {
                    "get": {
                        "tags": [
                            "ui"
                        ],
                        "summary": "Get UI configuration",
                        "operationId": "getUiConfigurations",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "List of configuration.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UiSetting"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "put": {
                        "tags": [
                            "ui"
                        ],
                        "summary": "Create a UI configuration",
                        "operationId": "putUiConfiguration",
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/UiSetting"
                                    }
                                }
                            },
                            "required": true
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "201": {
                                "description": "UI configuration created. Return the new UI configuration identifier.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/eealayoutupdate/refreshtemplate": {
                    "get": {
                        "tags": [
                            "eealayoutupdate"
                        ],
                        "summary": "Refresh EEA Template from API",
                        "description": "refreshtemplate",
                        "operationId": "refreshTemplate",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/atom/scan": {
                    "get": {
                        "tags": [
                            "atom"
                        ],
                        "summary": "Scan records for ATOM feeds",
                        "description": "Check in the settings which protocol identify ATOM feeds in your catalogue.Only applies to ISO19139 records.",
                        "operationId": "scan",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Scan completed.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "Not authenticated.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/selections": {
                    "get": {
                        "tags": [
                            "selections"
                        ],
                        "summary": "Get current selections",
                        "operationId": "getSelectionsAndSize",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/mapservices": {
                    "get": {
                        "tags": [
                            "mapservices"
                        ],
                        "summary": "Get mapservices",
                        "description": "Return the list of mapservices. mapservices are used to identify secured map services.",
                        "operationId": "getMapservices",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MapService"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/groups/{groupId}/logo": {
                    "get": {
                        "tags": [
                            "groups"
                        ],
                        "summary": "Get the group logo image.",
                        "description": "If last-modified header is present it is used to check if the logo has been modified since the header date. If it hasn't been modified returns an empty 304 Not Modified response. If modified returns the image. If the group has no logo then returns a transparent 1x1 px PNG image.",
                        "operationId": "getGroupLogo",
                        "parameters": [
                            {
                                "name": "groupId",
                                "in": "path",
                                "description": "Group identifier",
                                "required": true,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/standards/{schema}/codelists/{codelist}": {
                    "get": {
                        "tags": [
                            "standards"
                        ],
                        "summary": "Get codelist translations",
                        "operationId": "getSchemaTranslations",
                        "parameters": [
                            {
                                "name": "schema",
                                "in": "path",
                                "description": "Schema identifier",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "iso19139"
                            },
                            {
                                "name": "codelist",
                                "in": "path",
                                "description": "Codelist element name or alias",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "parent",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "displayIf",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "xpath",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "isoType",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/i18n/cache": {
                    "delete": {
                        "tags": [
                            "tools"
                        ],
                        "summary": "Clean translation packages cache.",
                        "operationId": "cleanTranslationsPackagesCache",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                },
                "/site/index": {
                    "put": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Index",
                        "operationId": "index_1",
                        "parameters": [
                            {
                                "name": "reset",
                                "in": "query",
                                "description": "Drop and recreate index",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "asynchronous",
                                "in": "query",
                                "description": "Asynchronous mode (only on all records. ie. no selection bucket)",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "havingXlinkOnly",
                                "in": "query",
                                "description": "Records having only XLinks",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            {
                                "name": "indices",
                                "in": "query",
                                "description": "Index. By default only remove record index.",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "default": [
                                        "records"
                                    ]
                                }
                            },
                            {
                                "name": "bucket",
                                "in": "query",
                                "description": "Selection bucket name",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/languages": {
                    "get": {
                        "tags": [
                            "languages"
                        ],
                        "summary": "Get languages",
                        "description": "Languages for the application having translations in the database. All tables with 'Desc' suffix contains translation for some domain objects like groups, tags, ...",
                        "operationId": "getLanguages",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Language"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/atom/describe/resource": {
                    "get": {
                        "tags": [
                            "atom"
                        ],
                        "summary": "Describe resource",
                        "operationId": "describeResource",
                        "parameters": [
                            {
                                "name": "fileIdentifier",
                                "in": "query",
                                "description": "fileIdentifier",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "spatial_dataset_identifier_code",
                                "in": "query",
                                "description": "spatial_dataset_identifier_code",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "spatial_dataset_identifier_namespace",
                                "in": "query",
                                "description": "spatial_dataset_identifier_namespace",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Feeds.",
                                "content": {}
                            },
                            "204": {
                                "description": "Not authenticated.",
                                "content": {}
                            }
                        }
                    }
                },
                "/atom/download/resource": {
                    "get": {
                        "tags": [
                            "atom"
                        ],
                        "summary": "Get a data file related to dataset",
                        "description": "This service if a dataset has only 1 download format for a CRS returns the file, otherwise returns a feed with downloads for the dataset.",
                        "operationId": "downloadResource",
                        "parameters": [
                            {
                                "name": "spatial_dataset_identifier_code",
                                "in": "query",
                                "description": "spatial_dataset_identifier_code",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "spatial_dataset_identifier_namespace",
                                "in": "query",
                                "description": "spatial_dataset_identifier_namespace",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "crs",
                                "in": "query",
                                "description": "crs",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Get a data file related to dataset",
                                "content": {}
                            },
                            "204": {
                                "description": "Not authenticated.",
                                "content": {}
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/query/{savedQuery}": {
                    "post": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Apply a saved query for this metadata",
                        "description": "All parameters will be substituted to the XPath query. eg. {{protocol}} in the XPath expression will be replaced by the protocol parameter provided in the request body.",
                        "operationId": "applyQuery",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "The metadata UUID",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "43d7c186-2187-4bcd-8843-41e575a5ef56"
                            },
                            {
                                "name": "savedQuery",
                                "in": "path",
                                "description": "The saved query to apply",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                },
                                "example": "wfs-indexing-config"
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "List of matching elements. If element are nodes, then they are returned as string.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/permalink": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get metadata record permalink",
                        "description": "Permalink is by default the landing page formatter but can be configured in the admin console > settings. If the record as a DOI and if enabled in the settings, then it takes priority.",
                        "operationId": "getRecordPermalink",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "200": {
                                "description": "Return the permalink URL.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {
                                    "text/plain": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/extents.png": {
                    "get": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Get record extents as image",
                        "description": "A rendering of the geometry as a png. If no background is specified the image will be transparent. In getMap the envelope of the geometry is calculated then it is expanded by a factor.  That factor is the size of the map.  This allows the map to be slightly bigger than the geometry allowing some context to be shown. This parameter allows different factors to be chosen per scale level.\nProportion is the proportion of the world that the geometry covers (bounds of WGS84)/(bounds of geometry in WGS84)\n\nNamed backgrounds allow the background parameter to be a simple key and the complete URL will be looked up from this list of named backgrounds\n",
                        "operationId": "getAllRecordExtentAsImage",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "mapsrs",
                                "in": "query",
                                "description": "(optional) the background map projection. If not passed uses the region/getmap/mapproj setting. If the setting is not set defaults to EPSG:4326",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "width",
                                "in": "query",
                                "description": "(optional) width of the image that is created. Only one of width and height are permitted",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 300
                                }
                            },
                            {
                                "name": "height",
                                "in": "query",
                                "description": "(optional) height of the image that is created. Only one of width and height are permitted",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "background",
                                "in": "query",
                                "description": "(optional) URL for loading a background image for regions or a key that references the namedBackgrounds (configured in config-spring-geonetwork.xml). A WMS GetMap request is the typical example. The URL must be parameterized with the following parameters: minx, maxx, miny, maxy, width, height",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "settings"
                                }
                            },
                            {
                                "name": "fillColor",
                                "in": "query",
                                "description": "(optional) Fill color with format RED,GREEN,BLUE,ALPHA",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "0,0,0,50"
                                }
                            },
                            {
                                "name": "strokeColor",
                                "in": "query",
                                "description": "(optional) Stroke color with format RED,GREEN,BLUE,ALPHA",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "0,0,0,255"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "image/png": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "format": "byte"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/sitemap": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get sitemap",
                        "operationId": "getSitemap",
                        "parameters": [
                            {
                                "name": "format",
                                "in": "query",
                                "description": "Format (xml or html).",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "html"
                                }
                            },
                            {
                                "name": "doc",
                                "in": "query",
                                "description": "page.",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 0
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Site map.",
                                "content": {}
                            }
                        }
                    }
                },
                "/regions/geom.png": {
                    "get": {
                        "tags": [
                            "regions"
                        ],
                        "summary": "Get geometry as image",
                        "description": "A rendering of the geometry as a png.",
                        "operationId": "getGeomAsImage",
                        "parameters": [
                            {
                                "name": "mapsrs",
                                "in": "query",
                                "description": "(optional) the background map projection. If not passed uses the region/getmap/mapproj setting. If the setting is not set defaults to EPSG:4326",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "width",
                                "in": "query",
                                "description": "(optional) width of the image that is created. Only one of width and height are permitted",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 300
                                }
                            },
                            {
                                "name": "height",
                                "in": "query",
                                "description": "(optional) height of the image that is created. Only one of width and height are permitted",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            {
                                "name": "background",
                                "in": "query",
                                "description": "(optional) URL for loading a background image for regions or a key that references the namedBackgrounds (configured in config-spring-geonetwork.xml). A WMS Getmap request is the typical example. The URL must be parameterized with the following parameters: minx, maxx, miny, maxy, width, height",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "settings"
                                }
                            },
                            {
                                "name": "geom",
                                "in": "query",
                                "description": "(optional) a wkt or gml encoded geometry.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "geomtype",
                                "in": "query",
                                "description": "(optional) defines if geom is wkt or gml. Allowed values are wkt and gml. if not specified the it is assumed the geometry is wkt",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "WKT"
                                }
                            },
                            {
                                "name": "geomsrs",
                                "in": "query",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "EPSG:4326"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "image/png": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "format": "byte"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/site": {
                    "get": {
                        "tags": [
                            "site"
                        ],
                        "summary": "Get site (or portal) description",
                        "operationId": "getSiteOrPortalDescription",
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Site description.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SettingsListResponse"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/registries/entries/{uuid}": {
                    "get": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Get a directory entry",
                        "description": "Directory entry (AKA subtemplates) are XML fragments that can be inserted in metadata records using XLinks. XLinks can be remote or local.",
                        "operationId": "getEntry",
                        "parameters": [
                            {
                                "name": "uuid",
                                "in": "path",
                                "description": "Directory entry UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "process",
                                "in": "query",
                                "description": "Process",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "transformation",
                                "in": "query",
                                "description": "Transformation",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "lang",
                                "in": "query",
                                "description": "lang",
                                "required": false,
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "name": "schema",
                                "in": "query",
                                "description": "schema",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "iso19139"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "Directory entry.",
                                "content": {}
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to view the resource.",
                                "content": {}
                            }
                        }
                    }
                },
                "/records/{metadataUuid}/publish": {
                    "put": {
                        "tags": [
                            "records"
                        ],
                        "summary": "Set privileges for ALL group to publish the metadata for all users.",
                        "operationId": "publish_1",
                        "parameters": [
                            {
                                "name": "metadataUuid",
                                "in": "path",
                                "description": "Record UUID.",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. User needs to be able to edit the resource."
                            },
                            "204": {
                                "description": "Settings updated."
                            }
                        }
                    }
                },
                "/formatters/{schema}/{formatter}/files": {
                    "get": {
                        "tags": [
                            "formatters"
                        ],
                        "summary": "Get formatter files",
                        "operationId": "getFormatterFiles",
                        "parameters": [
                            {
                                "name": "formatter",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "schema",
                                "in": "path",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "200": {
                                "description": "OK",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/harvesters/{harvesterUuid}/assign": {
                    "post": {
                        "tags": [
                            "harvesters"
                        ],
                        "summary": "Assign harvester records to a new source",
                        "operationId": "assignHarvestedRecordToSource",
                        "parameters": [
                            {
                                "name": "harvesterUuid",
                                "in": "path",
                                "description": "The harvester UUID",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "source",
                                "in": "query",
                                "description": "The target source UUID",
                                "required": true,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        ],
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "404": {
                                "description": "Resource not found.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string",
                                            "enum": [
                                                "100 CONTINUE",
                                                "101 SWITCHING_PROTOCOLS",
                                                "102 PROCESSING",
                                                "103 CHECKPOINT",
                                                "200 OK",
                                                "201 CREATED",
                                                "202 ACCEPTED",
                                                "203 NON_AUTHORITATIVE_INFORMATION",
                                                "204 NO_CONTENT",
                                                "205 RESET_CONTENT",
                                                "206 PARTIAL_CONTENT",
                                                "207 MULTI_STATUS",
                                                "208 ALREADY_REPORTED",
                                                "226 IM_USED",
                                                "300 MULTIPLE_CHOICES",
                                                "301 MOVED_PERMANENTLY",
                                                "302 FOUND",
                                                "302 MOVED_TEMPORARILY",
                                                "303 SEE_OTHER",
                                                "304 NOT_MODIFIED",
                                                "305 USE_PROXY",
                                                "307 TEMPORARY_REDIRECT",
                                                "308 PERMANENT_REDIRECT",
                                                "400 BAD_REQUEST",
                                                "401 UNAUTHORIZED",
                                                "402 PAYMENT_REQUIRED",
                                                "403 FORBIDDEN",
                                                "404 NOT_FOUND",
                                                "405 METHOD_NOT_ALLOWED",
                                                "406 NOT_ACCEPTABLE",
                                                "407 PROXY_AUTHENTICATION_REQUIRED",
                                                "408 REQUEST_TIMEOUT",
                                                "409 CONFLICT",
                                                "410 GONE",
                                                "411 LENGTH_REQUIRED",
                                                "412 PRECONDITION_FAILED",
                                                "413 PAYLOAD_TOO_LARGE",
                                                "413 REQUEST_ENTITY_TOO_LARGE",
                                                "414 URI_TOO_LONG",
                                                "414 REQUEST_URI_TOO_LONG",
                                                "415 UNSUPPORTED_MEDIA_TYPE",
                                                "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                                                "417 EXPECTATION_FAILED",
                                                "418 I_AM_A_TEAPOT",
                                                "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                                                "420 METHOD_FAILURE",
                                                "421 DESTINATION_LOCKED",
                                                "422 UNPROCESSABLE_ENTITY",
                                                "423 LOCKED",
                                                "424 FAILED_DEPENDENCY",
                                                "425 TOO_EARLY",
                                                "426 UPGRADE_REQUIRED",
                                                "428 PRECONDITION_REQUIRED",
                                                "429 TOO_MANY_REQUESTS",
                                                "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                                                "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                                                "500 INTERNAL_SERVER_ERROR",
                                                "501 NOT_IMPLEMENTED",
                                                "502 BAD_GATEWAY",
                                                "503 SERVICE_UNAVAILABLE",
                                                "504 GATEWAY_TIMEOUT",
                                                "505 HTTP_VERSION_NOT_SUPPORTED",
                                                "506 VARIANT_ALSO_NEGOTIATES",
                                                "507 INSUFFICIENT_STORAGE",
                                                "508 LOOP_DETECTED",
                                                "509 BANDWIDTH_LIMIT_EXCEEDED",
                                                "510 NOT_EXTENDED",
                                                "511 NETWORK_AUTHENTICATION_REQUIRED"
                                            ]
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only UserAdmins can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string",
                                            "enum": [
                                                "100 CONTINUE",
                                                "101 SWITCHING_PROTOCOLS",
                                                "102 PROCESSING",
                                                "103 CHECKPOINT",
                                                "200 OK",
                                                "201 CREATED",
                                                "202 ACCEPTED",
                                                "203 NON_AUTHORITATIVE_INFORMATION",
                                                "204 NO_CONTENT",
                                                "205 RESET_CONTENT",
                                                "206 PARTIAL_CONTENT",
                                                "207 MULTI_STATUS",
                                                "208 ALREADY_REPORTED",
                                                "226 IM_USED",
                                                "300 MULTIPLE_CHOICES",
                                                "301 MOVED_PERMANENTLY",
                                                "302 FOUND",
                                                "302 MOVED_TEMPORARILY",
                                                "303 SEE_OTHER",
                                                "304 NOT_MODIFIED",
                                                "305 USE_PROXY",
                                                "307 TEMPORARY_REDIRECT",
                                                "308 PERMANENT_REDIRECT",
                                                "400 BAD_REQUEST",
                                                "401 UNAUTHORIZED",
                                                "402 PAYMENT_REQUIRED",
                                                "403 FORBIDDEN",
                                                "404 NOT_FOUND",
                                                "405 METHOD_NOT_ALLOWED",
                                                "406 NOT_ACCEPTABLE",
                                                "407 PROXY_AUTHENTICATION_REQUIRED",
                                                "408 REQUEST_TIMEOUT",
                                                "409 CONFLICT",
                                                "410 GONE",
                                                "411 LENGTH_REQUIRED",
                                                "412 PRECONDITION_FAILED",
                                                "413 PAYLOAD_TOO_LARGE",
                                                "413 REQUEST_ENTITY_TOO_LARGE",
                                                "414 URI_TOO_LONG",
                                                "414 REQUEST_URI_TOO_LONG",
                                                "415 UNSUPPORTED_MEDIA_TYPE",
                                                "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                                                "417 EXPECTATION_FAILED",
                                                "418 I_AM_A_TEAPOT",
                                                "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                                                "420 METHOD_FAILURE",
                                                "421 DESTINATION_LOCKED",
                                                "422 UNPROCESSABLE_ENTITY",
                                                "423 LOCKED",
                                                "424 FAILED_DEPENDENCY",
                                                "425 TOO_EARLY",
                                                "426 UPGRADE_REQUIRED",
                                                "428 PRECONDITION_REQUIRED",
                                                "429 TOO_MANY_REQUESTS",
                                                "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                                                "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                                                "500 INTERNAL_SERVER_ERROR",
                                                "501 NOT_IMPLEMENTED",
                                                "502 BAD_GATEWAY",
                                                "503 SERVICE_UNAVAILABLE",
                                                "504 GATEWAY_TIMEOUT",
                                                "505 HTTP_VERSION_NOT_SUPPORTED",
                                                "506 VARIANT_ALSO_NEGOTIATES",
                                                "507 INSUFFICIENT_STORAGE",
                                                "508 LOOP_DETECTED",
                                                "509 BANDWIDTH_LIMIT_EXCEEDED",
                                                "510 NOT_EXTENDED",
                                                "511 NETWORK_AUTHENTICATION_REQUIRED"
                                            ]
                                        }
                                    }
                                }
                            },
                            "204": {
                                "description": "Harvester records transfered to new source.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "string",
                                            "enum": [
                                                "100 CONTINUE",
                                                "101 SWITCHING_PROTOCOLS",
                                                "102 PROCESSING",
                                                "103 CHECKPOINT",
                                                "200 OK",
                                                "201 CREATED",
                                                "202 ACCEPTED",
                                                "203 NON_AUTHORITATIVE_INFORMATION",
                                                "204 NO_CONTENT",
                                                "205 RESET_CONTENT",
                                                "206 PARTIAL_CONTENT",
                                                "207 MULTI_STATUS",
                                                "208 ALREADY_REPORTED",
                                                "226 IM_USED",
                                                "300 MULTIPLE_CHOICES",
                                                "301 MOVED_PERMANENTLY",
                                                "302 FOUND",
                                                "302 MOVED_TEMPORARILY",
                                                "303 SEE_OTHER",
                                                "304 NOT_MODIFIED",
                                                "305 USE_PROXY",
                                                "307 TEMPORARY_REDIRECT",
                                                "308 PERMANENT_REDIRECT",
                                                "400 BAD_REQUEST",
                                                "401 UNAUTHORIZED",
                                                "402 PAYMENT_REQUIRED",
                                                "403 FORBIDDEN",
                                                "404 NOT_FOUND",
                                                "405 METHOD_NOT_ALLOWED",
                                                "406 NOT_ACCEPTABLE",
                                                "407 PROXY_AUTHENTICATION_REQUIRED",
                                                "408 REQUEST_TIMEOUT",
                                                "409 CONFLICT",
                                                "410 GONE",
                                                "411 LENGTH_REQUIRED",
                                                "412 PRECONDITION_FAILED",
                                                "413 PAYLOAD_TOO_LARGE",
                                                "413 REQUEST_ENTITY_TOO_LARGE",
                                                "414 URI_TOO_LONG",
                                                "414 REQUEST_URI_TOO_LONG",
                                                "415 UNSUPPORTED_MEDIA_TYPE",
                                                "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                                                "417 EXPECTATION_FAILED",
                                                "418 I_AM_A_TEAPOT",
                                                "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                                                "420 METHOD_FAILURE",
                                                "421 DESTINATION_LOCKED",
                                                "422 UNPROCESSABLE_ENTITY",
                                                "423 LOCKED",
                                                "424 FAILED_DEPENDENCY",
                                                "425 TOO_EARLY",
                                                "426 UPGRADE_REQUIRED",
                                                "428 PRECONDITION_REQUIRED",
                                                "429 TOO_MANY_REQUESTS",
                                                "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                                                "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                                                "500 INTERNAL_SERVER_ERROR",
                                                "501 NOT_IMPLEMENTED",
                                                "502 BAD_GATEWAY",
                                                "503 SERVICE_UNAVAILABLE",
                                                "504 GATEWAY_TIMEOUT",
                                                "505 HTTP_VERSION_NOT_SUPPORTED",
                                                "506 VARIANT_ALSO_NEGOTIATES",
                                                "507 INSUFFICIENT_STORAGE",
                                                "508 LOOP_DETECTED",
                                                "509 BANDWIDTH_LIMIT_EXCEEDED",
                                                "510 NOT_EXTENDED",
                                                "511 NETWORK_AUTHENTICATION_REQUIRED"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/registries/actions/entries/import/spatial": {
                    "post": {
                        "tags": [
                            "registries"
                        ],
                        "summary": "Import spatial directory entries",
                        "description": "Directory entry (AKA subtemplates) are XML fragments that can be inserted in metadata records. Use this service to import geographic extent entries from an ESRI Shapefile format.",
                        "operationId": "importSpatialEntries",
                        "parameters": [
                            {
                                "name": "uuidAttribute",
                                "in": "query",
                                "description": "Attribute to use for UUID. If none, random UUID are generated.",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "uuidPattern",
                                "in": "query",
                                "description": "Pattern to build UUID from. Default is '{{uuid}}'.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": "{{uuid}}"
                                }
                            },
                            {
                                "name": "descriptionAttribute",
                                "in": "query",
                                "description": "Attribute to use for extent description. If none, no extent description defined. TODO: Add per language desc ?",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "geomProjectionTo",
                                "in": "query",
                                "description": "geomProjectionTo",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "lenient",
                                "in": "query",
                                "description": "lenient",
                                "required": false,
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            {
                                "name": "charset",
                                "in": "query",
                                "description": "Attribute table charset",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            {
                                "name": "onlyBoundingBox",
                                "in": "query",
                                "description": "Create only bounding box for each spatial objects.",
                                "required": false,
                                "schema": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            {
                                "name": "process",
                                "in": "query",
                                "description": "Process",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "schema",
                                "in": "query",
                                "description": "Schema identifier",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            },
                            {
                                "name": "uuidProcessing",
                                "in": "query",
                                "description": "Record identifier processing.",
                                "required": false,
                                "schema": {
                                    "type": "string",
                                    "enum": [
                                        "GENERATEUUID",
                                        "NOTHING",
                                        "OVERWRITE"
                                    ],
                                    "default": "NOTHING"
                                }
                            },
                            {
                                "name": "group",
                                "in": "query",
                                "description": "The group the record is attached to.",
                                "required": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        ],
                        "requestBody": {
                            "content": {
                                "multipart/form-data": {
                                    "schema": {
                                        "required": [
                                            "file"
                                        ],
                                        "type": "object",
                                        "properties": {
                                            "file": {
                                                "type": "string",
                                                "description": "The ZIP file to upload containing the Shapefile.",
                                                "format": "binary"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "responses": {
                            "default": {
                                "description": "default response",
                                "content": {
                                    "application/json": {}
                                }
                            },
                            "201": {
                                "description": "Directory entries imported.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            },
                            "403": {
                                "description": "Operation not allowed. Only Reviewvers can access it.",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "components": {
                "schemas": {
                    "Codelist": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Entry"
                                }
                            },
                            "name": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "alias": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            }
                        },
                        "xml": {
                            "name": "codelist"
                        }
                    },
                    "Entry": {
                        "required": [
                            "code",
                            "description",
                            "label"
                        ],
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string"
                            },
                            "label": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "hideInEditMode": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            }
                        },
                        "xml": {
                            "name": "entry"
                        }
                    },
                    "PageProperties": {
                        "type": "object",
                        "properties": {
                            "language": {
                                "type": "string"
                            },
                            "pageId": {
                                "type": "string"
                            },
                            "sections": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "TOP",
                                        "FOOTER",
                                        "MENU",
                                        "SUBMENU",
                                        "CUSTOM_MENU1",
                                        "CUSTOM_MENU2",
                                        "CUSTOM_MENU3"
                                    ]
                                }
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "PUBLIC",
                                    "PUBLIC_ONLY",
                                    "PRIVATE",
                                    "HIDDEN"
                                ]
                            },
                            "link": {
                                "type": "string"
                            },
                            "content": {
                                "type": "string"
                            },
                            "label": {
                                "type": "string"
                            },
                            "format": {
                                "type": "string",
                                "enum": [
                                    "LINK",
                                    "HTML",
                                    "HTMLPAGE",
                                    "TEXT"
                                ]
                            }
                        }
                    },
                    "SavedQuery": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "xpath": {
                                "type": "string"
                            },
                            "label": {
                                "type": "string"
                            },
                            "cleanValues": {
                                "type": "string"
                            },
                            "parameters": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "SuggestionType": {
                        "required": [
                            "name",
                            "operational"
                        ],
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "operational": {
                                "type": "string"
                            },
                            "params": {
                                "type": "string"
                            },
                            "process": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "id": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "category": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "target": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            }
                        }
                    },
                    "Address": {
                        "type": "object",
                        "properties": {
                            "state": {
                                "type": "string"
                            },
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "address": {
                                "type": "string"
                            },
                            "city": {
                                "type": "string"
                            },
                            "zip": {
                                "type": "string"
                            },
                            "country": {
                                "type": "string"
                            }
                        }
                    },
                    "GrantedAuthority": {
                        "type": "object",
                        "properties": {
                            "authority": {
                                "type": "string"
                            }
                        }
                    },
                    "User": {
                        "type": "object",
                        "properties": {
                            "profile": {
                                "type": "string",
                                "enum": [
                                    "Administrator",
                                    "UserAdmin",
                                    "Reviewer",
                                    "Editor",
                                    "RegisteredUser",
                                    "Guest",
                                    "Monitor"
                                ]
                            },
                            "surname": {
                                "type": "string"
                            },
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "enabled": {
                                "type": "boolean"
                            },
                            "username": {
                                "type": "string"
                            },
                            "kind": {
                                "type": "string"
                            },
                            "email": {
                                "type": "string"
                            },
                            "emailAddresses": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "addresses": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            },
                            "primaryAddress": {
                                "$ref": "#/components/schemas/Address"
                            },
                            "organisation": {
                                "type": "string"
                            },
                            "security": {
                                "$ref": "#/components/schemas/UserSecurity"
                            },
                            "lastLoginDate": {
                                "type": "string"
                            },
                            "authorities": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GrantedAuthority"
                                }
                            },
                            "accountNonExpired": {
                                "type": "boolean"
                            },
                            "accountNonLocked": {
                                "type": "boolean"
                            },
                            "credentialsNonExpired": {
                                "type": "boolean"
                            },
                            "name": {
                                "type": "string"
                            }
                        }
                    },
                    "UserSecurity": {
                        "type": "object",
                        "properties": {
                            "nodeId": {
                                "type": "string"
                            },
                            "authType": {
                                "type": "string"
                            },
                            "securityNotifications": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "UPDATE_HASH_REQUIRED",
                                        "UNKNOWN"
                                    ]
                                }
                            },
                            "securityNotificationsString": {
                                "$ref": "#/components/schemas/UserSecurity"
                            }
                        }
                    },
                    "TransferRequest": {
                        "type": "object",
                        "properties": {
                            "sourceUser": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "sourceGroup": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "targetUser": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "targetGroup": {
                                "type": "integer",
                                "format": "int32"
                            }
                        }
                    },
                    "Group": {
                        "type": "object",
                        "properties": {
                            "logo": {
                                "type": "string"
                            },
                            "website": {
                                "type": "string"
                            },
                            "defaultCategory": {
                                "$ref": "#/components/schemas/MetadataCategory"
                            },
                            "allowedCategories": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataCategory"
                                }
                            },
                            "enableAllowedCategories": {
                                "type": "boolean"
                            },
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "description": {
                                "type": "string"
                            },
                            "reserved": {
                                "type": "boolean"
                            },
                            "email": {
                                "type": "string"
                            },
                            "referrer": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "name": {
                                "type": "string"
                            },
                            "label": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Group details"
                    },
                    "MetadataCategory": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "name": {
                                "type": "string"
                            },
                            "label": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "Translations": {
                        "type": "object",
                        "properties": {
                            "fieldName": {
                                "type": "string"
                            },
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "langId": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    },
                    "InfoReport": {
                        "type": "object",
                        "properties": {
                            "message": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            },
                            "draft": {
                                "type": "boolean"
                            },
                            "approved": {
                                "type": "boolean"
                            },
                            "date": {
                                "type": "string"
                            }
                        }
                    },
                    "Report": {
                        "type": "object",
                        "properties": {
                            "message": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            },
                            "draft": {
                                "type": "boolean"
                            },
                            "approved": {
                                "type": "boolean"
                            },
                            "date": {
                                "type": "string"
                            }
                        }
                    },
                    "SimpleMetadataProcessingReport": {
                        "type": "object",
                        "properties": {
                            "errors": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Report"
                                }
                            },
                            "infos": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/InfoReport"
                                }
                            },
                            "uuid": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "totalRecords": {
                                "type": "integer",
                                "format": "int32",
                                "writeOnly": true
                            },
                            "metadata": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "metadataErrors": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Report"
                                    }
                                },
                                "xml": {
                                    "name": "errors"
                                }
                            },
                            "metadataInfos": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InfoReport"
                                    }
                                },
                                "xml": {
                                    "name": "infos"
                                }
                            },
                            "numberOfNullRecords": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsProcessed": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsUnchanged": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsWithErrors": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecords": {
                                "type": "integer",
                                "format": "int32",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "numberOfRecordNotFound": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsNotEditable": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "running": {
                                "type": "boolean"
                            },
                            "startIsoDateTime": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "endIsoDateTime": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "ellapsedTimeInSeconds": {
                                "type": "integer",
                                "format": "int64",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "totalTimeInSeconds": {
                                "type": "integer",
                                "format": "int64",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "type": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            }
                        },
                        "xml": {
                            "name": "report"
                        }
                    },
                    "Associated": {
                        "type": "object",
                        "properties": {
                            "item": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AssociatedSiblingMetadataItem"
                                }
                            }
                        }
                    },
                    "AssociatedSiblingMetadataItem": {
                        "required": [
                            "description",
                            "mdType",
                            "title"
                        ],
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "url": {
                                "$ref": "#/components/schemas/MultilingualValue"
                            },
                            "type": {
                                "type": "string"
                            },
                            "title": {
                                "$ref": "#/components/schemas/MultilingualValue"
                            },
                            "description": {
                                "$ref": "#/components/schemas/Description"
                            },
                            "mdType": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "origin": {
                                "type": "string"
                            },
                            "agg_isTemporalStatOf": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "agg_largerWorkCitation": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "agg_isDescriptionOf": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "AttributeTable": {
                        "type": "object",
                        "properties": {
                            "element": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Element"
                                }
                            }
                        }
                    },
                    "Children": {
                        "type": "object",
                        "properties": {
                            "item": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedMetadataItem"
                                }
                            }
                        }
                    },
                    "Dataset": {
                        "type": "object",
                        "properties": {
                            "item": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedMetadataItem"
                                }
                            }
                        }
                    },
                    "Description": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LocalizedString"
                                }
                            }
                        }
                    },
                    "Element": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "definition": {
                                "type": "string"
                            },
                            "code": {
                                "type": "string"
                            },
                            "link": {
                                "type": "string"
                            },
                            "type": {
                                "type": "string"
                            },
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Values"
                                }
                            }
                        }
                    },
                    "FCRelatedMetadataItem": {
                        "required": [
                            "description",
                            "featureType",
                            "mdType",
                            "title"
                        ],
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "url": {
                                "$ref": "#/components/schemas/MultilingualValue"
                            },
                            "type": {
                                "type": "string"
                            },
                            "title": {
                                "$ref": "#/components/schemas/MultilingualValue"
                            },
                            "description": {
                                "$ref": "#/components/schemas/Description"
                            },
                            "mdType": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "origin": {
                                "type": "string"
                            },
                            "featureType": {
                                "$ref": "#/components/schemas/FeatureType"
                            }
                        }
                    },
                    "Fcat": {
                        "type": "object",
                        "properties": {
                            "item": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FCRelatedMetadataItem"
                                }
                            }
                        }
                    },
                    "FeatureType": {
                        "type": "object",
                        "properties": {
                            "attributeTable": {
                                "$ref": "#/components/schemas/AttributeTable"
                            }
                        }
                    },
                    "Hasfeaturecats": {
                        "type": "object",
                        "properties": {
                            "item": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedMetadataItem"
                                }
                            }
                        }
                    },
                    "Hassource": {
                        "type": "object",
                        "properties": {
                            "item": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedMetadataItem"
                                }
                            }
                        }
                    },
                    "LocalizedString": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string"
                            },
                            "lang": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "href": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            }
                        }
                    },
                    "MultilingualValue": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LocalizedString"
                                }
                            }
                        }
                    },
                    "Online": {
                        "type": "object",
                        "properties": {
                            "item": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedLinkItem"
                                }
                            }
                        }
                    },
                    "Parent": {
                        "type": "object",
                        "properties": {
                            "item": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedMetadataItem"
                                }
                            }
                        }
                    },
                    "Related": {
                        "type": "object",
                        "properties": {
                            "item": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedMetadataItem"
                                }
                            }
                        }
                    },
                    "RelatedLinkItem": {
                        "required": [
                            "description",
                            "title"
                        ],
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "url": {
                                "$ref": "#/components/schemas/MultilingualValue"
                            },
                            "type": {
                                "type": "string"
                            },
                            "title": {
                                "$ref": "#/components/schemas/MultilingualValue"
                            },
                            "protocol": {
                                "type": "string"
                            },
                            "description": {
                                "$ref": "#/components/schemas/Description"
                            },
                            "function": {
                                "type": "string"
                            },
                            "mimeType": {
                                "type": "string"
                            },
                            "applicationProfile": {
                                "type": "string"
                            }
                        }
                    },
                    "RelatedMetadataItem": {
                        "required": [
                            "description",
                            "mdType",
                            "title"
                        ],
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "url": {
                                "$ref": "#/components/schemas/MultilingualValue"
                            },
                            "type": {
                                "type": "string"
                            },
                            "title": {
                                "$ref": "#/components/schemas/MultilingualValue"
                            },
                            "description": {
                                "$ref": "#/components/schemas/Description"
                            },
                            "mdType": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "origin": {
                                "type": "string"
                            }
                        }
                    },
                    "RelatedResponse": {
                        "type": "object",
                        "properties": {
                            "children": {
                                "$ref": "#/components/schemas/Children"
                            },
                            "parent": {
                                "$ref": "#/components/schemas/Parent"
                            },
                            "siblings": {
                                "$ref": "#/components/schemas/Siblings"
                            },
                            "associated": {
                                "$ref": "#/components/schemas/Associated"
                            },
                            "services": {
                                "$ref": "#/components/schemas/Service"
                            },
                            "datasets": {
                                "$ref": "#/components/schemas/Dataset"
                            },
                            "fcats": {
                                "$ref": "#/components/schemas/Fcat"
                            },
                            "hasfeaturecats": {
                                "$ref": "#/components/schemas/Hasfeaturecats"
                            },
                            "sources": {
                                "$ref": "#/components/schemas/Source"
                            },
                            "hassources": {
                                "$ref": "#/components/schemas/Hassource"
                            },
                            "related": {
                                "$ref": "#/components/schemas/Related"
                            },
                            "onlines": {
                                "$ref": "#/components/schemas/Online"
                            },
                            "thumbnails": {
                                "$ref": "#/components/schemas/Thumbnail"
                            }
                        },
                        "xml": {
                            "name": "related"
                        }
                    },
                    "RelatedSiblingMetadataItem": {
                        "required": [
                            "associationType",
                            "description",
                            "initiativeType",
                            "mdType",
                            "title"
                        ],
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "url": {
                                "$ref": "#/components/schemas/MultilingualValue"
                            },
                            "type": {
                                "type": "string"
                            },
                            "title": {
                                "$ref": "#/components/schemas/MultilingualValue"
                            },
                            "description": {
                                "$ref": "#/components/schemas/Description"
                            },
                            "mdType": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "origin": {
                                "type": "string"
                            },
                            "associationType": {
                                "type": "string"
                            },
                            "initiativeType": {
                                "type": "string"
                            }
                        }
                    },
                    "RelatedThumbnailItem": {
                        "required": [
                            "title"
                        ],
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "url": {
                                "$ref": "#/components/schemas/MultilingualValue"
                            },
                            "type": {
                                "type": "string"
                            },
                            "title": {
                                "$ref": "#/components/schemas/MultilingualValue"
                            }
                        }
                    },
                    "Service": {
                        "type": "object",
                        "properties": {
                            "item": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedMetadataItem"
                                }
                            }
                        }
                    },
                    "Siblings": {
                        "type": "object",
                        "properties": {
                            "item": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedSiblingMetadataItem"
                                }
                            }
                        }
                    },
                    "Source": {
                        "type": "object",
                        "properties": {
                            "item": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedMetadataItem"
                                }
                            }
                        }
                    },
                    "Thumbnail": {
                        "type": "object",
                        "properties": {
                            "item": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedThumbnailItem"
                                }
                            }
                        }
                    },
                    "Values": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string"
                            },
                            "code": {
                                "type": "string"
                            },
                            "definition": {
                                "type": "string"
                            }
                        }
                    },
                    "UserSearchDto": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "url": {
                                "type": "string"
                            },
                            "featuredType": {
                                "type": "string"
                            },
                            "creationDate": {
                                "type": "string"
                            },
                            "creatorId": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "creator": {
                                "type": "string"
                            },
                            "logo": {
                                "type": "string"
                            },
                            "names": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "groups": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "description": "User search details"
                    },
                    "ThesaurusInfo": {
                        "type": "object",
                        "properties": {
                            "filename": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "multilingualTitles": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "multilingualDescriptions": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "title": {
                                "type": "string"
                            },
                            "defaultNamespace": {
                                "type": "string"
                            },
                            "dname": {
                                "type": "string"
                            },
                            "type": {
                                "type": "string"
                            }
                        },
                        "description": "Thesaurus information"
                    },
                    "UserFeedbackDTO": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string"
                            },
                            "comment": {
                                "type": "string"
                            },
                            "rating": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "ratingAVG": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "metadataUUID": {
                                "type": "string"
                            },
                            "metadataTitle": {
                                "type": "string"
                            },
                            "authorUserId": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "authorName": {
                                "type": "string"
                            },
                            "authorEmail": {
                                "type": "string"
                            },
                            "authorOrganization": {
                                "type": "string"
                            },
                            "approverName": {
                                "type": "string"
                            },
                            "optionPrivacy": {
                                "type": "boolean"
                            },
                            "published": {
                                "type": "boolean"
                            },
                            "parentUuid": {
                                "type": "string"
                            },
                            "captcha": {
                                "type": "string"
                            },
                            "date": {
                                "type": "string"
                            },
                            "showApproveButton": {
                                "type": "boolean"
                            },
                            "keywords": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "MetadataProcessingReport": {
                        "type": "object",
                        "properties": {
                            "errors": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Report"
                                }
                            },
                            "infos": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/InfoReport"
                                }
                            },
                            "uuid": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "totalRecords": {
                                "type": "integer",
                                "format": "int32",
                                "writeOnly": true
                            },
                            "metadata": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "metadataErrors": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Report"
                                    }
                                },
                                "xml": {
                                    "name": "errors"
                                }
                            },
                            "metadataInfos": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InfoReport"
                                    }
                                },
                                "xml": {
                                    "name": "infos"
                                }
                            },
                            "numberOfNullRecords": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsProcessed": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsUnchanged": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsWithErrors": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecords": {
                                "type": "integer",
                                "format": "int32",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "numberOfRecordNotFound": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsNotEditable": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "running": {
                                "type": "boolean"
                            },
                            "startIsoDateTime": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "endIsoDateTime": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "ellapsedTimeInSeconds": {
                                "type": "integer",
                                "format": "int64",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "totalTimeInSeconds": {
                                "type": "integer",
                                "format": "int64",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "type": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            }
                        },
                        "xml": {
                            "name": "report"
                        }
                    },
                    "Setting": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "storedValue": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            },
                            "dataType": {
                                "type": "string",
                                "enum": [
                                    "STRING",
                                    "INT",
                                    "BOOLEAN",
                                    "JSON"
                                ]
                            },
                            "position": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "internal": {
                                "type": "boolean"
                            },
                            "encrypted": {
                                "type": "boolean"
                            },
                            "editable": {
                                "type": "boolean"
                            },
                            "internal_JpaWorkaround": {
                                "type": "string",
                                "writeOnly": true
                            },
                            "encrypted_JpaWorkaround": {
                                "type": "string",
                                "writeOnly": true
                            },
                            "editable_JpaWorkaround": {
                                "type": "string",
                                "writeOnly": true
                            }
                        }
                    },
                    "SettingsListResponse": {
                        "type": "object",
                        "properties": {
                            "settings": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Setting"
                                }
                            }
                        }
                    },
                    "MetadataResource": {
                        "type": "object",
                        "properties": {
                            "metadataResourceExternalManagementProperties": {
                                "$ref": "#/components/schemas/MetadataResourceExternalManagementProperties"
                            },
                            "version": {
                                "type": "string"
                            },
                            "url": {
                                "type": "string"
                            },
                            "filename": {
                                "type": "string"
                            },
                            "metadataId": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "metadataUuid": {
                                "type": "string"
                            },
                            "lastModification": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "approved": {
                                "type": "boolean"
                            },
                            "visibility": {
                                "type": "string",
                                "enum": [
                                    "public",
                                    "private"
                                ]
                            },
                            "id": {
                                "type": "string"
                            },
                            "size": {
                                "type": "integer",
                                "format": "int64"
                            }
                        },
                        "xml": {
                            "name": "resource"
                        }
                    },
                    "MetadataResourceExternalManagementProperties": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "url": {
                                "type": "string"
                            },
                            "validationStatus": {
                                "type": "string",
                                "enum": [
                                    "UNKNOWN",
                                    "VALID",
                                    "INCOMPLETE"
                                ]
                            }
                        },
                        "xml": {
                            "name": "metadataResourceExternalManagementProperties"
                        }
                    },
                    "Selection": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "name": {
                                "type": "string"
                            },
                            "watchable": {
                                "type": "boolean"
                            },
                            "label": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "MetadataBatchApproveParameter": {
                        "type": "object",
                        "properties": {
                            "uuids": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "bucket": {
                                "type": "string"
                            },
                            "message": {
                                "type": "string"
                            },
                            "directApproval": {
                                "type": "boolean"
                            }
                        }
                    },
                    "UserGroup": {
                        "type": "object",
                        "properties": {
                            "profile": {
                                "type": "string",
                                "enum": [
                                    "Administrator",
                                    "UserAdmin",
                                    "Reviewer",
                                    "Editor",
                                    "RegisteredUser",
                                    "Guest",
                                    "Monitor"
                                ]
                            },
                            "id": {
                                "$ref": "#/components/schemas/UserGroupId"
                            },
                            "user": {
                                "$ref": "#/components/schemas/User"
                            },
                            "group": {
                                "$ref": "#/components/schemas/Group"
                            }
                        }
                    },
                    "UserGroupId": {
                        "type": "object",
                        "properties": {
                            "profile": {
                                "type": "string",
                                "enum": [
                                    "Administrator",
                                    "UserAdmin",
                                    "Reviewer",
                                    "Editor",
                                    "RegisteredUser",
                                    "Guest",
                                    "Monitor"
                                ]
                            },
                            "userId": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "groupId": {
                                "type": "integer",
                                "format": "int32"
                            }
                        }
                    },
                    "RatingAverage": {
                        "type": "object",
                        "properties": {
                            "ratingCount": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "ratingAverages": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "userfeedbackCount": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "lastComment": {
                                "type": "string"
                            }
                        }
                    },
                    "Category": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "label": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            }
                        }
                    },
                    "MeResponse": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "profile": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            },
                            "surname": {
                                "type": "string"
                            },
                            "email": {
                                "type": "string"
                            },
                            "hash": {
                                "type": "string"
                            },
                            "organisation": {
                                "type": "string"
                            },
                            "admin": {
                                "type": "boolean"
                            },
                            "groupsWithRegisteredUser": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "groupsWithEditor": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "groupsWithReviewer": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "groupsWithUserAdmin": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "UiSetting": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "configuration": {
                                "type": "string"
                            }
                        }
                    },
                    "Reports": {
                        "type": "object",
                        "properties": {
                            "report": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Report"
                                }
                            }
                        },
                        "xml": {
                            "name": "reports"
                        }
                    },
                    "PasswordResetDto": {
                        "type": "object",
                        "properties": {
                            "passwordOld": {
                                "type": "string"
                            },
                            "password": {
                                "type": "string"
                            },
                            "password2": {
                                "type": "string"
                            }
                        }
                    },
                    "Status": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "state": {
                                "type": "string",
                                "enum": [
                                    "RED",
                                    "UNINITIALIZED",
                                    "YELLOW",
                                    "GREEN",
                                    "DISABLED"
                                ]
                            },
                            "date": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "message": {
                                "type": "string"
                            }
                        }
                    },
                    "GroupPrivilege": {
                        "type": "object",
                        "properties": {
                            "operations": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "boolean"
                                }
                            },
                            "group": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "userProfiles": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "Administrator",
                                        "UserAdmin",
                                        "Reviewer",
                                        "Editor",
                                        "RegisteredUser",
                                        "Guest",
                                        "Monitor"
                                    ]
                                }
                            },
                            "userGroup": {
                                "type": "boolean"
                            },
                            "reserved": {
                                "type": "boolean"
                            },
                            "userProfile": {
                                "type": "array",
                                "writeOnly": true,
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "Administrator",
                                        "UserAdmin",
                                        "Reviewer",
                                        "Editor",
                                        "RegisteredUser",
                                        "Guest",
                                        "Monitor"
                                    ]
                                }
                            }
                        }
                    },
                    "SharingResponse": {
                        "type": "object",
                        "properties": {
                            "privileges": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GroupPrivilege"
                                }
                            },
                            "owner": {
                                "type": "string"
                            },
                            "groupOwner": {
                                "type": "string"
                            }
                        }
                    },
                    "GroupOperations": {
                        "type": "object",
                        "properties": {
                            "operations": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "boolean"
                                }
                            },
                            "group": {
                                "type": "integer",
                                "format": "int32"
                            }
                        }
                    },
                    "SharingParameter": {
                        "type": "object",
                        "properties": {
                            "privileges": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GroupOperations"
                                }
                            },
                            "clear": {
                                "type": "boolean"
                            }
                        },
                        "description": "Privileges"
                    },
                    "OwnerResponse": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "name": {
                                "type": "string"
                            },
                            "records": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "RatingCriteria": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "internal": {
                                "type": "boolean"
                            },
                            "name": {
                                "type": "string"
                            },
                            "label": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "Operation": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "reserved": {
                                "type": "boolean"
                            },
                            "reservedOperation": {
                                "type": "string",
                                "enum": [
                                    "view",
                                    "download",
                                    "editing",
                                    "notify",
                                    "dynamic",
                                    "featured"
                                ]
                            },
                            "name": {
                                "type": "string"
                            },
                            "label": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "ExtentDto": {
                        "type": "object",
                        "properties": {
                            "href": {
                                "type": "string"
                            },
                            "type": {
                                "type": "string"
                            },
                            "xpath": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            }
                        }
                    },
                    "FormatterData": {
                        "type": "object",
                        "properties": {
                            "schema": {
                                "type": "string"
                            },
                            "id": {
                                "type": "string"
                            }
                        },
                        "xml": {
                            "name": "formatter"
                        }
                    },
                    "FormatterDataResponse": {
                        "type": "object",
                        "properties": {
                            "formatters": {
                                "type": "array",
                                "xml": {
                                    "name": "formatter"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/FormatterData"
                                }
                            }
                        },
                        "xml": {
                            "name": "formatters"
                        }
                    },
                    "SiteInformation": {
                        "type": "object",
                        "properties": {
                            "catalogue": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "index": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "main": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "database": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "version": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "JSONObject": {
                        "type": "object",
                        "properties": {
                            "empty": {
                                "type": "boolean"
                            }
                        }
                    },
                    "XsltMetadataProcessingReport": {
                        "type": "object",
                        "properties": {
                            "errors": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Report"
                                }
                            },
                            "infos": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/InfoReport"
                                }
                            },
                            "uuid": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "totalRecords": {
                                "type": "integer",
                                "format": "int32",
                                "writeOnly": true
                            },
                            "metadata": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "metadataErrors": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Report"
                                    }
                                },
                                "xml": {
                                    "name": "errors"
                                }
                            },
                            "metadataInfos": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InfoReport"
                                    }
                                },
                                "xml": {
                                    "name": "infos"
                                }
                            },
                            "processId": {
                                "type": "string",
                                "xml": {
                                    "name": "process",
                                    "attribute": true
                                }
                            },
                            "noProcessFoundCount": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfNullRecords": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsProcessed": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsUnchanged": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsWithErrors": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecords": {
                                "type": "integer",
                                "format": "int32",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "numberOfRecordNotFound": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsNotEditable": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "running": {
                                "type": "boolean"
                            },
                            "startIsoDateTime": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "endIsoDateTime": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "ellapsedTimeInSeconds": {
                                "type": "integer",
                                "format": "int64",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "totalTimeInSeconds": {
                                "type": "integer",
                                "format": "int64",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "type": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            }
                        },
                        "xml": {
                            "name": "report"
                        }
                    },
                    "IsoLanguage": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "code": {
                                "type": "string"
                            },
                            "shortCode": {
                                "type": "string"
                            },
                            "label": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "UserDto": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "profile": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            },
                            "surname": {
                                "type": "string"
                            },
                            "emailAddresses": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "organisation": {
                                "type": "string"
                            },
                            "addresses": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            },
                            "kind": {
                                "type": "string"
                            },
                            "password": {
                                "type": "string"
                            },
                            "groupsRegisteredUser": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "groupsEditor": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "groupsReviewer": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "groupsUserAdmin": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "enabled": {
                                "type": "boolean"
                            },
                            "email": {
                                "$ref": "#/components/schemas/UserDto"
                            }
                        }
                    },
                    "PasswordUpdateParameter": {
                        "type": "object",
                        "properties": {
                            "password": {
                                "type": "string"
                            },
                            "changeKey": {
                                "type": "string"
                            }
                        },
                        "description": "The new password and a valid change key"
                    },
                    "PaginatedUserSearchResponse": {
                        "type": "object",
                        "properties": {
                            "total": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "rows": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/UserSearchDto"
                                }
                            }
                        }
                    },
                    "MapServer": {
                        "type": "object",
                        "properties": {
                            "namespace": {
                                "type": "string"
                            },
                            "namespacePrefix": {
                                "type": "string"
                            },
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "description": {
                                "type": "string"
                            },
                            "password": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            },
                            "configurl": {
                                "type": "string"
                            },
                            "wmsurl": {
                                "type": "string"
                            },
                            "wfsurl": {
                                "type": "string"
                            },
                            "wcsurl": {
                                "type": "string"
                            },
                            "stylerurl": {
                                "type": "string"
                            },
                            "pushStyleInWorkspace_JpaWorkaround": {
                                "type": "string",
                                "writeOnly": true
                            },
                            "pushStyleInWorkspace": {
                                "$ref": "#/components/schemas/MapServer"
                            },
                            "name": {
                                "type": "string"
                            }
                        },
                        "description": "Mapserver details"
                    },
                    "MetadataReplacementProcessingReport": {
                        "type": "object",
                        "properties": {
                            "errors": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Report"
                                }
                            },
                            "infos": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/InfoReport"
                                }
                            },
                            "uuid": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "totalRecords": {
                                "type": "integer",
                                "format": "int32",
                                "writeOnly": true
                            },
                            "metadata": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "metadataErrors": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Report"
                                    }
                                },
                                "xml": {
                                    "name": "errors"
                                }
                            },
                            "metadataInfos": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InfoReport"
                                    }
                                },
                                "xml": {
                                    "name": "infos"
                                }
                            },
                            "processId": {
                                "type": "string",
                                "xml": {
                                    "name": "process",
                                    "attribute": true
                                }
                            },
                            "metadataChanges": {
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/components/schemas/ReplaceReport"
                                },
                                "xml": {
                                    "name": "changes"
                                }
                            },
                            "numberOfRecordsChanged": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsNotChanged": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "noProcessFoundCount": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfNullRecords": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsProcessed": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsUnchanged": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsWithErrors": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecords": {
                                "type": "integer",
                                "format": "int32",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "numberOfRecordNotFound": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "numberOfRecordsNotEditable": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "running": {
                                "type": "boolean"
                            },
                            "startIsoDateTime": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "endIsoDateTime": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "ellapsedTimeInSeconds": {
                                "type": "integer",
                                "format": "int64",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "totalTimeInSeconds": {
                                "type": "integer",
                                "format": "int64",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "type": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            }
                        },
                        "xml": {
                            "name": "report"
                        }
                    },
                    "ReplaceEntryChange": {
                        "type": "object",
                        "properties": {
                            "originalVal": {
                                "type": "string"
                            },
                            "changedVal": {
                                "type": "string"
                            },
                            "fieldId": {
                                "type": "string"
                            }
                        }
                    },
                    "ReplaceReport": {
                        "type": "object",
                        "properties": {
                            "message": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            },
                            "draft": {
                                "type": "boolean"
                            },
                            "approved": {
                                "type": "boolean"
                            },
                            "date": {
                                "type": "string"
                            },
                            "elementChanges": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ReplaceEntryChange"
                                }
                            }
                        }
                    },
                    "ISODate": {
                        "type": "object",
                        "properties": {
                            "internalDateTime": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "years": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "months": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "days": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "hours": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "minutes": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "seconds": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "dateAndTime": {
                                "type": "string"
                            },
                            "dateAsString": {
                                "type": "string"
                            },
                            "timeInSeconds": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "dateOnly": {
                                "type": "boolean"
                            },
                            "dateYearOnly": {
                                "type": "boolean"
                            },
                            "dateYearMonthOnly": {
                                "type": "boolean"
                            },
                            "timeAsString": {
                                "type": "string"
                            },
                            "dateAndTimeUtc": {
                                "type": "string"
                            }
                        }
                    },
                    "Link": {
                        "type": "object",
                        "properties": {
                            "records": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataLink"
                                }
                            },
                            "linkStatus": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LinkStatus"
                                }
                            },
                            "lastState": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "lastCheck": {
                                "$ref": "#/components/schemas/ISODate"
                            },
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "protocol": {
                                "type": "string"
                            },
                            "url": {
                                "type": "string"
                            },
                            "linkType": {
                                "type": "string",
                                "enum": [
                                    "HTTP",
                                    "METADATA"
                                ]
                            }
                        }
                    },
                    "LinkStatus": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "checkDate": {
                                "$ref": "#/components/schemas/ISODate"
                            },
                            "statusValue": {
                                "type": "string"
                            },
                            "statusInfo": {
                                "type": "string"
                            },
                            "batchKey": {
                                "type": "string"
                            },
                            "failing": {
                                "type": "boolean"
                            }
                        }
                    },
                    "MetadataLink": {
                        "type": "object",
                        "properties": {
                            "metadataId": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "metadataUuid": {
                                "type": "string"
                            }
                        }
                    },
                    "PageLink": {
                        "type": "object",
                        "properties": {
                            "totalPages": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "totalElements": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "sort": {
                                "$ref": "#/components/schemas/Sort"
                            },
                            "last": {
                                "type": "boolean"
                            },
                            "numberOfElements": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "first": {
                                "type": "boolean"
                            },
                            "pageable": {
                                "$ref": "#/components/schemas/Pageable"
                            },
                            "size": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Link"
                                }
                            },
                            "number": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "empty": {
                                "type": "boolean"
                            }
                        }
                    },
                    "Pageable": {
                        "type": "object",
                        "properties": {
                            "sort": {
                                "$ref": "#/components/schemas/Sort"
                            },
                            "paged": {
                                "type": "boolean"
                            },
                            "unpaged": {
                                "type": "boolean"
                            },
                            "pageNumber": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "pageSize": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "offset": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "Sort": {
                        "type": "object",
                        "properties": {
                            "sorted": {
                                "type": "boolean"
                            },
                            "unsorted": {
                                "type": "boolean"
                            },
                            "empty": {
                                "type": "boolean"
                            }
                        }
                    },
                    "FeatureResponse": {
                        "type": "object",
                        "properties": {
                            "decodeMap": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "xml": {
                            "name": "related"
                        }
                    },
                    "AnonymousMapserver": {
                        "type": "object",
                        "properties": {
                            "password": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            },
                            "namespace": {
                                "type": "string"
                            },
                            "namespacePrefix": {
                                "type": "string"
                            },
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "description": {
                                "type": "string"
                            },
                            "configurl": {
                                "type": "string"
                            },
                            "wmsurl": {
                                "type": "string"
                            },
                            "wfsurl": {
                                "type": "string"
                            },
                            "wcsurl": {
                                "type": "string"
                            },
                            "stylerurl": {
                                "type": "string"
                            },
                            "pushStyleInWorkspace_JpaWorkaround": {
                                "type": "string",
                                "writeOnly": true
                            },
                            "pushStyleInWorkspace": {
                                "$ref": "#/components/schemas/MapServer"
                            },
                            "name": {
                                "type": "string"
                            }
                        }
                    },
                    "BatchEditing": {
                        "required": [
                            "section"
                        ],
                        "type": "object",
                        "properties": {
                            "section": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Section"
                                }
                            }
                        },
                        "xml": {
                            "name": "batchEditing"
                        }
                    },
                    "Field": {
                        "type": "object",
                        "properties": {
                            "template": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "xpath": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "indexField": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "use": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "removable": {
                                "type": "boolean",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "insertMode": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "codelist": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            }
                        }
                    },
                    "Section": {
                        "required": [
                            "field"
                        ],
                        "type": "object",
                        "properties": {
                            "field": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Field"
                                }
                            },
                            "name": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            }
                        }
                    },
                    "SystemInfo": {
                        "type": "object",
                        "properties": {
                            "stagingProfile": {
                                "type": "string"
                            },
                            "buildDate": {
                                "type": "string"
                            },
                            "version": {
                                "type": "string"
                            },
                            "subVersion": {
                                "type": "string"
                            },
                            "buildOsInfo": {
                                "type": "string"
                            },
                            "buildJavaVersion": {
                                "type": "string"
                            },
                            "buildJavaVendor": {
                                "type": "string"
                            },
                            "scmUrl": {
                                "type": "string"
                            },
                            "scmRevision": {
                                "type": "string"
                            },
                            "devMode": {
                                "type": "boolean"
                            }
                        }
                    },
                    "UserRegisterDto": {
                        "type": "object",
                        "properties": {
                            "profile": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            },
                            "email": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            },
                            "surname": {
                                "type": "string"
                            },
                            "organisation": {
                                "type": "string"
                            },
                            "address": {
                                "$ref": "#/components/schemas/Address"
                            },
                            "captcha": {
                                "type": "string"
                            }
                        },
                        "description": "User details"
                    },
                    "MetadataIdentifierTemplate": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "template": {
                                "type": "string"
                            },
                            "systemProvided": {
                                "type": "boolean"
                            },
                            "systemDefault": {
                                "type": "boolean",
                                "writeOnly": true
                            },
                            "systemProvided_JPAWorkaround": {
                                "type": "string",
                                "writeOnly": true
                            },
                            "name": {
                                "type": "string"
                            }
                        },
                        "description": "Identifier template details"
                    },
                    "AssociatedRecord": {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "type": "string"
                            },
                            "properties": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "_source": {
                                "$ref": "#/components/schemas/JsonNode"
                            },
                            "_id": {
                                "type": "string"
                            }
                        }
                    },
                    "JsonNode": {
                        "type": "object",
                        "properties": {
                            "float": {
                                "type": "boolean"
                            },
                            "nodeType": {
                                "type": "string",
                                "enum": [
                                    "ARRAY",
                                    "BINARY",
                                    "BOOLEAN",
                                    "MISSING",
                                    "NULL",
                                    "NUMBER",
                                    "OBJECT",
                                    "POJO",
                                    "STRING"
                                ]
                            },
                            "object": {
                                "type": "boolean"
                            },
                            "number": {
                                "type": "boolean"
                            },
                            "containerNode": {
                                "type": "boolean"
                            },
                            "pojo": {
                                "type": "boolean"
                            },
                            "missingNode": {
                                "type": "boolean"
                            },
                            "valueNode": {
                                "type": "boolean"
                            },
                            "integralNumber": {
                                "type": "boolean"
                            },
                            "floatingPointNumber": {
                                "type": "boolean"
                            },
                            "short": {
                                "type": "boolean"
                            },
                            "int": {
                                "type": "boolean"
                            },
                            "long": {
                                "type": "boolean"
                            },
                            "double": {
                                "type": "boolean"
                            },
                            "bigDecimal": {
                                "type": "boolean"
                            },
                            "bigInteger": {
                                "type": "boolean"
                            },
                            "textual": {
                                "type": "boolean"
                            },
                            "boolean": {
                                "type": "boolean"
                            },
                            "binary": {
                                "type": "boolean"
                            },
                            "array": {
                                "type": "boolean"
                            },
                            "empty": {
                                "type": "boolean"
                            },
                            "null": {
                                "type": "boolean"
                            }
                        }
                    },
                    "BatchEditParameter": {
                        "required": [
                            "value",
                            "xpath"
                        ],
                        "type": "object",
                        "properties": {
                            "xpath": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            },
                            "condition": {
                                "type": "string"
                            }
                        },
                        "xml": {
                            "name": "edit"
                        }
                    },
                    "LogFileResponse": {
                        "type": "object",
                        "properties": {
                            "file": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "name": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            }
                        }
                    },
                    "CategoryResponse": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "ListRegionsResponse": {
                        "type": "object",
                        "properties": {
                            "region": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RegionResponse"
                                }
                            },
                            "categories": {
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/components/schemas/CategoryResponse"
                                }
                            },
                            "regions": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RegionResponse"
                                }
                            },
                            "count": {
                                "type": "integer",
                                "format": "int32",
                                "xml": {
                                    "attribute": true
                                }
                            }
                        },
                        "xml": {
                            "name": "response"
                        }
                    },
                    "RegionResponse": {
                        "type": "object",
                        "properties": {
                            "north": {
                                "type": "number",
                                "format": "double"
                            },
                            "east": {
                                "type": "number",
                                "format": "double"
                            },
                            "south": {
                                "type": "number",
                                "format": "double"
                            },
                            "west": {
                                "type": "number",
                                "format": "double"
                            },
                            "label": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "hasGeom": {
                                "type": "boolean",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "categoryId": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "id": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            }
                        }
                    },
                    "Crs": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string"
                            },
                            "authority": {
                                "type": "string"
                            },
                            "version": {
                                "type": "string"
                            },
                            "codeSpace": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            }
                        }
                    },
                    "MetadataBatchSubmitParameter": {
                        "type": "object",
                        "properties": {
                            "uuids": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "bucket": {
                                "type": "string"
                            },
                            "message": {
                                "type": "string"
                            }
                        }
                    },
                    "Language": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "inspire": {
                                "type": "boolean"
                            },
                            "inspire_JPAWorkaround": {
                                "type": "string",
                                "writeOnly": true
                            },
                            "defaultLanguage_JPAWorkaround": {
                                "type": "string",
                                "writeOnly": true
                            },
                            "defaultLanguage": {
                                "type": "boolean"
                            },
                            "name": {
                                "type": "string"
                            }
                        }
                    },
                    "UserGroupsResponse": {
                        "type": "object",
                        "properties": {
                            "userId": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "userName": {
                                "type": "string"
                            },
                            "groupId": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "groupName": {
                                "type": "string"
                            },
                            "userProfile": {
                                "type": "string"
                            }
                        }
                    },
                    "ProcessingReport": {
                        "type": "object",
                        "properties": {
                            "errors": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Report"
                                }
                            },
                            "infos": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/InfoReport"
                                }
                            },
                            "uuid": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "running": {
                                "type": "boolean"
                            },
                            "startIsoDateTime": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "endIsoDateTime": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "ellapsedTimeInSeconds": {
                                "type": "integer",
                                "format": "int64",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "totalTimeInSeconds": {
                                "type": "integer",
                                "format": "int64",
                                "xml": {
                                    "attribute": true
                                }
                            },
                            "type": {
                                "type": "string",
                                "xml": {
                                    "attribute": true
                                }
                            }
                        },
                        "xml": {
                            "name": "report"
                        }
                    },
                    "StatusValue": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "workflow",
                                    "task",
                                    "event"
                                ]
                            },
                            "notificationLevel": {
                                "type": "string",
                                "enum": [
                                    "statusUserOwner",
                                    "catalogueAdministrator",
                                    "catalogueProfileAdministrator",
                                    "catalogueProfileUserAdmin",
                                    "catalogueProfileReviewer",
                                    "catalogueProfileEditor",
                                    "catalogueProfileRegisteredUser",
                                    "catalogueProfileGuest",
                                    "recordProfileReviewer",
                                    "recordUserAuthor",
                                    "recordGroupEmail"
                                ]
                            },
                            "displayOrder": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "reserved": {
                                "type": "boolean"
                            },
                            "reserved_JpaWorkaround": {
                                "type": "string",
                                "writeOnly": true
                            },
                            "name": {
                                "type": "string"
                            },
                            "label": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "MetadataStatusParameter": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "workflow",
                                    "task",
                                    "event"
                                ]
                            },
                            "status": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "changeMessage": {
                                "type": "string"
                            },
                            "dueDate": {
                                "type": "string"
                            },
                            "closeDate": {
                                "type": "string"
                            },
                            "owner": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "description": "Metadata status"
                    },
                    "IProcessingReport": {
                        "type": "object",
                        "properties": {
                            "running": {
                                "type": "boolean"
                            },
                            "startIsoDateTime": {
                                "type": "string"
                            },
                            "endIsoDateTime": {
                                "type": "string"
                            },
                            "ellapsedTimeInSeconds": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "totalTimeInSeconds": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "uuid": {
                                "type": "string"
                            },
                            "type": {
                                "type": "string"
                            }
                        }
                    },
                    "MapService": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string"
                            },
                            "urlType": {
                                "type": "string"
                            },
                            "useProxy": {
                                "type": "boolean"
                            },
                            "authType": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "dedl": {
            "openapi": "3.0.0",
            "info": {
                "title": "DestinE Data Lake API",
                "version": "1.0",
                "description": "DestinE Data Lake API providing access to a federation of external collections as well as DEDL specific data collections through a STAC catalogue.  \nIt also advertise a list of services users can exploit on the platform. ",
                "x-logo": {
                    "url": ""
                }
            },
            "paths": {
                "/": {
                    "get": {
                        "tags": [
                            "DEDL API - Core"
                        ],
                        "responses": {
                            "200": {
                                "$ref": "#/components/responses/LandingPage"
                            },
                            "500": {
                                "$ref": "#/components/responses/ServerError"
                            },
                            "default": {
                                "$ref": "#/components/responses/Error"
                            }
                        },
                        "operationId": "get",
                        "summary": "DEDL API root endpoint",
                        "description": "Root endpoint of the Destination Earth Data Lake API."
                    }
                },
                "/services": {
                    "get": {
                        "tags": [
                            "DEDL API - Services"
                        ],
                        "responses": {
                            "200": {
                                "$ref": "#/components/responses/Services"
                            },
                            "500": {
                                "$ref": "#/components/responses/ServerError"
                            },
                            "default": {
                                "$ref": "#/components/responses/Error"
                            }
                        },
                        "operationId": "getServices",
                        "summary": "The services advertised with the API.",
                        "description": "The list of services available for users of the platform."
                    }
                },
                "/services/{serviceId}": {
                    "get": {
                        "tags": [
                            "DEDL API - Services"
                        ],
                        "parameters": [
                            {
                                "$ref": "#/components/parameters/serviceId"
                            }
                        ],
                        "responses": {
                            "200": {
                                "$ref": "#/components/responses/Service"
                            },
                            "404": {
                                "$ref": "#/components/responses/NotFound"
                            },
                            "500": {
                                "$ref": "#/components/responses/ServerError"
                            },
                            "default": {
                                "$ref": "#/components/responses/Error"
                            }
                        },
                        "operationId": "getService",
                        "summary": "Describe the service for the given `serviceId`",
                        "description": "Endpoint providing the information related to a specific service identified by its `serviceId`."
                    }
                },
                "/stac": {
                    "get": {
                        "tags": [
                            "STAC API - Core"
                        ],
                        "responses": {
                            "200": {
                                "$ref": "#/components/responses/StacPage"
                            },
                            "500": {
                                "$ref": "#/components/responses/ServerError"
                            },
                            "default": {
                                "$ref": "#/components/responses/Error"
                            }
                        },
                        "operationId": "getStac",
                        "summary": "DEDL STAC capabilities discovery",
                        "description": "Endpoint providing the search capabilities provided by the DEDL STAC interface."
                    }
                },
                "/stac/conformance": {
                    "get": {
                        "tags": [
                            "STAC API - Features"
                        ],
                        "responses": {
                            "200": {
                                "$ref": "#/components/responses/ConformanceDeclaration"
                            },
                            "500": {
                                "$ref": "#/components/responses/ServerError"
                            },
                            "default": {
                                "$ref": "#/components/responses/Error"
                            }
                        },
                        "summary": "information about specifications that this API conforms to",
                        "description": "A list of all conformance classes specified in a standard that the\nserver conforms to.",
                        "operationId": "getConformanceDeclaration"
                    }
                },
                "/stac/collections": {
                    "get": {
                        "tags": [
                            "STAC API - Features",
                            "STAC API - Collections"
                        ],
                        "summary": "The feature collections in the dataset.",
                        "description": "A body of Feature Collections that belong or are used together with additional links. Request may not return the full set of metadata per Feature Collection.",
                        "operationId": "getCollections",
                        "parameters": [
                            {
                                "$ref": "#/components/parameters/bbox"
                            },
                            {
                                "$ref": "#/components/parameters/datetime"
                            },
                            {
                                "$ref": "#/components/parameters/limit"
                            },
                            {
                                "$ref": "#/components/parameters/q"
                            }
                        ],
                        "responses": {
                            "200": {
                                "$ref": "#/components/responses/Collections"
                            },
                            "500": {
                                "$ref": "#/components/responses/ServerError"
                            },
                            "default": {
                                "$ref": "#/components/responses/Error"
                            }
                        }
                    }
                },
                "/stac/collections/{collectionId}": {
                    "get": {
                        "tags": [
                            "STAC API - Features",
                            "STAC API - Collections"
                        ],
                        "parameters": [
                            {
                                "$ref": "#/components/parameters/collectionId"
                            }
                        ],
                        "responses": {
                            "200": {
                                "$ref": "#/components/responses/Collection"
                            },
                            "404": {
                                "$ref": "#/components/responses/NotFound"
                            },
                            "500": {
                                "$ref": "#/components/responses/ServerError"
                            },
                            "default": {
                                "$ref": "#/components/responses/Error"
                            }
                        },
                        "operationId": "get_collections_collectionId",
                        "summary": "Describe the feature Collection for the given `collectionId`.",
                        "description": "A single Feature Colletion for the give `collectionId`. Request this endpoint to get a full list of metadata for the Feature Collection."
                    }
                },
                "/stac/collections/{collectionId}/items": {
                    "get": {
                        "tags": [
                            "STAC API - Features"
                        ],
                        "parameters": [
                            {
                                "$ref": "#/components/parameters/collectionId"
                            },
                            {
                                "$ref": "#/components/parameters/bbox"
                            },
                            {
                                "$ref": "#/components/parameters/datetime"
                            },
                            {
                                "$ref": "#/components/parameters/limit"
                            }
                        ],
                        "responses": {
                            "200": {
                                "$ref": "#/components/responses/Features"
                            },
                            "400": {
                                "$ref": "#/components/responses/InvalidParameter"
                            },
                            "404": {
                                "$ref": "#/components/responses/NotFound"
                            },
                            "500": {
                                "$ref": "#/components/responses/ServerError"
                            },
                            "default": {
                                "$ref": "#/components/responses/Error"
                            }
                        },
                        "operationId": "getFeatures",
                        "summary": "List of items avaialble in a given collection",
                        "description": "Endpoint providing the list of items that are available in a specific collection identified by its `collectionId`."
                    }
                },
                "/stac/collections/{collectionId}/items/{featureId}": {
                    "get": {
                        "tags": [
                            "STAC API - Features"
                        ],
                        "parameters": [
                            {
                                "$ref": "#/components/parameters/collectionId"
                            },
                            {
                                "$ref": "#/components/parameters/featureId"
                            }
                        ],
                        "responses": {
                            "200": {
                                "$ref": "#/components/responses/Feature"
                            },
                            "404": {
                                "$ref": "#/components/responses/NotFound"
                            },
                            "500": {
                                "$ref": "#/components/responses/ServerError"
                            },
                            "default": {
                                "$ref": "#/components/responses/Error"
                            }
                        },
                        "operationId": "get collections__collectionId__items_itemId",
                        "summary": "Fetch a single feature.",
                        "description": "Fetch the feature with id `featureId` in the feature collection\nwith id `collectionId`."
                    }
                },
                "/stac/search": {
                    "get": {
                        "summary": "Search STAC items with simple filtering.",
                        "operationId": "getItemSearch",
                        "description": "Retrieve Items matching filters. Intended as a shorthand API for simple\nqueries.",
                        "parameters": [
                            {
                                "$ref": "#/components/parameters/bbox"
                            },
                            {
                                "$ref": "#/components/parameters/datetime"
                            },
                            {
                                "$ref": "#/components/parameters/limit"
                            },
                            {
                                "$ref": "#/components/parameters/intersects"
                            },
                            {
                                "$ref": "#/components/parameters/collectionsArray"
                            }
                        ],
                        "responses": {
                            "200": {
                                "description": "A feature collection.",
                                "content": {
                                    "application/geo+json": {
                                        "schema": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/components/schemas/itemCollection"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/schemas-itemCollection"
                                                }
                                            ]
                                        }
                                    },
                                    "text/html": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "500": {
                                "$ref": "#/components/responses/ServerError"
                            },
                            "default": {
                                "$ref": "#/components/responses/Error"
                            }
                        },
                        "tags": [
                            "STAC API - Item Search"
                        ]
                    },
                    "post": {
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/components/schemas/searchBody"
                                            },
                                            {
                                                "$ref": "#/components/schemas/schemas-searchBody"
                                            },
                                            {
                                                "$ref": "#/components/schemas/components-schemas-searchBody"
                                            },
                                            {
                                                "$ref": "#/components/schemas/openapi_components-schemas-searchBody"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "tags": [
                            "STAC API - Item Search"
                        ],
                        "responses": {
                            "200": {
                                "description": "A feature collection.",
                                "content": {
                                    "application/geo+json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/itemCollection"
                                        }
                                    },
                                    "text/html": {
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "500": {
                                "$ref": "#/components/responses/ServerError"
                            },
                            "default": {
                                "$ref": "#/components/responses/Error"
                            }
                        },
                        "summary": "Search STAC items with full-featured filtering.",
                        "operationId": "postItemSearch",
                        "description": "Retrieve items matching filters. Intended as the standard, full-featured\nquery API."
                    }
                },
                "/stac/download": {
                    "post": {
                        "requestBody": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/components/schemas/searchBody"
                                            },
                                            {
                                                "$ref": "#/components/schemas/schemas-searchBody"
                                            },
                                            {
                                                "$ref": "#/components/schemas/components-schemas-searchBody"
                                            },
                                            {
                                                "$ref": "#/components/schemas/openapi_components-schemas-searchBody"
                                            }
                                        ]
                                    }
                                }
                            },
                            "required": true
                        },
                        "tags": [
                            "STAC API - Item Download"
                        ],
                        "responses": {
                            "200": {
                                "content": {
                                    "application/zip": {
                                        "schema": {}
                                    }
                                },
                                "description": "Successful Response"
                            },
                            "500": {
                                "$ref": "#/components/responses/ServerError"
                            },
                            "404": {
                                "$ref": "#/components/responses/NotFound"
                            },
                            "default": {
                                "$ref": "#/components/responses/Error"
                            }
                        },
                        "operationId": "postDownload",
                        "summary": "Download request",
                        "description": "Endpoint allowing user to request the download of a given item. The content of the download is specified in the body of the request."
                    }
                },
                "/stac/collections/{collectionId}/items/{featureId}/download": {
                    "get": {
                        "tags": [
                            "STAC API - Item Download"
                        ],
                        "parameters": [
                            {
                                "$ref": "#/components/parameters/collectionId"
                            },
                            {
                                "$ref": "#/components/parameters/featureId"
                            }
                        ],
                        "responses": {
                            "200": {
                                "$ref": "#/components/responses/Feature"
                            },
                            "404": {
                                "$ref": "#/components/responses/NotFound"
                            },
                            "500": {
                                "$ref": "#/components/responses/ServerError"
                            },
                            "default": {
                                "$ref": "#/components/responses/Error"
                            }
                        },
                        "operationId": "download collections__collectionId__items_itemId",
                        "summary": "Download a single feature assets .zip archive.",
                        "description": "Download the feature with id `featureId` in the feature collection\nwith id `collectionId` assets .zip archive."
                    }
                }
            },
            "components": {
                "schemas": {
                    "andOrExpression": {
                        "type": "object",
                        "required": [
                            "op",
                            "args"
                        ],
                        "properties": {
                            "op": {
                                "type": "string",
                                "enum": [
                                    "and",
                                    "or"
                                ]
                            },
                            "args": {
                                "type": "array",
                                "minItems": 2,
                                "items": {
                                    "$ref": "#/components/schemas/booleanExpression"
                                }
                            }
                        }
                    },
                    "arithmeticExpression": {
                        "type": "object",
                        "required": [
                            "op",
                            "args"
                        ],
                        "properties": {
                            "op": {
                                "type": "string",
                                "enum": [
                                    "+",
                                    "-",
                                    "*",
                                    "/"
                                ]
                            },
                            "args": {
                                "$ref": "#/components/schemas/arithmeticOperands"
                            }
                        }
                    },
                    "arithmeticOperands": {
                        "type": "array",
                        "minItems": 2,
                        "maxItems": 2,
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/arithmeticExpression"
                                },
                                {
                                    "$ref": "#/components/schemas/propertyRef"
                                },
                                {
                                    "$ref": "#/components/schemas/functionRef"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    },
                    "arrayExpression": {
                        "type": "array",
                        "minItems": 2,
                        "maxItems": 2,
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/propertyRef"
                                },
                                {
                                    "$ref": "#/components/schemas/functionRef"
                                },
                                {
                                    "$ref": "#/components/schemas/arrayLiteral"
                                }
                            ]
                        }
                    },
                    "arrayLiteral": {
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/scalarLiteral"
                                },
                                {
                                    "$ref": "#/components/schemas/spatialLiteral"
                                },
                                {
                                    "$ref": "#/components/schemas/intervalLiteral"
                                },
                                {
                                    "$ref": "#/components/schemas/propertyRef"
                                },
                                {
                                    "$ref": "#/components/schemas/functionRef"
                                },
                                {
                                    "$ref": "#/components/schemas/arithmeticExpression"
                                },
                                {
                                    "$ref": "#/components/schemas/arrayLiteral"
                                }
                            ]
                        }
                    },
                    "arrayPredicate": {
                        "type": "object",
                        "required": [
                            "op",
                            "args"
                        ],
                        "properties": {
                            "op": {
                                "type": "string",
                                "enum": [
                                    "a_containedBy",
                                    "a_contains",
                                    "a_equals",
                                    "a_overlaps"
                                ]
                            },
                            "args": {
                                "$ref": "#/components/schemas/arrayExpression"
                            }
                        }
                    },
                    "assets": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "format": "url",
                                    "description": "Link to the asset object",
                                    "example": "http://dedl-hda.local/static-catalog/collections/CS3/20160503_132130_04/thumbnail.png"
                                },
                                "title": {
                                    "type": "string",
                                    "description": "Displayed title",
                                    "example": "Thumbnail"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Multi-line description to explain the asset.\n\n[CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.",
                                    "example": "Small 256x256px PNG thumbnail for a preview."
                                },
                                "type": {
                                    "type": "string",
                                    "description": "Media type of the asset",
                                    "example": "image/png"
                                },
                                "roles": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "Purposes of the asset",
                                    "example": [
                                        "thumbnail"
                                    ]
                                }
                            }
                        }
                    },
                    "Asset": {
                        "type": "object",
                        "properties": {
                            "href": {
                                "type": "string",
                                "format": "uri",
                                "description": "URL of the resource."
                            },
                            "type": {
                                "type": "string",
                                "description": "MIME content type of the resource."
                            },
                            "roles": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "type": "string"
                                },
                                "description": "List of tags describing the asset."
                            },
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": {
                            "anyOf": [
                                {
                                    "type": "object"
                                },
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "boolean"
                                }
                            ]
                        },
                        "required": [
                            "roles",
                            "title"
                        ]
                    },
                    "bbox": {
                        "description": "One or more bounding boxes that describe the spatial extent of the dataset.\n\nThe first bounding box describes the overall spatial\nextent of the data. All subsequent bounding boxes describe \nmore precise bounding boxes, e.g., to identify clusters of data.\nClients only interested in the overall spatial extent will\nonly need to access the first item in each array.",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                            "description": "Each bounding box is provided as four or six numbers, depending on\nwhether the coordinate reference system includes a vertical axis\n(height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nThe coordinate reference system of the values is WGS 84 longitude/latitude\n(http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate\nreference system is specified in `crs`.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.",
                            "type": "array",
                            "minItems": 4,
                            "maxItems": 6,
                            "items": {
                                "type": "number"
                            },
                            "example": [
                                -180,
                                -90,
                                180,
                                90
                            ]
                        }
                    },
                    "bboxFilter": {
                        "type": "object",
                        "description": "Only return items that intersect the provided bounding box.",
                        "properties": {
                            "bbox": {
                                "$ref": "#/components/schemas/schemas-bbox"
                            }
                        }
                    },
                    "binaryComparisonPredicate": {
                        "type": "object",
                        "required": [
                            "op",
                            "args"
                        ],
                        "properties": {
                            "op": {
                                "type": "string",
                                "enum": [
                                    "=",
                                    "<",
                                    "",
                                    "<=",
                                    ">=",
                                    "<>"
                                ]
                            },
                            "args": {
                                "$ref": "#/components/schemas/scalarOperands"
                            }
                        }
                    },
                    "booleanExpression": {
                        "type": "object",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/andOrExpression"
                            },
                            {
                                "$ref": "#/components/schemas/notExpression"
                            },
                            {
                                "$ref": "#/components/schemas/comparisonPredicate"
                            },
                            {
                                "$ref": "#/components/schemas/spatialPredicate"
                            },
                            {
                                "$ref": "#/components/schemas/temporalPredicate"
                            },
                            {
                                "$ref": "#/components/schemas/arrayPredicate"
                            },
                            {
                                "type": "boolean"
                            }
                        ]
                    },
                    "booleanValueExpression": {
                        "type": "object",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/logicalExpression"
                            },
                            {
                                "$ref": "#/components/schemas/notExpression"
                            },
                            {
                                "$ref": "#/components/schemas/comparisonPredicate"
                            },
                            {
                                "$ref": "#/components/schemas/spatialPredicate"
                            },
                            {
                                "$ref": "#/components/schemas/temporalPredicate"
                            },
                            {
                                "$ref": "#/components/schemas/arrayPredicate"
                            }
                        ]
                    },
                    "catalog": {
                        "type": "object",
                        "required": [
                            "stac_version",
                            "type",
                            "id",
                            "description",
                            "links"
                        ],
                        "properties": {
                            "stac_version": {
                                "$ref": "#/components/schemas/stac_version"
                            },
                            "stac_extensions": {
                                "$ref": "#/components/schemas/stac_extensions"
                            },
                            "type": {
                                "type": "string"
                            },
                            "id": {
                                "type": "string"
                            },
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "links": {
                                "$ref": "#/components/schemas/links"
                            }
                        }
                    },
                    "characterExpression": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/propertyRef"
                            },
                            {
                                "$ref": "#/components/schemas/functionRef"
                            }
                        ]
                    },
                    "collection": {
                        "title": "Collection",
                        "description": "Collection.",
                        "type": "object",
                        "properties": {
                            "dedl:short_description": {
                                "type": "string",
                                "description": "Short description of the Collection."
                            },
                            "description": {
                                "type": "string",
                                "description": "Detailed multi-line description to fully explain the collection.\n[CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation."
                            },
                            "extent": {
                                "type": "object",
                                "description": "The object describes the spatio-temporal extents of the Collection.",
                                "properties": {
                                    "spatial": {
                                        "type": "object",
                                        "properties": {
                                            "bbox": {
                                                "$ref": "#/components/schemas/bbox"
                                            },
                                            "crs": {
                                                "description": "Coordinate reference system of the coordinates in the spatial extent\n(property `bbox`). The default reference system is WGS 84 longitude/latitude.\nIn the Core this is the only supported coordinate reference system.\nExtensions may support additional coordinate reference systems and add additional enum values.",
                                                "type": "string",
                                                "enum": [
                                                    "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
                                                ],
                                                "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
                                            }
                                        }
                                    },
                                    "temporal": {
                                        "description": "The temporal extent of the features in the collection.",
                                        "type": "object",
                                        "required": [
                                            "interval"
                                        ],
                                        "properties": {
                                            "interval": {
                                                "description": "One or more time intervals that describe the temporal extent of the dataset.\n\nThe first time interval describes the overall\ntemporal extent of the data. All subsequent time intervals describe \nmore precise time intervals, e.g., to identify clusters of data.\nClients only interested in the overall extent will only need\nto access the first item in each array.",
                                                "type": "array",
                                                "minItems": 1,
                                                "items": {
                                                    "description": "Begin and end times of the time interval. The timestamps\nare in the coordinate reference system specified in `trs`. By default\nthis is the Gregorian calendar.\n\nThe value `null` is supported and indicates an open time interval.",
                                                    "type": "array",
                                                    "minItems": 2,
                                                    "maxItems": 2,
                                                    "items": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "nullable": true
                                                    },
                                                    "example": [
                                                        "2011-11-11T12:22:11Z",
                                                        null
                                                    ]
                                                }
                                            },
                                            "trs": {
                                                "description": "Coordinate reference system of the coordinates in the temporal extent\n(property `interval`). The default reference system is the Gregorian calendar.\nIn the Core this is the only supported temporal reference system.\nExtensions may support additional temporal reference systems and add\nadditional enum values.",
                                                "type": "string",
                                                "enum": [
                                                    "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
                                                ],
                                                "default": "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
                                            }
                                        }
                                    }
                                },
                                "required": [
                                    "spatial",
                                    "temporal"
                                ]
                            },
                            "id": {
                                "description": "Identifier of the collection used, for example, in URIs.",
                                "type": "string"
                            },
                            "keywords": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "List of tags describing the collection."
                            },
                            "stac_version": {
                                "$ref": "#/components/schemas/stac_version"
                            },
                            "stac_extensions": {
                                "$ref": "#/components/schemas/stac_extensions"
                            },
                            "summaries": {
                                "description": "Summaries are either a unique set of all available values *or*\nstatistics. Statistics by default only specify the range (minimum\nand maximum values), but can optionally be accompanied by additional\nstatistical values. The range can specify the potential range of\nvalues, but it is recommended to be as precise as possible. The set\nof values must contain at least one element and it is strongly\nrecommended to list all values. It is recommended to list as many\nproperties as reasonable so that consumers get a full overview of\nthe Collection. Properties that are covered by the Collection\nspecification (e.g. `providers` and `license`) may not be repeated\nin the summaries.",
                                "type": "object",
                                "additionalProperties": {
                                    "oneOf": [
                                        {
                                            "type": "array",
                                            "title": "Set of values",
                                            "items": {
                                                "description": "A value of any type."
                                            }
                                        },
                                        {
                                            "type": "object",
                                            "title": "Statistics",
                                            "description": "By default, only ranges with a minimum and a maximum value can\nbe specified. Ranges can be specified for ordinal values only,\nwhich means they need to have a rank order. Therefore, ranges\ncan only be specified for numbers and some special types of\nstrings. Examples: grades (A to F), dates or times.\nImplementors are free to add other derived statistical values\nto the object, for example `mean` or `stddev`.",
                                            "required": [
                                                "min",
                                                "max"
                                            ],
                                            "properties": {
                                                "min": {
                                                    "anyOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "number"
                                                        }
                                                    ]
                                                },
                                                "max": {
                                                    "anyOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "number"
                                                        }
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            "providers": {
                                "$ref": "#/components/schemas/providers"
                            },
                            "title": {
                                "type": "string",
                                "description": "A short descriptive one-line title for the Collection."
                            },
                            "type": {
                                "type": "string",
                                "const": "Collection"
                            },
                            "assets": {
                                "type": "object",
                                "properties": {
                                    "thumbnail": {
                                        "$ref": "#/components/schemas/Asset"
                                    }
                                },
                                "additionalProperties": {
                                    "$ref": "#/components/schemas/Asset"
                                },
                                "description": "Collections are strongly recommended to provide summaries of the values of fields that they can expect from the properties of STAC Items contained in this Collection."
                            },
                            "item_assets": {
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/components/schemas/Asset"
                                },
                                "description": "Assets available in any Items belonging to this Collection."
                            },
                            "license": {
                                "$ref": "#/components/schemas/license"
                            },
                            "links": {
                                "$ref": "#/components/schemas/links",
                                "prefixItems": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "rel": {
                                                "type": "string",
                                                "const": "items"
                                            },
                                            "type": {
                                                "type": "string",
                                                "const": "application/geo+json"
                                            },
                                            "href": {
                                                "type": "string",
                                                "format": "uri"
                                            }
                                        },
                                        "description": "The list of items of the collection."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "rel": {
                                                "type": "string",
                                                "const": "parent"
                                            },
                                            "type": {
                                                "type": "string",
                                                "const": "application/json"
                                            },
                                            "href": {
                                                "type": "string",
                                                "format": "uri"
                                            }
                                        },
                                        "description": "The parent endpoint in the API."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "rel": {
                                                "type": "string",
                                                "const": "root"
                                            },
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "application/json"
                                                ]
                                            },
                                            "href": {
                                                "type": "string",
                                                "format": "uri"
                                            }
                                        },
                                        "description": "The root endpoint of the API."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "rel": {
                                                "type": "string",
                                                "enum": [
                                                    "self"
                                                ]
                                            },
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "application/json"
                                                ]
                                            },
                                            "href": {
                                                "type": "string",
                                                "format": "uri"
                                            }
                                        },
                                        "description": "Endpoint to access this collection in the API."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "rel": {
                                                "type": "string",
                                                "const": "license"
                                            },
                                            "href": {
                                                "type": "string",
                                                "format": "uri"
                                            }
                                        },
                                        "description": "Endpoint to access the license of the collection."
                                    }
                                ]
                            },
                            "version": {
                                "type": "string",
                                "description": "Version of the collection. The field is added to id to search in the API. Useful for collections from CMEMS for example as they update the dataset ID on change."
                            }
                        },
                        "required": [
                            "dedl:short_description",
                            "description",
                            "extent",
                            "id",
                            "license",
                            "links",
                            "stac_version",
                            "type"
                        ],
                        "example": {
                            "stac_version": "1.0.0",
                            "stac_extensions": [],
                            "type": "Collection",
                            "id": "Sentinel-2",
                            "title": "Sentinel-2 MSI: MultiSpectral Instrument, Level-1C",
                            "description": "Sentinel-2 is a wide-swath, high-resolution, multi-spectral\nimaging mission...\n",
                            "dedl:short_description": "Sentinel-2 is a wide-swath, high-resolution, multi-spectral imaging mission.",
                            "license": "proprietary",
                            "keywords": [
                                "copernicus",
                                "esa",
                                "eu",
                                "msi",
                                "radiance",
                                "sentinel"
                            ],
                            "providers": [
                                {
                                    "name": "ESA",
                                    "roles": [
                                        "producer",
                                        "licensor"
                                    ],
                                    "url": "https://sentinel.esa.int/web/sentinel/user-guides/sentinel-2-msi"
                                }
                            ],
                            "extent": {
                                "spatial": {
                                    "bbox": [
                                        [
                                            -180,
                                            -56,
                                            180,
                                            83
                                        ]
                                    ]
                                },
                                "temporal": {
                                    "interval": [
                                        [
                                            "2015-06-23T00:00:00Z",
                                            "2019-07-10T13:44:56Z"
                                        ]
                                    ]
                                }
                            },
                            "summaries": {
                                "datetime": {
                                    "min": "2015-06-23T00:00:00Z",
                                    "max": "2019-07-10T13:44:56Z"
                                },
                                "sci:citation": [
                                    "Copernicus Sentinel data [Year]"
                                ],
                                "eo:gsd": [
                                    10,
                                    30,
                                    60
                                ],
                                "platform": [
                                    "sentinel-2a",
                                    "sentinel-2b"
                                ],
                                "constellation": [
                                    "sentinel-2"
                                ],
                                "instruments": [
                                    "msi"
                                ],
                                "view:off_nadir": {
                                    "min": 0,
                                    "max": 100
                                },
                                "view:sun_elevation": {
                                    "min": 6.78,
                                    "max": 89.9
                                },
                                "eo:bands": [
                                    [
                                        {
                                            "name": "B1",
                                            "common_name": "coastal",
                                            "center_wavelength": 4.439
                                        },
                                        {
                                            "name": "B2",
                                            "common_name": "blue",
                                            "center_wavelength": 4.966
                                        },
                                        {
                                            "name": "B3",
                                            "common_name": "green",
                                            "center_wavelength": 5.6
                                        },
                                        {
                                            "name": "B4",
                                            "common_name": "red",
                                            "center_wavelength": 6.645
                                        },
                                        {
                                            "name": "B5",
                                            "center_wavelength": 7.039
                                        },
                                        {
                                            "name": "B6",
                                            "center_wavelength": 7.402
                                        },
                                        {
                                            "name": "B7",
                                            "center_wavelength": 7.825
                                        },
                                        {
                                            "name": "B8",
                                            "common_name": "nir",
                                            "center_wavelength": 8.351
                                        },
                                        {
                                            "name": "B8A",
                                            "center_wavelength": 8.648
                                        },
                                        {
                                            "name": "B9",
                                            "center_wavelength": 9.45
                                        },
                                        {
                                            "name": "B10",
                                            "center_wavelength": 1.3735
                                        },
                                        {
                                            "name": "B11",
                                            "common_name": "swir16",
                                            "center_wavelength": 1.6137
                                        },
                                        {
                                            "name": "B12",
                                            "common_name": "swir22",
                                            "center_wavelength": 2.2024
                                        }
                                    ]
                                ]
                            },
                            "links": [
                                {
                                    "rel": "items",
                                    "href": "http://dedl-hda.local/stac/collections/Sentinel-2/items"
                                },
                                {
                                    "rel": "self",
                                    "href": "http://dedl-hda.local/stac/collections/Sentinel-2"
                                },
                                {
                                    "rel": "parent",
                                    "href": "http://dedl-hda.local/stac/collections"
                                },
                                {
                                    "rel": "root",
                                    "href": "http://dedl-hda.local"
                                },
                                {
                                    "rel": "queryables",
                                    "href": "http://dedl-hda.local/stac/collections/Sentinel-2"
                                },
                                {
                                    "rel": "license",
                                    "href": "https://scihub.copernicus.eu/twiki/pub/SciHubWebPortal/TermsConditions/Sentinel_Data_Terms_and_Conditions.pdf",
                                    "title": "Legal notice on the use of Copernicus Sentinel Data and Service Information"
                                }
                            ]
                        }
                    },
                    "collections": {
                        "type": "object",
                        "properties": {
                            "collections": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/collection"
                                }
                            },
                            "links": {
                                "$ref": "#/components/schemas/links"
                            }
                        },
                        "required": [
                            "collections",
                            "links"
                        ]
                    },
                    "collectionsArray": {
                        "type": "array",
                        "description": "Array of Collection IDs to include in the search for items.\nOnly Item objects in one of the provided collections will be searched.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "collectionsFilter": {
                        "type": "object",
                        "description": "Only returns the collections specified",
                        "properties": {
                            "collections": {
                                "$ref": "#/components/schemas/collectionsArray"
                            }
                        }
                    },
                    "comparisonPredicate": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/binaryComparisonPredicate"
                            },
                            {
                                "$ref": "#/components/schemas/isLikePredicate"
                            },
                            {
                                "$ref": "#/components/schemas/isBetweenPredicate"
                            },
                            {
                                "$ref": "#/components/schemas/isInListPredicate"
                            },
                            {
                                "$ref": "#/components/schemas/isNullPredicate"
                            }
                        ]
                    },
                    "components-schemas-searchBody": {
                        "type": "object",
                        "x-stac-api-fragment": "filter",
                        "description": "**Extension:** Filter\n\nA filter for properties in Items.",
                        "properties": {
                            "filter": {
                                "$ref": "#/components/schemas/filter-cql2-json"
                            },
                            "filter-lang": {
                                "$ref": "#/components/schemas/filter-lang"
                            },
                            "filter-crs": {
                                "$ref": "#/components/schemas/filter-crs"
                            }
                        }
                    },
                    "conformanceClasses": {
                        "type": "object",
                        "required": [
                            "conformsTo"
                        ],
                        "properties": {
                            "conformsTo": {
                                "description": "A list of all conformance classes implemented by the server. In addition to the STAC-specific conformance classes, all OGC-related conformance classes listed at `GET /conformances` must be listed here. This entry should mirror what `GET /conformances` returns, if implemented.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "dateLiteral": {
                        "type": "object",
                        "required": [
                            "date"
                        ],
                        "properties": {
                            "date": {
                                "$ref": "#/components/schemas/dateString"
                            }
                        }
                    },
                    "dateString": {
                        "type": "string",
                        "format": "date"
                    },
                    "datetimeFilter": {
                        "description": "An object representing a date+time based filter.",
                        "type": "object",
                        "properties": {
                            "datetime": {
                                "$ref": "#/components/schemas/datetime_interval"
                            }
                        }
                    },
                    "datetime_interval": {
                        "type": "string",
                        "description": "Either a date-time or an interval, open or closed. Date and time expressions\nadhere to RFC 3339. Open intervals are expressed using double-dots.\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
                        "example": "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
                    },
                    "downloadBody": {
                        "allOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "disclaimer": {
                                        "type": "string",
                                        "default": "/!\\ This is a work in progress /!\\"
                                    }
                                }
                            },
                            {
                                "$ref": "#/components/schemas/collectionsFilter"
                            }
                        ]
                    },
                    "envelopeLiteral": {
                        "type": "object",
                        "required": [
                            "bbox"
                        ],
                        "properties": {
                            "bbox": {
                                "$ref": "#/components/schemas/bbox"
                            }
                        }
                    },
                    "exception": {
                        "type": "object",
                        "description": "Information about the exception: an error code plus an optional description.",
                        "required": [
                            "code"
                        ],
                        "properties": {
                            "code": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            }
                        }
                    },
                    "FilterLang": {
                        "title": "FilterLang",
                        "description": "Choices for filter-lang value in a POST request.\n\nBased on https://github.com/radiantearth/stac-api-spec/tree/master/fragments/filter#queryables\n\nNote the addition of cql2-json, which is used by the pgstac backend,\nbut is not included in the spec above.",
                        "enum": [
                            "cql-json",
                            "cql2-json",
                            "cql2-text"
                        ],
                        "type": "string"
                    },
                    "featureCollectionGeoJSON": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/schemas-featureCollectionGeoJSON"
                            },
                            {
                                "type": "object",
                                "required": [
                                    "features"
                                ],
                                "properties": {
                                    "features": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/item"
                                        }
                                    },
                                    "links": {
                                        "$ref": "#/components/schemas/links"
                                    },
                                    "timeStamp": {
                                        "$ref": "#/components/schemas/timeStamp"
                                    },
                                    "numberMatched": {
                                        "$ref": "#/components/schemas/numberMatched"
                                    },
                                    "numberReturned": {
                                        "$ref": "#/components/schemas/numberReturned"
                                    }
                                }
                            }
                        ]
                    },
                    "featureGeoJSON": {
                        "type": "object",
                        "required": [
                            "type",
                            "geometry",
                            "properties"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "Feature"
                                ]
                            },
                            "geometry": {
                                "$ref": "#/components/schemas/geometryGeoJSON"
                            },
                            "properties": {
                                "type": "object",
                                "nullable": true
                            }
                        }
                    },
                    "fields": {
                        "description": "The include and exclude members specify an array of\nproperty names that are either included or excluded\nfrom the result, respectively. If both include and\nexclude are specified, include takes precedence.\nValues should include the full JSON path of the property.\n",
                        "type": "object",
                        "properties": {
                            "include": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "exclude": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "example": {
                            "include": [
                                "id",
                                "properties.eo:cloud_cover"
                            ],
                            "exclude": [
                                "geometry",
                                "properties.datetime"
                            ]
                        }
                    },
                    "filter-cql2-json": {
                        "$ref": "#/components/schemas/booleanExpression"
                    },
                    "filter-cql2-text": {
                        "description": "A CQL2 filter expression in the 'cql2-text' encoding.\n",
                        "type": "string"
                    },
                    "filter-crs": {
                        "description": "The coordinate reference system (CRS) used by spatial literals in the 'filter' value.  The only value that STAC APIs must\naccept is 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'.\n",
                        "type": "string",
                        "format": "uri"
                    },
                    "filter-lang": {
                        "description": "The CQL2 filter encoding that the 'filter' value uses.\n",
                        "type": "string",
                        "enum": [
                            "cql2-text",
                            "cql2-json"
                        ]
                    },
                    "function": {
                        "oneOf": [
                            {
                                "type": "object",
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "args": {
                                        "type": "array",
                                        "items": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/components/schemas/scalarLiteral"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/spatialLiteral"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/intervalLiteral"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/propertyRef"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/functionRef"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/arithmeticExpression"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/arrayLiteral"
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            {
                                "type": "object",
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "enum": [
                                            "casei",
                                            "accenti"
                                        ]
                                    },
                                    "args": {
                                        "type": "array",
                                        "items": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/propertyRef"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/functionRef"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "functionRef": {
                        "type": "object",
                        "required": [
                            "function"
                        ],
                        "properties": {
                            "function": {
                                "$ref": "#/components/schemas/function"
                            }
                        }
                    },
                    "geometrycollectionGeoJSON": {
                        "type": "object",
                        "required": [
                            "type",
                            "geometries"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "GeometryCollection"
                                ]
                            },
                            "geometries": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/geometryGeoJSON"
                                }
                            }
                        }
                    },
                    "geometryGeoJSON": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/pointGeoJSON"
                            },
                            {
                                "$ref": "#/components/schemas/multipointGeoJSON"
                            },
                            {
                                "$ref": "#/components/schemas/linestringGeoJSON"
                            },
                            {
                                "$ref": "#/components/schemas/multilinestringGeoJSON"
                            },
                            {
                                "$ref": "#/components/schemas/polygonGeoJSON"
                            },
                            {
                                "$ref": "#/components/schemas/multipolygonGeoJSON"
                            },
                            {
                                "$ref": "#/components/schemas/geometrycollectionGeoJSON"
                            }
                        ]
                    },
                    "geometryLiteral": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/point"
                            },
                            {
                                "$ref": "#/components/schemas/linestring"
                            },
                            {
                                "$ref": "#/components/schemas/polygon"
                            },
                            {
                                "$ref": "#/components/schemas/multipoint"
                            },
                            {
                                "$ref": "#/components/schemas/multilinestring"
                            },
                            {
                                "$ref": "#/components/schemas/multipolygon"
                            }
                        ]
                    },
                    "geomExpression": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/spatialLiteral"
                            },
                            {
                                "$ref": "#/components/schemas/propertyRef"
                            },
                            {
                                "$ref": "#/components/schemas/functionRef"
                            }
                        ]
                    },
                    "ids": {
                        "type": "array",
                        "description": "Array of Item ids to return.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "idsFilter": {
                        "type": "object",
                        "description": "Only returns items that match the array of given ids",
                        "properties": {
                            "ids": {
                                "$ref": "#/components/schemas/ids"
                            }
                        }
                    },
                    "instantLiteral": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/dateLiteral"
                            },
                            {
                                "$ref": "#/components/schemas/timestampLiteral"
                            }
                        ]
                    },
                    "instantString": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/dateString"
                            },
                            {
                                "$ref": "#/components/schemas/timestampString"
                            }
                        ]
                    },
                    "intersectsFilter": {
                        "type": "object",
                        "description": "Only returns items that intersect with the provided polygon.",
                        "properties": {
                            "intersects": {
                                "$ref": "#/components/schemas/geometryGeoJSON"
                            }
                        }
                    },
                    "intervalArray": {
                        "type": "array",
                        "minItems": 2,
                        "maxItems": 2,
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/instantString"
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        ".."
                                    ]
                                },
                                {
                                    "$ref": "#/components/schemas/propertyRef"
                                },
                                {
                                    "$ref": "#/components/schemas/functionRef"
                                }
                            ]
                        }
                    },
                    "intervalLiteral": {
                        "type": "object",
                        "required": [
                            "interval"
                        ],
                        "properties": {
                            "interval": {
                                "$ref": "#/components/schemas/intervalArray"
                            }
                        }
                    },
                    "isBetweenOperands": {
                        "type": "array",
                        "minItems": 3,
                        "maxItems": 3,
                        "items": {
                            "$ref": "#/components/schemas/numericExpression"
                        }
                    },
                    "isBetweenPredicate": {
                        "type": "object",
                        "required": [
                            "op",
                            "args"
                        ],
                        "properties": {
                            "op": {
                                "type": "string",
                                "enum": [
                                    "between"
                                ]
                            },
                            "args": {
                                "$ref": "#/components/schemas/isBetweenOperands"
                            }
                        }
                    },
                    "inListOperands": {
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/scalarExpression"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/scalarExpression"
                                    }
                                }
                            ]
                        }
                    },
                    "isInListPredicate": {
                        "type": "object",
                        "required": [
                            "op",
                            "args"
                        ],
                        "properties": {
                            "op": {
                                "type": "string",
                                "enum": [
                                    "in"
                                ]
                            },
                            "args": {
                                "$ref": "#/components/schemas/inListOperands"
                            }
                        }
                    },
                    "isLikeOperands": {
                        "type": "array",
                        "minItems": 2,
                        "maxItems": 2,
                        "items": {
                            "$ref": "#/components/schemas/characterExpression"
                        }
                    },
                    "isLikePredicate": {
                        "type": "object",
                        "required": [
                            "op",
                            "args"
                        ],
                        "properties": {
                            "op": {
                                "type": "string",
                                "enum": [
                                    "like"
                                ]
                            },
                            "args": {
                                "$ref": "#/components/schemas/isLikeOperands"
                            }
                        }
                    },
                    "isNullPredicate": {
                        "type": "object",
                        "required": [
                            "op",
                            "args"
                        ],
                        "properties": {
                            "op": {
                                "type": "string",
                                "enum": [
                                    "isNull"
                                ]
                            },
                            "args": {
                                "$ref": "#/components/schemas/scalarExpression"
                            }
                        }
                    },
                    "item": {
                        "description": "A GeoJSON Feature augmented with foreign members that contain values relevant to a STAC entity",
                        "type": "object",
                        "required": [
                            "stac_version",
                            "id",
                            "type",
                            "geometry",
                            "bbox",
                            "links",
                            "properties",
                            "assets"
                        ],
                        "properties": {
                            "stac_version": {
                                "$ref": "#/components/schemas/stac_version"
                            },
                            "stac_extensions": {
                                "$ref": "#/components/schemas/stac_extensions"
                            },
                            "id": {
                                "$ref": "#/components/schemas/itemId"
                            },
                            "bbox": {
                                "$ref": "#/components/schemas/bbox"
                            },
                            "geometry": {
                                "$ref": "#/components/schemas/geometryGeoJSON"
                            },
                            "type": {
                                "$ref": "#/components/schemas/itemType"
                            },
                            "links": {
                                "$ref": "#/components/schemas/links"
                            },
                            "properties": {
                                "$ref": "#/components/schemas/properties"
                            },
                            "assets": {
                                "$ref": "#/components/schemas/assets"
                            }
                        },
                        "example": {
                            "stac_version": "1.0.0",
                            "stac_extensions": [
                                "https://stac-extensions.github.io/eo/v1.0.0/schema.json",
                                "https://stac-extensions.github.io/view/v1.0.0/schema.json",
                                "https://example.com/cs-extension/1.0/schema.json"
                            ],
                            "type": "Feature",
                            "id": "CS3-20160503_132131_05",
                            "bbox": [
                                -122.59750209,
                                37.48803556,
                                -122.2880486,
                                37.613537207
                            ],
                            "geometry": {
                                "type": "Polygon",
                                "coordinates": [
                                    [
                                        [
                                            -122.308150179,
                                            37.488035566
                                        ],
                                        [
                                            -122.597502109,
                                            37.538869539
                                        ],
                                        [
                                            -122.576687533,
                                            37.613537207
                                        ],
                                        [
                                            -122.2880486,
                                            37.562818007
                                        ],
                                        [
                                            -122.308150179,
                                            37.488035566
                                        ]
                                    ]
                                ]
                            },
                            "properties": {
                                "datetime": "2016-05-03T13:22:30.040Z",
                                "title": "A CS3 item",
                                "license": "PDDL-1.0",
                                "providers": [
                                    {
                                        "name": "CoolSat",
                                        "roles": [
                                            "producer",
                                            "licensor"
                                        ],
                                        "url": "https://cool-sat.com/"
                                    }
                                ],
                                "view:sun_azimuth": 168.7,
                                "eo:cloud_cover": 0.12,
                                "view:off_nadir": 1.4,
                                "platform": "coolsat2",
                                "instruments": [
                                    "cool_sensor_v1"
                                ],
                                "eo:bands": [],
                                "view:sun_elevation": 33.4,
                                "eo:gsd": 0.512
                            },
                            "collection": "CS3",
                            "links": [
                                {
                                    "rel": "self",
                                    "href": "http://dedl-hda.local/stac/collections/CS3/items/20160503_132130_04"
                                },
                                {
                                    "rel": "root",
                                    "href": "http://dedl-hda.local"
                                },
                                {
                                    "rel": "parent",
                                    "href": "http://dedl-hda.local/stac/collections/CS3"
                                },
                                {
                                    "rel": "collection",
                                    "href": "http://dedl-hda.local/stac/collections/CS3"
                                }
                            ],
                            "assets": {
                                "analytic": {
                                    "href": "http://dedl-hda.local/static-catalog/CS3/20160503_132130_04/analytic.tif",
                                    "title": "4-Band Analytic"
                                },
                                "thumbnail": {
                                    "href": "http://dedl-hda.local/static-catalog/collections/CS3/20160503_132130_04/thumbnail.png",
                                    "title": "Thumbnail"
                                }
                            }
                        }
                    },
                    "itemCollection": {
                        "description": "A GeoJSON FeatureCollection augmented with foreign members that contain values relevant to a STAC entity",
                        "type": "object",
                        "required": [
                            "features",
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "FeatureCollection"
                                ]
                            },
                            "features": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/item"
                                }
                            },
                            "links": {
                                "type": "array",
                                "description": "An array of links. Can be used for pagination, e.g. by providing a link with the `next` relation type.",
                                "items": {
                                    "$ref": "#/components/schemas/link"
                                },
                                "example": [
                                    {
                                        "rel": "next",
                                        "href": "http://api.cool-sat.com/search?next=ANsXtp9mrqN0yrKWhf-y2PUpHRLQb1GT-mtxNcXou8TwkXhi1Jbk"
                                    }
                                ]
                            }
                        }
                    },
                    "itemId": {
                        "type": "string",
                        "description": "Provider identifier, a unique ID."
                    },
                    "itemType": {
                        "type": "string",
                        "description": "The GeoJSON type",
                        "const": "Feature"
                    },
                    "landingPage": {
                        "type": "object",
                        "required": [
                            "title",
                            "description",
                            "links"
                        ],
                        "properties": {
                            "title": {
                                "type": "string",
                                "const": "Destination Earth Data Lake API"
                            },
                            "description": {
                                "type": "string",
                                "const": "The Destination Earth Data Lake API provides access to a STAC catalogue with download capabilities. In addition the API advertises a list of services to Destination Earth Data Lake users."
                            },
                            "links": {
                                "$ref": "#/components/schemas/links"
                            }
                        }
                    },
                    "license": {
                        "type": "string",
                        "description": "License(s) of the data as a SPDX\n[License identifier](https://spdx.org/licenses/). Alternatively, use\n`proprietary` if the license is not on the SPDX license list or\n`various` if multiple licenses apply. In these two cases links to the\nlicense texts SHOULD be added, see the `license` link relation type.\n\nNon-SPDX licenses SHOULD add a link to the license text with the\n`license` relation in the links section. The license text MUST NOT be\nprovided as a value of this field. If there is no public license URL\navailable, it is RECOMMENDED to host the license text and\nlink to it.",
                        "example": "Apache-2.0"
                    },
                    "limit": {
                        "type": "integer",
                        "minimum": 1,
                        "example": 100,
                        "default": 100,
                        "maximum": 10000,
                        "description": "The optional limit parameter limits the number of items that are presented in the response document.\n\nIf the limit parameter value is greater than advertised limit maximum, the server must return the\nmaximum possible number of items, rather than responding with an error.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items must not be counted.\n\nMinimum = 1. Maximum = 10000. Default = 100."
                    },
                    "limitFilter": {
                        "type": "object",
                        "description": "Only returns maximum number of results (page size)",
                        "properties": {
                            "limit": {
                                "$ref": "#/components/schemas/limit"
                            }
                        }
                    },
                    "linestring": {
                        "title": "GeoJSON LineString",
                        "type": "object",
                        "required": [
                            "type",
                            "coordinates"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "LineString"
                                ]
                            },
                            "coordinates": {
                                "type": "array",
                                "minItems": 2,
                                "items": {
                                    "type": "array",
                                    "minItems": 2,
                                    "items": {
                                        "type": "number"
                                    }
                                }
                            },
                            "bbox": {
                                "type": "array",
                                "minItems": 4,
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    },
                    "linestringGeoJSON": {
                        "type": "object",
                        "required": [
                            "type",
                            "coordinates"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "LineString"
                                ]
                            },
                            "coordinates": {
                                "type": "array",
                                "minItems": 2,
                                "items": {
                                    "type": "array",
                                    "minItems": 2,
                                    "items": {
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    },
                    "link": {
                        "title": "link",
                        "type": "object",
                        "properties": {
                            "href": {
                                "type": "string",
                                "description": "The location of a resource."
                            },
                            "rel": {
                                "type": "string",
                                "description": "Relation type of the link"
                            },
                            "type": {
                                "type": "string",
                                "description": "The media type of the resource"
                            },
                            "title": {
                                "type": "string",
                                "description": "Title of the resource"
                            },
                            "method": {
                                "type": "string",
                                "enum": [
                                    "GET",
                                    "POST"
                                ],
                                "default": "GET",
                                "description": "Specify the HTTP method that the resource expects."
                            },
                            "headers": {
                                "type": "object",
                                "description": "Object key values pairs they maps to header.",
                                "example": {
                                    "Accept": "application/json"
                                }
                            },
                            "body": {
                                "type": "object",
                                "description": "For POST requests, the resource can specify the HTTP body as a JSON object."
                            },
                            "merge": {
                                "type": "boolean",
                                "default": false,
                                "description": "This is only valid when the server is responding to POST request.\n\nIf merge is true, the client is expected to merge the body value into the current request body before following the link. This avoids passing large post bodies back and forth when following links, particularly for navigating pages through the POST /search endpoint.\n\nNOTE: To support form encoding it is expected that a client be able to merge in the key value pairs specified as JSON `{\"next\": \"token\"}` will become `&next=token`."
                            }
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/link"
                        }
                    },
                    "logicalExpression": {
                        "type": "object",
                        "required": [
                            "op",
                            "args"
                        ],
                        "properties": {
                            "op": {
                                "type": "string",
                                "enum": [
                                    "and",
                                    "or"
                                ]
                            },
                            "args": {
                                "type": "array",
                                "minItems": 2,
                                "items": {
                                    "$ref": "#/components/schemas/booleanValueExpression"
                                }
                            }
                        }
                    },
                    "multilinestring": {
                        "title": "GeoJSON MultiLineString",
                        "type": "object",
                        "required": [
                            "type",
                            "coordinates"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "MultiLineString"
                                ]
                            },
                            "coordinates": {
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "minItems": 2,
                                    "items": {
                                        "type": "array",
                                        "minItems": 2,
                                        "items": {
                                            "type": "number"
                                        }
                                    }
                                }
                            },
                            "bbox": {
                                "type": "array",
                                "minItems": 4,
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    },
                    "multilinestringGeoJSON": {
                        "type": "object",
                        "required": [
                            "type",
                            "coordinates"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "MultiLineString"
                                ]
                            },
                            "coordinates": {
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "minItems": 2,
                                    "items": {
                                        "type": "array",
                                        "minItems": 2,
                                        "items": {
                                            "type": "number"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "multipoint": {
                        "title": "GeoJSON MultiPoint",
                        "type": "object",
                        "required": [
                            "type",
                            "coordinates"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "MultiPoint"
                                ]
                            },
                            "coordinates": {
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "minItems": 2,
                                    "items": {
                                        "type": "number"
                                    }
                                }
                            },
                            "bbox": {
                                "type": "array",
                                "minItems": 4,
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    },
                    "multipointGeoJSON": {
                        "type": "object",
                        "required": [
                            "type",
                            "coordinates"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "MultiPoint"
                                ]
                            },
                            "coordinates": {
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "minItems": 2,
                                    "items": {
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    },
                    "multipolygon": {
                        "title": "GeoJSON MultiPolygon",
                        "type": "object",
                        "required": [
                            "type",
                            "coordinates"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "MultiPolygon"
                                ]
                            },
                            "coordinates": {
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "items": {
                                        "type": "array",
                                        "minItems": 4,
                                        "items": {
                                            "type": "array",
                                            "minItems": 2,
                                            "items": {
                                                "type": "number"
                                            }
                                        }
                                    }
                                }
                            },
                            "bbox": {
                                "type": "array",
                                "minItems": 4,
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    },
                    "multipolygonGeoJSON": {
                        "type": "object",
                        "required": [
                            "type",
                            "coordinates"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "MultiPolygon"
                                ]
                            },
                            "coordinates": {
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "items": {
                                        "type": "array",
                                        "minItems": 4,
                                        "items": {
                                            "type": "array",
                                            "minItems": 2,
                                            "items": {
                                                "type": "number"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "notExpression": {
                        "type": "object",
                        "required": [
                            "op",
                            "args"
                        ],
                        "properties": {
                            "op": {
                                "type": "string",
                                "enum": [
                                    "not"
                                ]
                            },
                            "args": {
                                "type": "array",
                                "minItems": 1,
                                "maxItems": 1,
                                "items": {
                                    "$ref": "#/components/schemas/booleanValueExpression"
                                }
                            }
                        }
                    },
                    "numberMatched": {
                        "description": "The number of features of the feature type that match the selection\nparameters like `bbox`.",
                        "type": "integer",
                        "minimum": 0,
                        "example": 127
                    },
                    "numberReturned": {
                        "description": "The number of features in the feature collection.\n\nA server may omit this information in a response, if the information\nabout the number of features is not known or difficult to compute.\n\nIf the value is provided, the value must be identical to the number\nof items in the \"features\" array.",
                        "type": "integer",
                        "minimum": 0,
                        "example": 100
                    },
                    "numericExpression": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "$ref": "#/components/schemas/propertyRef"
                            },
                            {
                                "$ref": "#/components/schemas/functionRef"
                            },
                            {
                                "$ref": "#/components/schemas/arithmeticExpression"
                            }
                        ]
                    },
                    "openapi_components-schemas-searchBody": {
                        "type": "object",
                        "x-stac-api-fragment": "sort",
                        "description": "**Extension:** Sort\n\nSort the results.",
                        "properties": {
                            "sortby": {
                                "$ref": "#/components/schemas/sortby"
                            }
                        }
                    },
                    "point": {
                        "title": "GeoJSON Point",
                        "type": "object",
                        "required": [
                            "type",
                            "coordinates"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "Point"
                                ]
                            },
                            "coordinates": {
                                "type": "array",
                                "minItems": 2,
                                "items": {
                                    "type": "number"
                                }
                            },
                            "bbox": {
                                "type": "array",
                                "minItems": 4,
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    },
                    "pointGeoJSON": {
                        "type": "object",
                        "required": [
                            "type",
                            "coordinates"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "Point"
                                ]
                            },
                            "coordinates": {
                                "type": "array",
                                "minItems": 2,
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    },
                    "polygon": {
                        "title": "GeoJSON Polygon",
                        "type": "object",
                        "required": [
                            "type",
                            "coordinates"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "Polygon"
                                ]
                            },
                            "coordinates": {
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "minItems": 4,
                                    "items": {
                                        "type": "array",
                                        "minItems": 2,
                                        "items": {
                                            "type": "number"
                                        }
                                    }
                                }
                            },
                            "bbox": {
                                "type": "array",
                                "minItems": 4,
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    },
                    "polygonGeoJSON": {
                        "type": "object",
                        "required": [
                            "type",
                            "coordinates"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "Polygon"
                                ]
                            },
                            "coordinates": {
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "minItems": 4,
                                    "items": {
                                        "type": "array",
                                        "minItems": 2,
                                        "items": {
                                            "type": "number"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "properties": {
                        "type": "object",
                        "required": [
                            "datetime"
                        ],
                        "description": "provides the core metadata fields plus extensions"
                    },
                    "propertyRef": {
                        "type": "object",
                        "required": [
                            "property"
                        ],
                        "properties": {
                            "property": {
                                "type": "string"
                            }
                        }
                    },
                    "providers": {
                        "type": "array",
                        "description": "A list of providers, which may include all organizations capturing or processing the data or the hosting provider. Providers should be listed in chronological order with the most recent provider being the last element of the list.",
                        "items": {
                            "type": "object",
                            "title": "Provider",
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "name": {
                                    "description": "The name of the organization or the individual.",
                                    "type": "string"
                                },
                                "description": {
                                    "description": "Multi-line description to add further provider information such as processing details for processors and producers, hosting details for hosts or basic contact information.\n\n[CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.",
                                    "type": "string"
                                },
                                "roles": {
                                    "description": "Roles of the provider.\n\nThe provider's role(s) can be one or more of the following\nelements:\n\n* licensor: The organization that is licensing the dataset under\n  the license specified in the collection's license field.\n* producer: The producer of the data is the provider that\n  initially captured and processed the source data, e.g. ESA for\n  Sentinel-2 data.\n* processor: A processor is any provider who processed data to a\n  derived product.\n* host: The host is the actual provider offering the data on their\n  storage. There should be no more than one host, specified as last\n  element of the list.",
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "producer",
                                            "licensor",
                                            "processor",
                                            "host"
                                        ]
                                    }
                                },
                                "url": {
                                    "description": "Homepage on which the provider describes the dataset and publishes contact information.",
                                    "type": "string",
                                    "format": "url"
                                }
                            }
                        }
                    },
                    "providersArray": {
                        "type": "array",
                        "description": "Array of providers to filter on.\nOnly objects in one of the provided providers will be returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "providersFilter": {
                        "type": "object",
                        "description": "Get collections from specific providers",
                        "properties": {
                            "providers": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "scalarExpression": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/scalarLiteral"
                            },
                            {
                                "$ref": "#/components/schemas/propertyRef"
                            },
                            {
                                "$ref": "#/components/schemas/functionRef"
                            },
                            {
                                "$ref": "#/components/schemas/arithmeticExpression"
                            }
                        ]
                    },
                    "scalarLiteral": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "number"
                            },
                            {
                                "type": "boolean"
                            },
                            {
                                "$ref": "#/components/schemas/instantLiteral"
                            }
                        ]
                    },
                    "scalarOperands": {
                        "type": "array",
                        "minItems": 2,
                        "maxItems": 2,
                        "items": {
                            "$ref": "#/components/schemas/scalarExpression"
                        }
                    },
                    "schemas-bbox": {
                        "description": "Only features that have a geometry that intersects the bounding box are\nselected. The bounding box is provided as four or six numbers,\ndepending on whether the coordinate reference system includes a\nvertical axis (elevation or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2  \n* Lower left corner, coordinate axis 3 (optional) \n* Upper right corner, coordinate axis 1 \n* Upper right corner, coordinate axis 2 \n* Upper right corner, coordinate axis 3 (optional)\n\nThe coordinate reference system of the values is WGS84\nlongitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).\n\nFor WGS84 longitude/latitude the values are in most cases the sequence\nof minimum longitude, minimum latitude, maximum longitude and maximum\nlatitude. However, in cases where the box spans the antimeridian the\nfirst value (west-most box edge) is larger than the third value\n(east-most box edge).\n\nIf a feature has multiple spatial geometry properties, it is the\ndecision of the server whether only a single spatial geometry property\nis used to determine the extent or all relevant geometries.\n\nExample: The bounding box of the New Zealand Exclusive Economic Zone in\nWGS 84 (from 160.6\u00b0E to 170\u00b0W and from 55.95\u00b0S to 25.89\u00b0S) would be\nrepresented in JSON as `[160.6, -55.95, -170, -25.89]` and in a query as\n`bbox=160.6,-55.95,-170,-25.89`.",
                        "type": "array",
                        "minItems": 4,
                        "maxItems": 6,
                        "items": {
                            "type": "number"
                        },
                        "example": [
                            -110,
                            39.5,
                            -105,
                            40.5
                        ]
                    },
                    "schemas-featureCollectionGeoJSON": {
                        "type": "object",
                        "required": [
                            "type",
                            "features"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "FeatureCollection"
                                ]
                            },
                            "features": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/featureGeoJSON"
                                }
                            }
                        }
                    },
                    "schemas-searchBody": {
                        "type": "object",
                        "x-stac-api-fragment": "fields",
                        "description": "**Extension:** Fields\n\nDetermines the shape of the features in the response",
                        "properties": {
                            "fields": {
                                "$ref": "#/components/schemas/fields"
                            }
                        }
                    },
                    "schemas-itemCollection": {
                        "type": "object",
                        "description": "**Extension:** Context\n\nAugments lists of resources with the number of returned and matches resource and the given limit for the request.",
                        "x-stac-api-fragment": "context",
                        "properties": {
                            "context": {
                                "type": "object",
                                "required": [
                                    "returned"
                                ],
                                "properties": {
                                    "returned": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "example": 1
                                    },
                                    "limit": {
                                        "type": "integer",
                                        "nullable": true,
                                        "minimum": 0,
                                        "example": 5
                                    },
                                    "matched": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "example": 314159
                                    }
                                }
                            }
                        }
                    },
                    "searchBody": {
                        "description": "The search criteria",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/bboxFilter"
                            },
                            {
                                "$ref": "#/components/schemas/datetimeFilter"
                            },
                            {
                                "$ref": "#/components/schemas/intersectsFilter"
                            },
                            {
                                "$ref": "#/components/schemas/collectionsFilter"
                            },
                            {
                                "$ref": "#/components/schemas/limitFilter"
                            }
                        ]
                    },
                    "service": {
                        "title": "Service",
                        "description": "Service.",
                        "type": "object",
                        "required": [
                            "id",
                            "type",
                            "description",
                            "license",
                            "assets",
                            "links"
                        ],
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "A unique Id"
                            },
                            "type": {
                                "type": "string",
                                "const": "Service"
                            },
                            "keywords": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "List of tags describing the service."
                            },
                            "description": {
                                "type": "string"
                            },
                            "license": {
                                "$ref": "#/components/schemas/license"
                            },
                            "assets": {
                                "$ref": "#/components/schemas/assets"
                            },
                            "links": {
                                "$ref": "#/components/schemas/links",
                                "prefixItems": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "rel": {
                                                "type": "string",
                                                "const": "parent"
                                            },
                                            "type": {
                                                "type": "string",
                                                "const": "application/json"
                                            },
                                            "href": {
                                                "type": "string",
                                                "format": "uri"
                                            }
                                        },
                                        "description": "The parent endpoint in the API."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "rel": {
                                                "type": "string",
                                                "const": "root"
                                            },
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "application/json"
                                                ]
                                            },
                                            "href": {
                                                "type": "string",
                                                "format": "uri"
                                            }
                                        },
                                        "description": "The root endpoint of the API."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "rel": {
                                                "type": "string",
                                                "enum": [
                                                    "self"
                                                ]
                                            },
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "application/json"
                                                ]
                                            },
                                            "href": {
                                                "type": "string",
                                                "format": "uri"
                                            }
                                        },
                                        "description": "Endpoint to access this service in the API."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "rel": {
                                                "type": "string",
                                                "const": "license"
                                            },
                                            "href": {
                                                "type": "string",
                                                "format": "uri"
                                            }
                                        },
                                        "description": "Endpoint to access the license of the collection."
                                    }
                                ]
                            }
                        },
                        "example": {
                            "type": "Service",
                            "id": "dedl_islet",
                            "description": "DEDL service part of the Big Data Processing offerings,  providing cloud resources (network, compute, storage)  and deployment blueprints for users who wish/need to be  in control of the infrastructure on top of which their  own applications are running.",
                            "license": "proprietary",
                            "assets": {
                                "thumbnail": {
                                    "href": "http://dedl-hda.local/static-catalog/services/dedl_islet/thumbnail.png",
                                    "title": "Thumbnail"
                                },
                                "connect": {
                                    "href": "http://dedl-hda.local/services/dedl_islet/connect"
                                }
                            },
                            "links": [
                                {
                                    "rel": "self",
                                    "href": "http://dedl-hda.local/services/dedl_islet"
                                },
                                {
                                    "rel": "parent",
                                    "href": "http://dedl-hda.local/services"
                                },
                                {
                                    "rel": "root",
                                    "href": "http://dedl-hda.local"
                                },
                                {
                                    "rel": "license",
                                    "href": "TBD",
                                    "title": "Legal notice"
                                }
                            ]
                        }
                    },
                    "services": {
                        "type": "object",
                        "properties": {
                            "collections": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/service"
                                }
                            },
                            "links": {
                                "$ref": "#/components/schemas/links"
                            }
                        },
                        "required": [
                            "collections",
                            "links"
                        ]
                    },
                    "sortby": {
                        "type": "array",
                        "description": "An array of objects containing a property name and sort direction.\n",
                        "minItems": 1,
                        "items": {
                            "type": "object",
                            "required": [
                                "field",
                                "direction"
                            ],
                            "properties": {
                                "field": {
                                    "type": "string"
                                },
                                "direction": {
                                    "type": "string",
                                    "default": "asc",
                                    "enum": [
                                        "asc",
                                        "desc"
                                    ]
                                }
                            }
                        },
                        "example": [
                            {
                                "field": "properties.eo:cloud_cover",
                                "direction": "asc"
                            },
                            {
                                "field": "id",
                                "direction": "desc"
                            }
                        ]
                    },
                    "spatialLiteral": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/geometryLiteral"
                            },
                            {
                                "$ref": "#/components/schemas/envelopeLiteral"
                            }
                        ]
                    },
                    "spatialOperands": {
                        "type": "array",
                        "minItems": 2,
                        "maxItems": 2,
                        "items": {
                            "$ref": "#/components/schemas/geomExpression"
                        }
                    },
                    "spatialPredicate": {
                        "type": "object",
                        "required": [
                            "op",
                            "args"
                        ],
                        "properties": {
                            "op": {
                                "type": "string",
                                "enum": [
                                    "s_contains",
                                    "s_crosses",
                                    "s_disjoint",
                                    "s_equals",
                                    "s_intersects",
                                    "s_overlaps",
                                    "s_touches",
                                    "s_within"
                                ]
                            },
                            "args": {
                                "$ref": "#/components/schemas/spatialOperands"
                            }
                        }
                    },
                    "stacPage": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/catalog"
                            },
                            {
                                "$ref": "#/components/schemas/conformanceClasses"
                            }
                        ]
                    },
                    "stac_extensions": {
                        "title": "STAC extensions",
                        "type": "array",
                        "uniqueItems": true,
                        "items": {
                            "anyOf": [
                                {
                                    "title": "Reference to a JSON Schema",
                                    "type": "string",
                                    "format": "uri"
                                },
                                {
                                    "title": "Reference to a core extension",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "stac_version": {
                        "title": "STAC version",
                        "type": "string",
                        "example": "1.0.0"
                    },
                    "temporalExpression": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/temporalLiteral"
                            },
                            {
                                "$ref": "#/components/schemas/propertyRef"
                            },
                            {
                                "$ref": "#/components/schemas/functionRef"
                            }
                        ]
                    },
                    "temporalLiteral": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/instantLiteral"
                            },
                            {
                                "$ref": "#/components/schemas/intervalLiteral"
                            }
                        ]
                    },
                    "temporalOperands": {
                        "type": "array",
                        "minItems": 2,
                        "maxItems": 2,
                        "items": {
                            "$ref": "#/components/schemas/temporalExpression"
                        }
                    },
                    "temporalPredicate": {
                        "type": "object",
                        "required": [
                            "op",
                            "args"
                        ],
                        "properties": {
                            "op": {
                                "type": "string",
                                "enum": [
                                    "t_after",
                                    "t_before",
                                    "t_contains",
                                    "t_disjoint",
                                    "t_during",
                                    "t_equals",
                                    "t_finishedBy",
                                    "t_finishes",
                                    "t_intersects",
                                    "t_meets",
                                    "t_metBy",
                                    "t_overlappedBy",
                                    "t_overlaps",
                                    "t_startedBy",
                                    "t_starts"
                                ]
                            },
                            "args": {
                                "$ref": "#/components/schemas/temporalOperands"
                            }
                        }
                    },
                    "timeStamp": {
                        "description": "This property indicates the time and date when the response was generated.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2017-08-17T08:05:32Z"
                    },
                    "timestampLiteral": {
                        "type": "object",
                        "required": [
                            "timestamp"
                        ],
                        "properties": {
                            "timestamp": {
                                "$ref": "#/components/schemas/timestampString"
                            }
                        }
                    },
                    "timestampString": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tokenFilter": {
                        "type": "object",
                        "description": "Only return elements allowed for user",
                        "properties": {
                            "token": {
                                "type": "string"
                            }
                        }
                    }
                },
                "securitySchemes": {
                    "OpenIdConnect": {
                        "openIdConnectUrl": "https://dedl-hda.local/.well-known/openid-configuration",
                        "type": "openIdConnect",
                        "description": "OpenID Connect (OIDC) is an identity layer built on top of the OAuth 2.0 protocol."
                    }
                },
                "headers": {},
                "responses": {
                    "Collection": {
                        "description": "Information about the feature collection with id `collectionId`.\n\nThe response contains a link to the items in the collection\n(path `/collections/{collectionId}/items`, link relation `items`)\nas well as key information about the collection. This information\nincludes:\n\n* A local identifier for the collection that is unique for the dataset;\n* A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);\n* An optional title and description for the collection;\n* An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n* An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/collection"
                                }
                            }
                        },
                        "links": {
                            "self": {
                                "operationId": "getCollection",
                                "description": "A link with rel=self"
                            },
                            "parent": {
                                "operationId": "getCollections",
                                "description": "A link with rel=parent"
                            },
                            "root": {
                                "operationId": "get",
                                "description": "A link with rel=root"
                            },
                            "items": {
                                "operationId": "getFeatures",
                                "description": "A link with rel=items"
                            },
                            "queryables": {
                                "operationId": "getQueryables",
                                "description": "A link with rel=queryables for queryables to only apply to this collection."
                            }
                        }
                    },
                    "Collections": {
                        "description": "The feature collections shared by this API.\n\nThe dataset is organized as one or more feature collections. This resource provides information about and access to the collections.\n\nThe response contains the list of collections. For each collection, a link to the items in the collection (path `/stac/collections/{collectionId}/items`, link relation `items`) as well as key information about the collection. This information includes:\n\n- A local identifier for the collection that is unique for the dataset;\n- A list of coordinate reference system (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);\n- An optional title and description for the collection;\n- An optional extend that can be used to provide an indication of the spatial and temporal extend of the collection - typycally derived from the data;\n- An optional indicator about the type of items in the collection (the default value, if the indicator is not provided, is 'feature').",
                        "links": {
                            "self": {
                                "operationId": "getCollections",
                                "description": "A link with rel=self"
                            },
                            "parent": {
                                "operationId": "getStac",
                                "description": "A link with rel=stac"
                            },
                            "root": {
                                "operationId": "get",
                                "description": "A link with rel=root"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/collections"
                                }
                            }
                        }
                    },
                    "ConformanceDeclaration": {
                        "description": "The URIs of all conformance classes supported by the server.\n\nTo support \"generic\" clients that want to access multiple\nOGC API Features implementations - and not \"just\" a specific\nAPI / server, the server declares the conformance\nclasses it implements and conforms to.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/conformanceClasses"
                                },
                                "example": {
                                    "conformsTo": [
                                        "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core",
                                        "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30",
                                        "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson"
                                    ]
                                }
                            }
                        }
                    },
                    "Error": {
                        "description": "An error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/exception"
                                }
                            }
                        }
                    },
                    "Features": {
                        "description": "The response is a document consisting of features in the collection.\nThe features included in the response are determined by the server\nbased on the query parameters of the request. To support access to\nlarger collections without overloading the client, the API supports\npaged access with links to the next page, if more features are selected\nthat the page size.\n\nThe `bbox` and `datetime` parameter can be used to select only a\nsubset of the features in the collection (the features that are in the\nbounding box or time interval). The `bbox` parameter matches all features\nin the collection that are not associated with a location, too. The\n`datetime` parameter matches all features in the collection that are\nnot associated with a time stamp or interval, too.\n\nThe `limit` parameter may be used to control the subset of the\nselected features that should be returned in the response, the page size.\nEach page may include information about the number of selected and\nreturned features (`numberMatched` and `numberReturned`) as well as\nlinks to support paging (link relation `next`).",
                        "content": {
                            "application/geo+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/featureCollectionGeoJSON"
                                }
                            }
                        }
                    },
                    "Feature": {
                        "description": "fetch the feature with id `featureId` in the feature collection\nwith id `collectionId`",
                        "content": {
                            "application/geo+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/item"
                                }
                            }
                        }
                    },
                    "InvalidParameter": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "code": {
                                            "type": "number"
                                        },
                                        "description": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code"
                                    ]
                                }
                            }
                        },
                        "description": "A query parameter has an invalid value."
                    },
                    "LandingPage": {
                        "description": "The landing page provides links to \n* the API definition and documentation (link relations `service-desc` and `service-doc`),\n* the STAC catalogue (path `/stac`),\n* the services (path `/services`, link relation  `services`), \n* the download endpoint (path `/download`, link relation `data`),\n* the notifications subscription endpoint (path `/notifications`, link relation `notifications`).",
                        "links": {
                            "self": {
                                "operationId": "get",
                                "description": "A link with rel=self describing this document"
                            },
                            "root": {
                                "operationId": "get",
                                "description": "A link with rel=root "
                            },
                            "stac": {
                                "operationId": "getStac",
                                "description": "A link with rel=stac. The STAC catalogue"
                            },
                            "services": {
                                "operationId": "getServices",
                                "description": "A link with rel=services. Advertise a list of available services"
                            },
                            "download": {
                                "operationId": "postDownload",
                                "description": "A link with rel=download and method=POST"
                            },
                            "notifications": {
                                "operationId": "getNotification",
                                "description": "A link with rel=notifications"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/landingPage"
                                },
                                "example": {
                                    "title": "Destination Earth Data Lake API",
                                    "description": "The Destination Earth Data Lake API provides access to a STAC catalogue with download capabilities. In addition the API advertises a list of services to Destination Earth Data Lake users.",
                                    "links": [
                                        {
                                            "href": "http://dedl-hda.local",
                                            "rel": "self",
                                            "type": "application/json",
                                            "title": "this document"
                                        },
                                        {
                                            "href": "http://dedl-hda.local/stac",
                                            "rel": "stac",
                                            "type": "application/json",
                                            "title": "STAC API root endpoint"
                                        },
                                        {
                                            "href": "http://dedl-hda.local/services",
                                            "rel": "services",
                                            "type": "application/json",
                                            "title": "Services for DEDL users"
                                        },
                                        {
                                            "href": "http://dedl-hda.local/download",
                                            "method": "POST",
                                            "rel": "download",
                                            "type": "application/json",
                                            "title": "STAC API endpoint to download collections' items"
                                        },
                                        {
                                            "href": "http://dedl-hda.local/notifications",
                                            "rel": "notifications",
                                            "type": "application/json",
                                            "title": "Subscribe to get informs of DEDL events"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "NotFound": {
                        "description": "The requested URI was not found."
                    },
                    "Queryables": {
                        "description": "A JSON Schema defining the Queryables allowed in CQL2 expressions",
                        "content": {
                            "application/schema+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "ServerError": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/exception"
                                }
                            }
                        },
                        "description": "A server error occured."
                    },
                    "Service": {
                        "description": "Information about the service with id `serviceId`.",
                        "links": {
                            "self": {
                                "operationId": "getService",
                                "description": "A link with rel=service"
                            },
                            "parent": {
                                "operationId": "getServices",
                                "description": "A link with rel=parent"
                            },
                            "root": {
                                "operationId": "get",
                                "description": "A link with rel=root"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/service"
                                }
                            }
                        }
                    },
                    "Services": {
                        "description": "The services shared by this API.",
                        "links": {
                            "self": {
                                "operationId": "getServices",
                                "description": "A link with rel=services"
                            },
                            "parent": {
                                "operationId": "get",
                                "description": "A link with rel=parent"
                            },
                            "root": {
                                "operationId": "get",
                                "description": "A link with rel=root"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/services"
                                }
                            }
                        }
                    },
                    "StacPage": {
                        "description": "Returns the root STAC Catalog that is the entry point\nfor users to browse with STAC Browser or for search engines to crawl.\nThis return a STAC catalog.\n\nThe stac page provides links to the\nAPI definition (link relations `service-desc` and `service-doc`)\nand the STAC records such as collections/collection (link relation `child`)\nor items (link relation `item`).\nExtensions may add additional links with new relation types.",
                        "links": {
                            "self": {
                                "operationId": "getStac",
                                "description": "A link with rel=self to this document"
                            },
                            "parent": {
                                "operationId": "get",
                                "description": "A link with rel=parent to the root API endpoint"
                            },
                            "root": {
                                "operationId": "get",
                                "description": "A link with rel=root to the root API endpoint"
                            },
                            "serviceDesc": {
                                "operationId": "get",
                                "description": "A link with rel=service-desc to the API definition"
                            },
                            "serviceDoc": {
                                "operationId": "get",
                                "description": "A link with rel=service-doc to the API documentation"
                            },
                            "conformance": {
                                "operationId": "getConformanceDeclaration",
                                "description": "A link with rel=conformance"
                            },
                            "collections": {
                                "operationId": "getCollections",
                                "description": "A link with rel=data"
                            },
                            "getSearch": {
                                "operationId": "getItemSearch",
                                "description": "A link with rel=search. As GET is default, the method may not be set explicitly in the link."
                            },
                            "postSearch": {
                                "operationId": "postItemSearch",
                                "description": "A link with rel=search and method=POST"
                            },
                            "queryables": {
                                "operationId": "getQueryables",
                                "description": "A link with rel=queryables for the entire catalog"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/stacPage"
                                },
                                "example": {
                                    "type": "Catalog",
                                    "stac_version": "1.0.0",
                                    "id": "dedl",
                                    "title": "Destination Earth Data Lake",
                                    "description": "Catalog of Destination Earth Data Lake.",
                                    "conformsTo": [
                                        "https://api.stacspec.org/v1.0.0-rc.1/core",
                                        "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core",
                                        "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30",
                                        "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson"
                                    ],
                                    "links": [
                                        {
                                            "href": "http://dedl-hda.local/stac",
                                            "rel": "self",
                                            "type": "application/json",
                                            "title": "this document"
                                        },
                                        {
                                            "href": "http://dedl-hda.local/stac/docs",
                                            "rel": "service-desc",
                                            "type": "application/vnd.oai.openapi+json;version=3.0",
                                            "title": "the API definition"
                                        },
                                        {
                                            "href": "http://dedl-hda.local/stac/openapi.json",
                                            "rel": "service-doc",
                                            "type": "text/html",
                                            "title": "the API documentation"
                                        },
                                        {
                                            "href": "http://dedl-hda.local/stac/conformance",
                                            "rel": "conformance",
                                            "type": "application/json",
                                            "title": "OGC API conformance classes implemented by this server"
                                        },
                                        {
                                            "href": "http://dedl-hda.local/stac/collections",
                                            "rel": "data",
                                            "type": "application/json",
                                            "title": "Information about the feature collections"
                                        },
                                        {
                                            "href": "http://dedl-hda.local/stac/search",
                                            "rel": "search",
                                            "type": "application/json",
                                            "title": "Search STAC items with simple filtering"
                                        },
                                        {
                                            "href": "http://dedl-hda.local/stac/search",
                                            "method": "POST",
                                            "rel": "search",
                                            "type": "application/json",
                                            "title": "Search STAC items with simple filtering"
                                        },
                                        {
                                            "href": "http://dedl-hda.local/stac/queryables",
                                            "rel": "queryables",
                                            "type": "application/json",
                                            "title": "List of variables terms that can be used in CQL2 expressions"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "parameters": {
                    "bbox": {
                        "name": "bbox",
                        "in": "query",
                        "description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four or six numbers, depending on whether the\ncoordinate reference system includes a vertical axis (height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nThe coordinate reference system of the values is WGS 84 longitude/latitude\n(http://www.opengis.net/def/crs/OGC/1.3/CRS84).\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "oneOf": [
                                {
                                    "minItems": 4,
                                    "maxItems": 4
                                },
                                {
                                    "minItems": 6,
                                    "maxItems": 6
                                }
                            ],
                            "items": {
                                "type": "number"
                            }
                        },
                        "style": "form",
                        "explode": false
                    },
                    "datetime": {
                        "name": "datetime",
                        "in": "query",
                        "description": "Either a date-time or an interval, open or closed. Date and time expressions\nadhere to RFC 3339. Open intervals are expressed using double-dots.\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false
                    },
                    "limit": {
                        "name": "limit",
                        "in": "query",
                        "description": "The optional limit parameter recommends the number of items that should be present in the response document.\n\nIf the limit parameter value is greater than advertised limit maximum, the server must return the\nmaximum possible number of items, rather than responding with an error.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items must not be counted.\n\nMinimum = 1. Maximum = 10000. Default = 10.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 10000,
                            "default": 10
                        },
                        "style": "form",
                        "explode": false
                    },
                    "q": {
                        "name": "q",
                        "in": "query",
                        "description": "The optional q parameter supports keyword searching.  Only records\nwhose text fields contain one or more of the specified search terms\nare selected.  The specific set of text keys/fields/properties of a\nrecord to which the q operator is applied is up to the description\nof the server.   Implementations should, however, apply the q\noperator to the title, description and keywords keys/fields/properties.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": false
                    },
                    "intersects": {
                        "name": "intersects",
                        "in": "query",
                        "description": "Searches items by performing intersection between their geometry and provided GeoJSON geometry. All GeoJSON geometry types must be supported.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/geometryGeoJSON"
                        },
                        "style": "form",
                        "explode": false
                    },
                    "ids": {
                        "name": "ids",
                        "in": "query",
                        "description": "Array of Item ids to return.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/ids"
                        },
                        "explode": false
                    },
                    "collectionsArray": {
                        "name": "collections",
                        "in": "query",
                        "description": "Array of Collection IDs to include in the search for items.\nOnly Item objects in one of the provided collections will be searched\n",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/collectionsArray"
                        },
                        "explode": false
                    },
                    "collectionId": {
                        "name": "collectionId",
                        "description": "Local identifier of a collection.",
                        "schema": {
                            "title": "Collection Id",
                            "description": "Collection ID",
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    "serviceId": {
                        "name": "serviceId",
                        "description": "Service ID",
                        "schema": {
                            "title": "Service Id",
                            "description": "Service ID",
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    "token": {
                        "name": "token",
                        "schema": {
                            "title": "Token",
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    "filter": {
                        "name": "filter",
                        "x-stac-api-fragment": "filter",
                        "in": "query",
                        "description": "**Extension:** Filter\nA CQL2 filter expression for filtering items.",
                        "required": false,
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/filter-cql2-json"
                                },
                                {
                                    "$ref": "#/components/schemas/filter-cql2-text"
                                }
                            ]
                        }
                    },
                    "filter-crs": {
                        "name": "filter-crs",
                        "x-stac-api-fragment": "filter",
                        "in": "query",
                        "description": "**Extension:** Filter\nThe CRS used by spatial predicates in the filter parameter. In STAC API, only value that must be accepted\nis 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/filter-crs"
                        }
                    },
                    "filter-lang": {
                        "name": "filter-lang",
                        "x-stac-api-fragment": "filter",
                        "in": "query",
                        "description": "**Extension:** Filter\n\nThe CQL2 filter encoding that the 'filter' value uses. Must be one of 'cql2-text' or 'cql2-json'.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/filter-lang"
                        }
                    },
                    "sortBy": {
                        "name": "sortby",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Sortby",
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false
                    },
                    "fields": {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Fields",
                            "type": "string"
                        }
                    },
                    "featureId": {
                        "name": "featureId",
                        "in": "path",
                        "description": "local identifier of a feature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "security": [],
            "tags": [
                {
                    "name": "DEDL API - Core",
                    "description": "Part of DEDL API Core definition"
                },
                {
                    "name": "DEDL API - Services",
                    "description": "Part of DEDL API service definition"
                },
                {
                    "name": "STAC API - Core",
                    "description": "Part of STAC API v1.0.0-rc.1 - Core definition"
                },
                {
                    "name": "STAC API - Item Search",
                    "description": "Part of STAC API v1.0.0-rc.1 - Item Search definition"
                },
                {
                    "name": "STAC API - Item Download",
                    "description": "Part of STAC API v1.0.0-rc.1 - Item Download definition"
                },
                {
                    "name": "STAC API - Features",
                    "description": "Part of STAC API v1.0.0-rc.1 - Features definition"
                },
                {
                    "name": "STAC API - Collections",
                    "description": "Part of STAC API v1.0.0-rc.1 - Collections definition"
                }
            ]
        },
        "dataspace": {
            "openapi": "3.1.0",
            "info": {
                "title": "API Reference",
                "description": "This page contains the documentation on how to use sentinel hub services through API calls.\n\n> Note: This documentation is not complete\n",
                "version": "1.0.0",
                "contact": {
                    "name": "Sentinel Hub"
                }
            },
            "servers": [
                {
                    "url": "https://sh.dataspace.copernicus.eu"
                }
            ],
            "components": {
                "securitySchemes": {
                    "OAuth2": {
                        "type": "oauth2",
                        "description": "### Authentication\n\nMore about the authentication <a href=\"https://eu-cdse.github.io/documentation/APIs/SentinelHub/Overview/Authentication.html\" target=\"_blank\">here</a>.\n\nTo get an access token using curl:\n\n```\ncurl --request POST \\\n  --url https://identity.dataspace.copernicus.eu/auth/realms/CDSE/protocol/openid-connect/token \\\n  --header \"content-type: application/x-www-form-urlencoded\" \\\n  --data \"grant_type=client_credentials&client_id=<your client id>&client_secret=<your client secret>\"\n```\n",
                        "flows": {
                            "clientCredentials": {
                                "tokenUrl": "https://identity.dataspace.copernicus.eu/auth/realms/CDSE/protocol/openid-connect/token",
                                "scopes": {
                                    "SH": "Sentinel Hub"
                                }
                            }
                        }
                    }
                },
                "parameters": {
                    "SearchBeanSearch": {
                        "name": "search",
                        "description": "Optional search query. Either a single word to search for or multiple words separated by the `|` (or) and `&` (and) operators. If omitted, all items are returned.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "SearchBeanCount": {
                        "name": "count",
                        "description": "Upper limit to the number of items to retrieve. It cannot be larger than the endpoint-specific limit. If omitted, the endpoint-specific limit is used.\nFor more records, use *viewtoken* to page through.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "SearchBeanViewtoken": {
                        "name": "viewtoken",
                        "description": "When total number of items is larger than *count*, the response contains *viewtoken*. This *viewtoken* can be used in the next request to retrieve the next page of items.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "SearchBeanSort": {
                        "name": "sort",
                        "description": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "CatalogCollectionsCollectionId": {
                        "name": "collectionId",
                        "in": "path",
                        "description": "local identifier of a collection",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    "CatalogFeaturesBbox": {
                        "name": "bbox",
                        "in": "query",
                        "description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four or six numbers, depending on whether the\ncoordinate reference system includes a vertical axis (height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nThe coordinate reference system of the values is WGS 84 longitude/latitude\n(http://www.opengis.net/def/crs/OGC/1.3/CRS84).\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "oneOf": [
                                {
                                    "minItems": 4,
                                    "maxItems": 4
                                },
                                {
                                    "minItems": 6,
                                    "maxItems": 6
                                }
                            ],
                            "items": {
                                "type": "number"
                            }
                        },
                        "style": "form",
                        "explode": false
                    },
                    "CatalogFeaturesCollectionId": {
                        "name": "collectionId",
                        "in": "path",
                        "description": "local identifier of a collection",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    "CatalogFeaturesDatetime": {
                        "name": "datetime",
                        "in": "query",
                        "description": "Either a date-time or an interval, open or closed. Date and time expressions\nadhere to RFC 3339. Open intervals are expressed using double-dots.\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false
                    },
                    "CatalogFeaturesFeatureId": {
                        "name": "featureId",
                        "in": "path",
                        "description": "local identifier of a feature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    "CatalogFeaturesLimit": {
                        "name": "limit",
                        "in": "query",
                        "description": "The optional limit parameter recommends the number of items that should be present in the response document.\n\nIf the limit parameter value is greater than advertised limit maximum, the server must return the\nmaximum possible number of items, rather than responding with an error.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items must not be counted.\n\nMinimum = 1. Maximum = 100. Default = 10.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        },
                        "style": "form",
                        "explode": false
                    },
                    "CatalogItemSearchFieldsFields": {
                        "name": "fields",
                        "x-stac-api-fragment": "fields",
                        "in": "query",
                        "description": "**Extension:** Fields\n\nDetermines the shape of the features in the response",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "id,type,-geometry,bbox,properties,-links,-assets"
                        },
                        "style": "form",
                        "explode": false
                    },
                    "CatalogItemSearchFilterFilter": {
                        "name": "filter",
                        "x-stac-api-fragment": "filter",
                        "in": "query",
                        "description": "**Extension:** Filter\n\nA CQL2 filter expression for filtering items.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/CatalogItemSearchFilterFilterCql2Text"
                        },
                        "example": "eo:cloud_cover>90"
                    },
                    "CatalogItemSearchDistinctDistinct": {
                        "name": "distinct",
                        "x-stac-api-fragment": "distinct",
                        "in": "query",
                        "description": "**Extension:** Distinct\n\nReturn distinct values of specified property.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false
                    },
                    "CatalogItemSearchIds": {
                        "name": "ids",
                        "in": "query",
                        "description": "Array of Item ids to return.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/CatalogItemSearchIds"
                        },
                        "explode": false
                    },
                    "CatalogItemSearchCollectionsArray": {
                        "name": "collections",
                        "in": "query",
                        "description": "Array of Collection IDs to include in the search for items.\nOnly Item objects in one of the provided collections will be searched\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/CatalogItemSearchCollectionsArray"
                        },
                        "explode": false,
                        "example": [
                            "sentinel-2-l2a"
                        ]
                    },
                    "CatalogItemSearchDatetime": {
                        "name": "datetime",
                        "in": "query",
                        "description": "Either a date-time or an interval, open or closed. Date and time expressions\nadhere to RFC 3339. Open intervals are expressed using double-dots.\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "example": "2020-12-10T00:00:00Z/2020-12-30T00:00:00Z"
                    },
                    "CatalogItemSearchBbox": {
                        "name": "bbox",
                        "in": "query",
                        "description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four or six numbers, depending on\nwhether the coordinate reference system includes a vertical axis (height\nor depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nThe coordinate reference system of the values is WGS 84\nlongitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence\nof minimum longitude, minimum latitude, maximum longitude and maximum\nlatitude. However, in cases where the box spans the antimeridian the\nfirst value (west-most box edge) is larger than the third value\n(east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the\ndecision of the server whether only a single spatial geometry property\nis used to determine the extent or all relevant geometries.\n\nExample: The bounding box of the New Zealand Exclusive Economic Zone in\nWGS 84 (from 160.6\u00b0E to 170\u00b0W and from 55.95\u00b0S to 25.89\u00b0S) would be\nrepresented in JSON as `[160.6, -55.95, -170, -25.89]` and in a query as\n`bbox=160.6,-55.95,-170,-25.89`.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "oneOf": [
                                {
                                    "minItems": 4,
                                    "maxItems": 4
                                },
                                {
                                    "minItems": 6,
                                    "maxItems": 6
                                }
                            ],
                            "items": {
                                "type": "number"
                            }
                        },
                        "style": "form",
                        "explode": false,
                        "example": [
                            13,
                            45,
                            14,
                            46
                        ]
                    },
                    "CatalogItemSearchLimit": {
                        "name": "limit",
                        "in": "query",
                        "description": "The optional limit parameter recommends the number of items that should be present in the response document.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items must not be counted.\n\nMinimum = 1. Maximum = 100. Default = 10.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        },
                        "style": "form",
                        "explode": false,
                        "example": 1
                    },
                    "CatalogItemSearchIntersects": {
                        "name": "intersects",
                        "in": "query",
                        "description": "The optional intersects parameter filters the result Items in the same was as bbox, only with\na GeoJSON Geometry rather than a bbox.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/CatalogGeometryGeoJSON"
                        },
                        "style": "form",
                        "explode": false
                    },
                    "BatchRequestId": {
                        "name": "requestId",
                        "description": "Request ID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "BatchCollectionId": {
                        "name": "collectionId",
                        "description": "Collection ID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "BatchTileId": {
                        "name": "tileId",
                        "description": "Tile ID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "BatchTilinggridsId": {
                        "name": "id",
                        "description": "Tilinggrids ID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "ByocCollectionId": {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "ByocTileId": {
                        "name": "tileId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "ConfigurationDatasetType": {
                        "name": "datasetType",
                        "description": "Dataset type",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/DatasetType"
                        }
                    },
                    "ConfigurationDataproductId": {
                        "name": "id",
                        "description": "Dataproduct ID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "ConfigurationDatasetId": {
                        "name": "datasetId",
                        "description": "Dataset ID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    "ConfigurationDatasetSourceId": {
                        "name": "id",
                        "description": "Dataset source ID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "WmsInstanceId": {
                        "name": "instanceId",
                        "description": "Instance ID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "WmsLayerId": {
                        "name": "layerId",
                        "description": "Layer ID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorWrapper"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorWrapper"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict in the request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorWrapper"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorWrapper"
                                }
                            }
                        }
                    },
                    "CatalogError": {
                        "description": "An error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogException"
                                }
                            }
                        }
                    },
                    "CatalogCoreLandingPage": {
                        "description": "The landing page provides links to the API definition\n(link relations `service-desc` and `service-doc`),\nthe Conformance declaration (path `/conformance`,\nlink relation `conformance`), and the Feature\nCollections (path `/collections`, link relation\n`data`).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogCoreLandingPage"
                                },
                                "example": {
                                    "type": "Catalog",
                                    "stac_version": "1.0.0",
                                    "id": "sentinel-hub",
                                    "title": "Sentinel Hub STAC catalog",
                                    "description": "STAC v1.0.0 implementation by Sentinel Hub",
                                    "conformsTo": [
                                        "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core",
                                        "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30",
                                        "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson",
                                        "https://api.stacspec.org/v1.0.0/core",
                                        "https://api.stacspec.org/v1.0.0/collections",
                                        "https://api.stacspec.org/v1.0.0/ogcapi-features",
                                        "https://api.stacspec.org/v1.0.0/ogcapi-features#fields",
                                        "https://api.stacspec.org/v1.0.0/ogcapi-features#context",
                                        "https://api.stacspec.org/v1.0.0/ogcapi-features#filter",
                                        "https://api.stacspec.org/v1.0.0/item-search",
                                        "https://api.stacspec.org/v1.0.0/item-search#fields",
                                        "https://api.stacspec.org/v1.0.0/item-search#context",
                                        "https://api.stacspec.org/v1.0.0/item-search#filter",
                                        "http://www.opengis.net/spec/ogcapi-features-3/1.0/conf/filter",
                                        "http://www.opengis.net/spec/ogcapi-features-3/1.0/conf/features-filter",
                                        "http://www.opengis.net/spec/cql2/1.0/conf/cql2-text",
                                        "http://www.opengis.net/spec/cql2/1.0/conf/cql2-json",
                                        "http://www.opengis.net/spec/cql2/1.0/conf/basic-cql2"
                                    ],
                                    "links": [
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/",
                                            "rel": "root",
                                            "type": "application/json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/",
                                            "rel": "self",
                                            "type": "application/json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections",
                                            "rel": "data",
                                            "type": "application/json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/conformance",
                                            "rel": "conformance",
                                            "type": "application/json",
                                            "title": "STAC conformance classes implemented by this server"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search",
                                            "rel": "search",
                                            "type": "application/geo+json",
                                            "title": "STAC search",
                                            "method": "GET"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search",
                                            "rel": "search",
                                            "type": "application/geo+json",
                                            "title": "STAC search",
                                            "method": "POST"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/queryables",
                                            "rel": "http://www.opengis.net/def/rel/ogc/1.0/queryables",
                                            "type": "application/schema+json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l1c",
                                            "rel": "child",
                                            "type": "application/json",
                                            "title": "Sentinel 2 L1C"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-1-grd",
                                            "rel": "child",
                                            "type": "application/json",
                                            "title": "Sentinel 1 GRD"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a",
                                            "rel": "child",
                                            "type": "application/json",
                                            "title": "Sentinel 2 L2A"
                                        },
                                        {
                                            "href": "https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/ApiReference/openapi.v1.yaml",
                                            "rel": "service-desc",
                                            "type": "application/vnd.oai.openapi;version=\"3.1\"",
                                            "title": "OpenAPI service description"
                                        },
                                        {
                                            "href": "https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/ApiReference.html#tag/catalog_core",
                                            "rel": "service-doc",
                                            "type": "text/html",
                                            "title": "OpenAPI service documentation"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "CatalogConformanceDeclaration": {
                        "description": "The URIs of all conformance classes supported by the server.\n\nTo support \"generic\" clients that want to access multiple\nOGC API Features implementations - and not \"just\" a specific\nAPI / server, the server declares the conformance\nclasses it implements and conforms to.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogConformanceClasses"
                                },
                                "example": {
                                    "conformsTo": [
                                        "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core",
                                        "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30",
                                        "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson",
                                        "https://api.stacspec.org/v1.0.0/core",
                                        "https://api.stacspec.org/v1.0.0/collections",
                                        "https://api.stacspec.org/v1.0.0/ogcapi-features",
                                        "https://api.stacspec.org/v1.0.0/ogcapi-features#fields",
                                        "https://api.stacspec.org/v1.0.0/ogcapi-features#context",
                                        "https://api.stacspec.org/v1.0.0/ogcapi-features#filter",
                                        "https://api.stacspec.org/v1.0.0/item-search",
                                        "https://api.stacspec.org/v1.0.0/item-search#fields",
                                        "https://api.stacspec.org/v1.0.0/item-search#context",
                                        "https://api.stacspec.org/v1.0.0/item-search#filter",
                                        "http://www.opengis.net/spec/ogcapi-features-3/1.0/conf/filter",
                                        "http://www.opengis.net/spec/ogcapi-features-3/1.0/conf/features-filter",
                                        "http://www.opengis.net/spec/cql2/1.0/conf/cql2-text",
                                        "http://www.opengis.net/spec/cql2/1.0/conf/cql2-json",
                                        "http://www.opengis.net/spec/cql2/1.0/conf/basic-cql2"
                                    ]
                                }
                            }
                        }
                    },
                    "CatalogCollectionsCollections": {
                        "description": "The feature collections shared by this API.\n\nThe dataset is organized as one or more feature collections. This resource\nprovides information about and access to the collections.\n\nThe response contains the list of collections. For each collection, a link\nto the items in the collection (path `/collections/{collectionId}/items`,\nlink relation `items`) as well as key information about the collection.\nThis information includes:\n\n* A local identifier for the collection that is unique for the dataset;\n* A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);\n* An optional title and description for the collection;\n* An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n* An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogCollectionsCollections"
                                },
                                "example": {
                                    "links": [
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/",
                                            "rel": "root",
                                            "type": "application/json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/",
                                            "rel": "self",
                                            "type": "application/json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/",
                                            "rel": "parent",
                                            "type": "application/json"
                                        }
                                    ],
                                    "collections": [
                                        {
                                            "stac_version": "1.0.0",
                                            "stac_extensions": [
                                                "https://stac-extensions.github.io/scientific/v1.0.0/schema.json",
                                                "https://stac-extensions.github.io/eo/v1.0.0/schema.json"
                                            ],
                                            "type": "Collection",
                                            "id": "sentinel-2-l1c",
                                            "title": "Sentinel 2 L1C",
                                            "description": "Sentinel 2 imagery processed to level 1C",
                                            "sci:citation": "Modified Copernicus Sentinel data [Year]/Sentinel Hub",
                                            "license": "proprietary",
                                            "providers": [
                                                {
                                                    "name": "ESA",
                                                    "roles": [
                                                        "producer"
                                                    ],
                                                    "url": "https://esa.int/"
                                                },
                                                {
                                                    "name": "AWS",
                                                    "roles": [
                                                        "host"
                                                    ],
                                                    "url": "https://aws.amazon.com/"
                                                },
                                                {
                                                    "name": "Sinergise",
                                                    "roles": [
                                                        "processor"
                                                    ],
                                                    "url": "https://www.sinergise.com/"
                                                }
                                            ],
                                            "extent": {
                                                "spatial": {
                                                    "bbox": [
                                                        [
                                                            -180,
                                                            -56,
                                                            180,
                                                            83
                                                        ]
                                                    ]
                                                },
                                                "temporal": {
                                                    "interval": [
                                                        [
                                                            "2015-11-01T00:00:00Z",
                                                            null
                                                        ]
                                                    ]
                                                }
                                            },
                                            "summaries": {
                                                "platform": [
                                                    "sentinel-2a",
                                                    "sentinel-2b"
                                                ],
                                                "instrument": [
                                                    "msi"
                                                ],
                                                "constellation": [
                                                    "sentinel-2"
                                                ],
                                                "gsd": [
                                                    10
                                                ],
                                                "eo:cloud_cover": {
                                                    "minimum": 0,
                                                    "maximum": 100
                                                },
                                                "eo:bands": [
                                                    {
                                                        "name": "B01",
                                                        "common_name": "coastal",
                                                        "center_wavelength": 0.4427,
                                                        "full_width_half_max": 0.021
                                                    },
                                                    {
                                                        "name": "B02",
                                                        "common_name": "blue",
                                                        "center_wavelength": 0.4924,
                                                        "full_width_half_max": 0.066
                                                    },
                                                    {
                                                        "name": "B03",
                                                        "common_name": "green",
                                                        "center_wavelength": 0.5598,
                                                        "full_width_half_max": 0.036
                                                    },
                                                    {
                                                        "name": "B04",
                                                        "common_name": "red",
                                                        "center_wavelength": 0.6646,
                                                        "full_width_half_max": 0.031
                                                    },
                                                    {
                                                        "name": "B05",
                                                        "center_wavelength": 0.7041,
                                                        "full_width_half_max": 0.015
                                                    },
                                                    {
                                                        "name": "B06",
                                                        "center_wavelength": 0.7405,
                                                        "full_width_half_max": 0.015
                                                    },
                                                    {
                                                        "name": "B07",
                                                        "center_wavelength": 0.7828,
                                                        "full_width_half_max": 0.02
                                                    },
                                                    {
                                                        "name": "B08",
                                                        "common_name": "nir",
                                                        "center_wavelength": 0.8328,
                                                        "full_width_half_max": 0.106
                                                    },
                                                    {
                                                        "name": "B8A",
                                                        "common_name": "nir08",
                                                        "center_wavelength": 0.8647,
                                                        "full_width_half_max": 0.021
                                                    },
                                                    {
                                                        "name": "B09",
                                                        "common_name": "nir09",
                                                        "center_wavelength": 0.9451,
                                                        "full_width_half_max": 0.02
                                                    },
                                                    {
                                                        "name": "B10",
                                                        "common_name": "cirrus",
                                                        "center_wavelength": 1.3735,
                                                        "full_width_half_max": 0.031
                                                    },
                                                    {
                                                        "name": "B11",
                                                        "common_name": "swir16",
                                                        "center_wavelength": 1.6137,
                                                        "full_width_half_max": 0.091
                                                    },
                                                    {
                                                        "name": "B12",
                                                        "common_name": "swir22",
                                                        "center_wavelength": 2.2024,
                                                        "full_width_half_max": 0.175
                                                    }
                                                ]
                                            },
                                            "links": [
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/",
                                                    "rel": "root",
                                                    "type": "application/json"
                                                },
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l1c",
                                                    "rel": "self",
                                                    "type": "application/json"
                                                },
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections",
                                                    "rel": "parent",
                                                    "type": "application/json"
                                                },
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l1c/queryables",
                                                    "rel": "http://www.opengis.net/def/rel/ogc/1.0/queryables",
                                                    "type": "application/schema+json"
                                                },
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l1c/items",
                                                    "rel": "items",
                                                    "type": "application/geo+json"
                                                }
                                            ]
                                        },
                                        {
                                            "stac_version": "1.0.0",
                                            "stac_extensions": [
                                                "https://stac-extensions.github.io/scientific/v1.0.0/schema.json",
                                                "https://stac-extensions.github.io/sat/v1.0.0/schema.json",
                                                "https://stac-extensions.github.io/sar/v1.0.0/schema.json",
                                                "https://docs.sentinel-hub.com/api/latest/stac/s1/v1.0.0/schema.json"
                                            ],
                                            "type": "Collection",
                                            "id": "sentinel-1-grd",
                                            "title": "Sentinel 1 GRD",
                                            "description": "Sentinel 1 Ground Range Detected Imagery",
                                            "sci:citation": "Modified Copernicus Sentinel data [Year]/Sentinel Hub",
                                            "license": "proprietary",
                                            "providers": [
                                                {
                                                    "name": "ESA",
                                                    "roles": [
                                                        "producer"
                                                    ],
                                                    "url": "https://esa.int/"
                                                },
                                                {
                                                    "name": "AWS",
                                                    "roles": [
                                                        "host"
                                                    ],
                                                    "url": "https://aws.amazon.com/"
                                                },
                                                {
                                                    "name": "Sinergise",
                                                    "roles": [
                                                        "processor"
                                                    ],
                                                    "url": "https://www.sinergise.com/"
                                                }
                                            ],
                                            "extent": {
                                                "spatial": {
                                                    "bbox": [
                                                        [
                                                            -180,
                                                            -85,
                                                            180,
                                                            85
                                                        ]
                                                    ]
                                                },
                                                "temporal": {
                                                    "interval": [
                                                        [
                                                            "2014-10-03T00:00:00Z",
                                                            null
                                                        ]
                                                    ]
                                                }
                                            },
                                            "summaries": {
                                                "platform": [
                                                    "sentinel-1a",
                                                    "sentinel-1b"
                                                ],
                                                "instrument": [
                                                    "c-sar"
                                                ],
                                                "constellation": [
                                                    "sentinel-1"
                                                ],
                                                "sat:orbit_state": [
                                                    "ascending",
                                                    "descending"
                                                ],
                                                "sar:instrument_mode": [
                                                    "SM",
                                                    "IW",
                                                    "EW",
                                                    "WV",
                                                    "EN",
                                                    "AN",
                                                    "IM"
                                                ],
                                                "sar:frequency_band": [
                                                    "C"
                                                ],
                                                "sar:center_frequency": [
                                                    5.405
                                                ],
                                                "sar:product_type": [
                                                    "GRD"
                                                ],
                                                "sar:polarizations": [
                                                    "HH",
                                                    "HV",
                                                    "VH",
                                                    "VV"
                                                ],
                                                "sar:resolution_range": [
                                                    9,
                                                    20,
                                                    23,
                                                    50,
                                                    52,
                                                    84,
                                                    88,
                                                    93
                                                ],
                                                "sar:resolution_azimuth": [
                                                    9,
                                                    22,
                                                    23,
                                                    50,
                                                    51,
                                                    84,
                                                    87
                                                ],
                                                "sar:pixel_spacing_range": [
                                                    3.5,
                                                    10,
                                                    25,
                                                    40
                                                ],
                                                "sar:pixel_spacing_azimuth": [
                                                    3.5,
                                                    10,
                                                    25,
                                                    40
                                                ],
                                                "s1:timeliness": [
                                                    "NRT10m",
                                                    "NRT1h",
                                                    "NRT3h",
                                                    "Fast24h",
                                                    "Offline",
                                                    "Reprocessing",
                                                    "ArchNormal"
                                                ],
                                                "s1:resolution": [
                                                    "HIGH",
                                                    "MEDIUM",
                                                    "FULL"
                                                ],
                                                "s1:polarization": [
                                                    "SH",
                                                    "SV",
                                                    "DH",
                                                    "DV",
                                                    "HH",
                                                    "HV",
                                                    "VV",
                                                    "VH"
                                                ]
                                            },
                                            "links": [
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/",
                                                    "rel": "root",
                                                    "type": "application/json"
                                                },
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-1-grd",
                                                    "rel": "self",
                                                    "type": "application/json"
                                                },
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections",
                                                    "rel": "parent",
                                                    "type": "application/json"
                                                },
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-1-grd/queryables",
                                                    "rel": "http://www.opengis.net/def/rel/ogc/1.0/queryables",
                                                    "type": "application/schema+json"
                                                },
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-1-grd/items",
                                                    "rel": "items",
                                                    "type": "application/geo+json"
                                                }
                                            ]
                                        },
                                        {
                                            "stac_version": "1.0.0",
                                            "stac_extensions": [
                                                "https://stac-extensions.github.io/scientific/v1.0.0/schema.json",
                                                "https://stac-extensions.github.io/eo/v1.0.0/schema.json"
                                            ],
                                            "type": "Collection",
                                            "id": "sentinel-2-l2a",
                                            "title": "Sentinel 2 L2A",
                                            "description": "Sentinel 2 imagery processed to level 2A",
                                            "sci:citation": "Modified Copernicus Sentinel data [Year]/Sentinel Hub",
                                            "license": "proprietary",
                                            "providers": [
                                                {
                                                    "name": "ESA",
                                                    "roles": [
                                                        "producer"
                                                    ],
                                                    "url": "https://esa.int/"
                                                },
                                                {
                                                    "name": "AWS",
                                                    "roles": [
                                                        "host"
                                                    ],
                                                    "url": "https://aws.amazon.com/"
                                                },
                                                {
                                                    "name": "Sinergise",
                                                    "roles": [
                                                        "processor"
                                                    ],
                                                    "url": "https://www.sinergise.com/"
                                                }
                                            ],
                                            "extent": {
                                                "spatial": {
                                                    "bbox": [
                                                        [
                                                            -180,
                                                            -56,
                                                            180,
                                                            83
                                                        ]
                                                    ]
                                                },
                                                "temporal": {
                                                    "interval": [
                                                        [
                                                            "2016-11-01T00:00:00Z",
                                                            null
                                                        ]
                                                    ]
                                                }
                                            },
                                            "summaries": {
                                                "platform": [
                                                    "sentinel-2a",
                                                    "sentinel-2b"
                                                ],
                                                "instrument": [
                                                    "msi"
                                                ],
                                                "constellation": [
                                                    "sentinel-2"
                                                ],
                                                "gsd": [
                                                    10
                                                ],
                                                "eo:cloud_cover": {
                                                    "minimum": 0,
                                                    "maximum": 100
                                                },
                                                "eo:bands": [
                                                    {
                                                        "name": "B01",
                                                        "common_name": "coastal",
                                                        "center_wavelength": 0.4427,
                                                        "full_width_half_max": 0.021
                                                    },
                                                    {
                                                        "name": "B02",
                                                        "common_name": "blue",
                                                        "center_wavelength": 0.4924,
                                                        "full_width_half_max": 0.066
                                                    },
                                                    {
                                                        "name": "B03",
                                                        "common_name": "green",
                                                        "center_wavelength": 0.5598,
                                                        "full_width_half_max": 0.036
                                                    },
                                                    {
                                                        "name": "B04",
                                                        "common_name": "red",
                                                        "center_wavelength": 0.6646,
                                                        "full_width_half_max": 0.031
                                                    },
                                                    {
                                                        "name": "B05",
                                                        "center_wavelength": 0.7041,
                                                        "full_width_half_max": 0.015
                                                    },
                                                    {
                                                        "name": "B06",
                                                        "center_wavelength": 0.7405,
                                                        "full_width_half_max": 0.015
                                                    },
                                                    {
                                                        "name": "B07",
                                                        "center_wavelength": 0.7828,
                                                        "full_width_half_max": 0.02
                                                    },
                                                    {
                                                        "name": "B08",
                                                        "common_name": "nir",
                                                        "center_wavelength": 0.8328,
                                                        "full_width_half_max": 0.106
                                                    },
                                                    {
                                                        "name": "B8A",
                                                        "common_name": "nir08",
                                                        "center_wavelength": 0.8647,
                                                        "full_width_half_max": 0.021
                                                    },
                                                    {
                                                        "name": "B09",
                                                        "common_name": "nir09",
                                                        "center_wavelength": 0.9451,
                                                        "full_width_half_max": 0.02
                                                    },
                                                    {
                                                        "name": "B11",
                                                        "common_name": "swir16",
                                                        "center_wavelength": 1.6137,
                                                        "full_width_half_max": 0.091
                                                    },
                                                    {
                                                        "name": "B12",
                                                        "common_name": "swir22",
                                                        "center_wavelength": 2.2024,
                                                        "full_width_half_max": 0.175
                                                    }
                                                ]
                                            },
                                            "links": [
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/",
                                                    "rel": "root",
                                                    "type": "application/json"
                                                },
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a",
                                                    "rel": "self",
                                                    "type": "application/json"
                                                },
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections",
                                                    "rel": "parent",
                                                    "type": "application/json"
                                                },
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a/queryables",
                                                    "rel": "http://www.opengis.net/def/rel/ogc/1.0/queryables",
                                                    "type": "application/schema+json"
                                                },
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a/items",
                                                    "rel": "items",
                                                    "type": "application/geo+json"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "CatalogCollectionsCollection": {
                        "description": "Information about the feature collection with id `collectionId`.\n\nThe response contains a link to the items in the collection\n(path `/collections/{collectionId}/items`, link relation `items`)\nas well as key information about the collection. This information\nincludes:\n\n* A local identifier for the collection that is unique for the dataset;\n* A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);\n* An optional title and description for the collection;\n* An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n* An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogCollection"
                                },
                                "example": {
                                    "stac_version": "1.0.0",
                                    "stac_extensions": [
                                        "https://stac-extensions.github.io/scientific/v1.0.0/schema.json",
                                        "https://stac-extensions.github.io/eo/v1.0.0/schema.json"
                                    ],
                                    "type": "Collection",
                                    "id": "sentinel-2-l2a",
                                    "title": "Sentinel 2 L2A",
                                    "description": "Sentinel 2 imagery processed to level 2A",
                                    "sci:citation": "Modified Copernicus Sentinel data [Year]/Sentinel Hub",
                                    "license": "proprietary",
                                    "providers": [
                                        {
                                            "name": "ESA",
                                            "roles": [
                                                "producer"
                                            ],
                                            "url": "https://esa.int/"
                                        },
                                        {
                                            "name": "AWS",
                                            "roles": [
                                                "host"
                                            ],
                                            "url": "https://aws.amazon.com/"
                                        },
                                        {
                                            "name": "Sinergise",
                                            "roles": [
                                                "processor"
                                            ],
                                            "url": "https://www.sinergise.com/"
                                        }
                                    ],
                                    "extent": {
                                        "spatial": {
                                            "bbox": [
                                                [
                                                    -180,
                                                    -56,
                                                    180,
                                                    83
                                                ]
                                            ]
                                        },
                                        "temporal": {
                                            "interval": [
                                                [
                                                    "2016-11-01T00:00:00Z",
                                                    null
                                                ]
                                            ]
                                        }
                                    },
                                    "summaries": {
                                        "platform": [
                                            "sentinel-2a",
                                            "sentinel-2b"
                                        ],
                                        "instrument": [
                                            "msi"
                                        ],
                                        "constellation": [
                                            "sentinel-2"
                                        ],
                                        "gsd": [
                                            10
                                        ],
                                        "eo:cloud_cover": {
                                            "minimum": 0,
                                            "maximum": 100
                                        },
                                        "eo:bands": [
                                            {
                                                "name": "B01",
                                                "common_name": "coastal",
                                                "center_wavelength": 0.4427,
                                                "full_width_half_max": 0.021
                                            },
                                            {
                                                "name": "B02",
                                                "common_name": "blue",
                                                "center_wavelength": 0.4924,
                                                "full_width_half_max": 0.066
                                            },
                                            {
                                                "name": "B03",
                                                "common_name": "green",
                                                "center_wavelength": 0.5598,
                                                "full_width_half_max": 0.036
                                            },
                                            {
                                                "name": "B04",
                                                "common_name": "red",
                                                "center_wavelength": 0.6646,
                                                "full_width_half_max": 0.031
                                            },
                                            {
                                                "name": "B05",
                                                "center_wavelength": 0.7041,
                                                "full_width_half_max": 0.015
                                            },
                                            {
                                                "name": "B06",
                                                "center_wavelength": 0.7405,
                                                "full_width_half_max": 0.015
                                            },
                                            {
                                                "name": "B07",
                                                "center_wavelength": 0.7828,
                                                "full_width_half_max": 0.02
                                            },
                                            {
                                                "name": "B08",
                                                "common_name": "nir",
                                                "center_wavelength": 0.8328,
                                                "full_width_half_max": 0.106
                                            },
                                            {
                                                "name": "B8A",
                                                "common_name": "nir08",
                                                "center_wavelength": 0.8647,
                                                "full_width_half_max": 0.021
                                            },
                                            {
                                                "name": "B09",
                                                "common_name": "nir09",
                                                "center_wavelength": 0.9451,
                                                "full_width_half_max": 0.02
                                            },
                                            {
                                                "name": "B11",
                                                "common_name": "swir16",
                                                "center_wavelength": 1.6137,
                                                "full_width_half_max": 0.091
                                            },
                                            {
                                                "name": "B12",
                                                "common_name": "swir22",
                                                "center_wavelength": 2.2024,
                                                "full_width_half_max": 0.175
                                            }
                                        ]
                                    },
                                    "links": [
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/",
                                            "rel": "root",
                                            "type": "application/json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a",
                                            "rel": "self",
                                            "type": "application/json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections",
                                            "rel": "parent",
                                            "type": "application/json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a/queryables",
                                            "rel": "http://www.opengis.net/def/rel/ogc/1.0/queryables",
                                            "type": "application/schema+json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a/items",
                                            "rel": "items",
                                            "type": "application/geo+json"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "CatalogCollectionQueryables": {
                        "description": "A JSON Schema defining the Queryables allowed in CQL2 expressions",
                        "content": {
                            "application/schema+json": {
                                "schema": {
                                    "type": "object"
                                },
                                "example": {
                                    "$schema": "https://json-schema.org/draft/2019-09/schema",
                                    "$id": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a/queryables/",
                                    "type": "object",
                                    "title": "Queryables for Catalog STAC API",
                                    "description": "Queryable names for the Catalog STAC API Item Search filter.",
                                    "properties": {
                                        "eo:cloud_cover": {
                                            "description": "Cloud Cover",
                                            "type": "number",
                                            "minimum": 0,
                                            "maximum": 100
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "CatalogCollectionsNotFound": {
                        "description": "The requested URI was not found."
                    },
                    "CatalogCollectionsServerError": {
                        "description": "A server error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogException"
                                }
                            }
                        }
                    },
                    "CatalogFeaturesFeatures": {
                        "description": "The response is a document consisting of features in the collection.\nThe features included in the response are determined by the server\nbased on the query parameters of the request. To support access to\nlarger collections without overloading the client, the API supports\npaged access with links to the next page, if more features are selected\nthat the page size.\n\nThe `bbox` and `datetime` parameter can be used to select only a\nsubset of the features in the collection (the features that are in the\nbounding box or time interval). The `bbox` parameter matches all features\nin the collection that are not associated with a location, too. The\n`datetime` parameter matches all features in the collection that are\nnot associated with a time stamp or interval, too.\n\nThe `limit` parameter may be used to control the subset of the\nselected features that should be returned in the response, the page size.\nEach page may include information about the number of selected and\nreturned features (`numberMatched` and `numberReturned`) as well as\nlinks to support paging (link relation `next`).",
                        "content": {
                            "application/geo+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogFeaturesFeatureCollectionGeoJSON"
                                },
                                "example": {
                                    "type": "FeatureCollection",
                                    "features": [
                                        {
                                            "stac_version": "1.0.0",
                                            "stac_extensions": [
                                                "https://stac-extensions.github.io/eo/v1.0.0/schema.json",
                                                "https://stac-extensions.github.io/projection/v1.0.0/schema.json"
                                            ],
                                            "id": "S2B_MSIL2A_20201229T101329_N0214_R022_T33TUK_20201229T115442",
                                            "type": "Feature",
                                            "geometry": {
                                                "type": "MultiPolygon",
                                                "crs": {
                                                    "type": "name",
                                                    "properties": {
                                                        "name": "urn:ogc:def:crs:OGC::CRS84"
                                                    }
                                                },
                                                "coordinates": [
                                                    [
                                                        [
                                                            [
                                                                12.456873618680804,
                                                                45.12550485074961
                                                            ],
                                                            [
                                                                12.499663722139168,
                                                                44.138006014975964
                                                            ],
                                                            [
                                                                13.153277241744092,
                                                                44.15044712021016
                                                            ],
                                                            [
                                                                13.558241653952589,
                                                                45.144727105915536
                                                            ],
                                                            [
                                                                12.456873618680804,
                                                                45.12550485074961
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                            },
                                            "bbox": [
                                                12.456873618680804,
                                                44.138006014975964,
                                                13.558241653952589,
                                                45.144727105915536
                                            ],
                                            "properties": {
                                                "datetime": "2020-12-29T10:18:19Z",
                                                "platform": "sentinel-2b",
                                                "instruments": [
                                                    "msi"
                                                ],
                                                "constellation": "sentinel-2",
                                                "gsd": 10,
                                                "eo:cloud_cover": 93.93,
                                                "proj:epsg": 32633,
                                                "proj:bbox": [
                                                    300000,
                                                    4890240,
                                                    409800,
                                                    5000040
                                                ],
                                                "proj:geometry": {
                                                    "type": "MultiPolygon",
                                                    "crs": {
                                                        "type": "name",
                                                        "properties": {
                                                            "name": "urn:ogc:def:crs:EPSG::32633"
                                                        }
                                                    },
                                                    "coordinates": [
                                                        [
                                                            [
                                                                [
                                                                    300000.99988415383,
                                                                    5000039.000148304
                                                                ],
                                                                [
                                                                    300000.99989785976,
                                                                    4890241.000124758
                                                                ],
                                                                [
                                                                    352314.4884079728,
                                                                    4890241.000125499
                                                                ],
                                                                [
                                                                    386653.8629171661,
                                                                    5000039.000149397
                                                                ],
                                                                [
                                                                    300000.99988415383,
                                                                    5000039.000148304
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                }
                                            },
                                            "assets": {
                                                "data": {
                                                    "href": "s3://sentinel-s2-l2a/tiles/33/T/UK/2020/12/29/0/",
                                                    "title": "s3",
                                                    "type": "inode/directory"
                                                }
                                            },
                                            "collection": "sentinel-2-l2a",
                                            "links": [
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/",
                                                    "rel": "root",
                                                    "type": "application/json"
                                                },
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a/items/S2B_MSIL2A_20201229T101329_N0214_R022_T33TUK_20201229T115442",
                                                    "rel": "self",
                                                    "type": "application/geo+json"
                                                },
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a",
                                                    "rel": "parent",
                                                    "type": "application/json"
                                                },
                                                {
                                                    "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a",
                                                    "rel": "collection",
                                                    "type": "application/json"
                                                },
                                                {
                                                    "href": "https://scihub.copernicus.eu/dhus/odata/v1/Products('1da14794-939f-4ede-b490-cd3a2348b495')/$value",
                                                    "rel": "derived_from",
                                                    "title": "scihub download"
                                                }
                                            ]
                                        }
                                    ],
                                    "links": [
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/",
                                            "rel": "root",
                                            "type": "application/json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a/items?bbox=13,45,14,46&limit=1&datetime=2020-12-10T00:00:00Z/2020-12-30T00:00:00Z",
                                            "rel": "self",
                                            "type": "application/geo+json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a",
                                            "rel": "parent",
                                            "type": "application/json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a/items?limit=1&next=1&datetime=2020-12-10T00:00:00Z/2020-12-30T00:00:00Z&bbox=13,45,14,46",
                                            "rel": "next",
                                            "type": "application/geo+json",
                                            "title": "Next set of results"
                                        }
                                    ],
                                    "timeStamp": "2023-05-19T12:54:40.429059Z",
                                    "numberReturned": 1
                                }
                            }
                        }
                    },
                    "CatalogFeaturesFeature": {
                        "description": "fetch the feature with id `featureId` in the feature collection\nwith id `collectionId`",
                        "content": {
                            "application/geo+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogItem"
                                },
                                "example": {
                                    "stac_version": "1.0.0",
                                    "stac_extensions": [
                                        "https://stac-extensions.github.io/eo/v1.0.0/schema.json",
                                        "https://stac-extensions.github.io/projection/v1.0.0/schema.json"
                                    ],
                                    "id": "S2B_MSIL2A_20201229T101329_N0214_R022_T33TUK_20201229T115442",
                                    "type": "Feature",
                                    "geometry": {
                                        "type": "MultiPolygon",
                                        "crs": {
                                            "type": "name",
                                            "properties": {
                                                "name": "urn:ogc:def:crs:OGC::CRS84"
                                            }
                                        },
                                        "coordinates": [
                                            [
                                                [
                                                    [
                                                        12.456873618680804,
                                                        45.12550485074961
                                                    ],
                                                    [
                                                        12.499663722139168,
                                                        44.138006014975964
                                                    ],
                                                    [
                                                        13.153277241744092,
                                                        44.15044712021016
                                                    ],
                                                    [
                                                        13.558241653952589,
                                                        45.144727105915536
                                                    ],
                                                    [
                                                        12.456873618680804,
                                                        45.12550485074961
                                                    ]
                                                ]
                                            ]
                                        ]
                                    },
                                    "bbox": [
                                        12.456873618680804,
                                        44.138006014975964,
                                        13.558241653952589,
                                        45.144727105915536
                                    ],
                                    "properties": {
                                        "datetime": "2020-12-29T10:18:19Z",
                                        "platform": "sentinel-2b",
                                        "instruments": [
                                            "msi"
                                        ],
                                        "constellation": "sentinel-2",
                                        "gsd": 10,
                                        "eo:cloud_cover": 93.93,
                                        "proj:epsg": 32633,
                                        "proj:bbox": [
                                            300000,
                                            4890240,
                                            409800,
                                            5000040
                                        ],
                                        "proj:geometry": {
                                            "type": "MultiPolygon",
                                            "crs": {
                                                "type": "name",
                                                "properties": {
                                                    "name": "urn:ogc:def:crs:EPSG::32633"
                                                }
                                            },
                                            "coordinates": [
                                                [
                                                    [
                                                        [
                                                            300000.99988415383,
                                                            5000039.000148304
                                                        ],
                                                        [
                                                            300000.99989785976,
                                                            4890241.000124758
                                                        ],
                                                        [
                                                            352314.4884079728,
                                                            4890241.000125499
                                                        ],
                                                        [
                                                            386653.8629171661,
                                                            5000039.000149397
                                                        ],
                                                        [
                                                            300000.99988415383,
                                                            5000039.000148304
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        }
                                    },
                                    "assets": {
                                        "data": {
                                            "href": "s3://sentinel-s2-l2a/tiles/33/T/UK/2020/12/29/0/",
                                            "title": "s3",
                                            "type": "inode/directory"
                                        }
                                    },
                                    "collection": "sentinel-2-l2a",
                                    "links": [
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/",
                                            "rel": "root",
                                            "type": "application/json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a/items/S2B_MSIL2A_20201229T101329_N0214_R022_T33TUK_20201229T115442",
                                            "rel": "self",
                                            "type": "application/geo+json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a",
                                            "rel": "parent",
                                            "type": "application/json"
                                        },
                                        {
                                            "href": "https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l2a",
                                            "rel": "collection",
                                            "type": "application/json"
                                        },
                                        {
                                            "href": "https://scihub.copernicus.eu/dhus/odata/v1/Products('1da14794-939f-4ede-b490-cd3a2348b495')/$value",
                                            "rel": "derived_from",
                                            "title": "scihub download"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "CatalogFeaturesInvalidParameter": {
                        "description": "A query parameter has an invalid value.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogException"
                                }
                            }
                        }
                    },
                    "CatalogFeaturesNotFound": {
                        "description": "The requested URI was not found."
                    },
                    "CatalogFeaturesServerError": {
                        "description": "A server error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogException"
                                }
                            }
                        }
                    }
                },
                "schemas": {
                    "Boom": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "description": "HTTP status code",
                                "type": "integer",
                                "format": "int32"
                            },
                            "reason": {
                                "description": "Reason for the error",
                                "type": "string"
                            },
                            "message": {
                                "description": "Friendly error message",
                                "type": "string"
                            },
                            "code": {
                                "description": "Code that uniquely identifies the error",
                                "type": "string",
                                "enum": [
                                    "COMMON_BAD_PAYLOAD",
                                    "COMMON_NOT_FOUND",
                                    "COMMON_DATABASE_ERROR",
                                    "COMMON_UNIQUE_KEY_VIOLATION",
                                    "COMMON_INSUFFICIENT_PERMISSIONS",
                                    "COMMON_SENTINEL_ACCOUNT_EXPIRED",
                                    "COMMON_METHOD_NOT_ALLOWED",
                                    "COMMON_UNSUPPORTED_MEDIA_TYPE",
                                    "COMMON_ELASTICSEARCH_ERROR",
                                    "COMMON_UNAUTHORIZED",
                                    "COMMON_EXCEPTION",
                                    "RATE_LIMIT_STORAGE_TIMEOUT",
                                    "RATE_LIMIT_OVERLAPPING_POLICIES",
                                    "RATE_LIMIT_EXCEEDED",
                                    "RATE_LIMIT_TOKEN_COUNT_EXCEEDS_CAPACITY",
                                    "DASHBOARD_PAYPAL_SALE_ERROR",
                                    "DASHBOARD_PAYPAL_SUBSCRIPTION_ERROR",
                                    "DASHBOARD_INVALID_PAYPAL_RESPONSE",
                                    "DASHBOARD_EXECUTE_SALE_ERROR",
                                    "DASHBOARD_EXECUTE_AGREEMENT_ERROR",
                                    "DASHBOARD_IPN_ERROR",
                                    "DASHBOARD_ADYEN_SALE_ERROR",
                                    "DASHBOARD_ADYEN_PAYMENT_CANCELLED",
                                    "RENDERER_EXCEPTION",
                                    "OAUTH_ERROR",
                                    "EMAIL_OCTOPUS_ERROR"
                                ]
                            },
                            "errors": {
                                "description": "Additional information about the error (Optional)",
                                "type": "object"
                            }
                        }
                    },
                    "RestErrorWrapper": {
                        "type": "object",
                        "properties": {
                            "error": {
                                "$ref": "#/components/schemas/Boom"
                            }
                        }
                    },
                    "DatasetType": {
                        "type": "string",
                        "enum": [
                            "sentinel-2-l1c",
                            "sentinel-2-l2a",
                            "landsat-8-l1c",
                            "landsat-ot-l1",
                            "landsat-ot-l2",
                            "landsat-tm-l1",
                            "landsat-tm-l2",
                            "dem",
                            "modis",
                            "sentinel-1-grd",
                            "s2gm",
                            "sentinel-3-olci",
                            "sentinel-3-slstr",
                            "sentinel-5p-l2",
                            "custom"
                        ]
                    },
                    "Interpolator": {
                        "type": "string",
                        "enum": [
                            "BILINEAR",
                            "BICUBIC",
                            "LANCZOS",
                            "BOX",
                            "NEAREST"
                        ]
                    },
                    "DateTimeInterval": {
                        "type": "object",
                        "properties": {
                            "from": {
                                "type": "string",
                                "description": "ISO-8601 time representing start of search interval, e.g. 2019-01-31T14:00:00+01:00",
                                "format": "date-time"
                            },
                            "to": {
                                "type": "string",
                                "description": "ISO-8601 time representing end of search interval, e.g. 2019-02-05T15:00:00+01:00.",
                                "format": "date-time"
                            }
                        }
                    },
                    "Geometry": {
                        "description": "The request area of interest geometry. This and/or BBOX must be specified. Coordinates need to be in easting,northing or longitude,latitude, in that order in the CRS defined in the \"bounds.properties.crs\" parameter. A GeoJsonObject.",
                        "type": "object",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Polygon"
                            },
                            {
                                "$ref": "#/components/schemas/MultiPolygon"
                            }
                        ],
                        "example": {
                            "type": "Polygon",
                            "coordinates": [
                                [
                                    [
                                        14.000701904296873,
                                        46.23685258143992
                                    ],
                                    [
                                        13.822174072265625,
                                        46.09037664604301
                                    ],
                                    [
                                        14.113311767578125,
                                        45.85080395917834
                                    ],
                                    [
                                        14.55963134765625,
                                        46.038922598236
                                    ],
                                    [
                                        14.441528320312498,
                                        46.28717293114449
                                    ],
                                    [
                                        14.17236328125,
                                        46.29191774991382
                                    ],
                                    [
                                        14.000701904296873,
                                        46.23685258143992
                                    ]
                                ]
                            ]
                        }
                    },
                    "Polygon": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "Polygon"
                                ]
                            },
                            "coordinates": {
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "items": {
                                        "maxItems": 2,
                                        "minItems": 2,
                                        "type": "array",
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "MultiPolygon": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "MultiPolygon"
                                ]
                            },
                            "coordinates": {
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "items": {
                                        "type": "array",
                                        "items": {
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array",
                                            "items": {
                                                "type": "number",
                                                "format": "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "View": {
                        "description": "Links to paginate the resource",
                        "type": "object",
                        "properties": {
                            "currentToken": {
                                "type": "string"
                            },
                            "nextToken": {
                                "type": "string"
                            },
                            "previousToken": {
                                "type": "string"
                            },
                            "@id": {
                                "type": "string",
                                "format": "uri"
                            },
                            "next": {
                                "type": "string",
                                "format": "uri"
                            },
                            "previous": {
                                "type": "string",
                                "format": "uri"
                            }
                        }
                    },
                    "ResourceReference": {
                        "type": "object",
                        "properties": {
                            "@id": {
                                "description": "Resource URL reference",
                                "type": "string"
                            }
                        }
                    },
                    "BaseDataset": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Datasource abbreviation",
                                "type": "string"
                            },
                            "id": {
                                "description": "Identifier",
                                "type": "string"
                            }
                        }
                    },
                    "S2L1CDataset": {
                        "title": "sentinel-2-l1c",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "dataFilter": {
                                        "$ref": "#/components/schemas/S2L1CFiltering"
                                    },
                                    "processing": {
                                        "$ref": "#/components/schemas/S2Processing"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "sentinel-2-l1c"
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "S2L2ADataset": {
                        "title": "sentinel-2-l2a",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "dataFilter": {
                                        "$ref": "#/components/schemas/S2L2AFiltering"
                                    },
                                    "processing": {
                                        "$ref": "#/components/schemas/S2Processing"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "sentinel-2-l2a"
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "LandsatDataset": {
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "dataFilter": {
                                        "$ref": "#/components/schemas/LandsatFiltering"
                                    },
                                    "processing": {
                                        "$ref": "#/components/schemas/BaseDatasetProcessing"
                                    }
                                }
                            }
                        ]
                    },
                    "Ls8Dataset": {
                        "title": "landsat-8-l1c",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LandsatDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "landsat-8-l1c"
                                        ]
                                    },
                                    "dataFilter": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/LandsatFiltering"
                                            },
                                            {
                                                "$ref": "#/components/schemas/LandsatTierFilteringWithRt"
                                            }
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "L8L1Dataset": {
                        "title": "landsat-ot-l1",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LandsatDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "landsat-ot-l1"
                                        ]
                                    },
                                    "dataFilter": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/LandsatFiltering"
                                            },
                                            {
                                                "$ref": "#/components/schemas/LandsatTierFilteringWithRt"
                                            }
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "L8L2Dataset": {
                        "title": "landsat-ot-l2",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LandsatDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "landsat-ot-l2"
                                        ]
                                    },
                                    "dataFilter": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/LandsatFiltering"
                                            },
                                            {
                                                "$ref": "#/components/schemas/LandsatTierFilteringWithoutRt"
                                            }
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "LTML1Dataset": {
                        "title": "landsat-tm-l1",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LandsatDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "landsat-tm-l1"
                                        ]
                                    },
                                    "dataFilter": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/LandsatFiltering"
                                            },
                                            {
                                                "$ref": "#/components/schemas/LandsatTierFilteringWithoutRt"
                                            }
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "LTML2Dataset": {
                        "title": "landsat-tm-l2",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LandsatDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "landsat-tm-l2"
                                        ]
                                    },
                                    "dataFilter": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/LandsatFiltering"
                                            },
                                            {
                                                "$ref": "#/components/schemas/LandsatTierFilteringWithoutRt"
                                            }
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "LETML1Dataset": {
                        "title": "landsat-etm-l1",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LandsatDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "landsat-etm-l1"
                                        ]
                                    },
                                    "dataFilter": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/LandsatFiltering"
                                            },
                                            {
                                                "$ref": "#/components/schemas/LandsatTierFilteringWithRt"
                                            }
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "LETML2Dataset": {
                        "title": "landsat-etm-l2",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LandsatDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "landsat-etm-l2"
                                        ]
                                    },
                                    "dataFilter": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/LandsatFiltering"
                                            },
                                            {
                                                "$ref": "#/components/schemas/LandsatTierFilteringWithoutRt"
                                            }
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "LMSSL1Dataset": {
                        "title": "landsat-mss-l1",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LandsatDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "landsat-mss-l1"
                                        ]
                                    },
                                    "dataFilter": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/LandsatFiltering"
                                            },
                                            {
                                                "$ref": "#/components/schemas/LandsatTierFilteringWithoutRt"
                                            }
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "ModisDataset": {
                        "title": "modis",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "dataFilter": {
                                        "$ref": "#/components/schemas/ModisFiltering"
                                    },
                                    "processing": {
                                        "$ref": "#/components/schemas/BaseDatasetProcessing"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "modis"
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "DEMDataset": {
                        "title": "dem",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "dataFilter": {
                                        "$ref": "#/components/schemas/DEMFiltering"
                                    },
                                    "processing": {
                                        "$ref": "#/components/schemas/DEMProcessing"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "dem"
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "S1Dataset": {
                        "title": "sentinel-1-grd",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "dataFilter": {
                                        "$ref": "#/components/schemas/S1Filtering"
                                    },
                                    "processing": {
                                        "$ref": "#/components/schemas/S1Processing"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "sentinel-1-grd"
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "S3Dataset": {
                        "title": "sentinel-3-olci",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "dataFilter": {
                                        "$ref": "#/components/schemas/S3OlciFiltering"
                                    },
                                    "processing": {
                                        "$ref": "#/components/schemas/BaseDatasetProcessing"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "sentinel-3-olci"
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "S3SlstrDataset": {
                        "title": "sentinel-3-slstr",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "dataFilter": {
                                        "$ref": "#/components/schemas/S3SlstrFiltering"
                                    },
                                    "processing": {
                                        "$ref": "#/components/schemas/S3SlstrProcessing"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "sentinel-3-slstr"
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "S5PDataset": {
                        "title": "sentinel-5p-l2",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "dataFilter": {
                                        "$ref": "#/components/schemas/S5PFiltering"
                                    },
                                    "processing": {
                                        "$ref": "#/components/schemas/S5PProcessing"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "sentinel-5p-l2"
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "HLSDataset": {
                        "title": "hls",
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseDataset"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "hls"
                                        ]
                                    },
                                    "dataFilter": {
                                        "$ref": "#/components/schemas/HLSFiltering"
                                    },
                                    "processing": {
                                        "$ref": "#/components/schemas/BaseDatasetProcessing"
                                    }
                                }
                            }
                        ]
                    },
                    "BYOCDataset": {
                        "title": "BYOC / BATCH / ZARR",
                        "type": "object",
                        "allOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "dataFilter": {
                                        "$ref": "#/components/schemas/BYOCFiltering"
                                    },
                                    "processing": {
                                        "$ref": "#/components/schemas/BaseDatasetProcessing"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "For a BYOC collection, set to \"byoc-\\<collectionId\\>\", for example \"byoc-017aa0ae-33a6-45d3-8548-0f7d1041b40c\".\n\nFor a BATCH collection, set to \"batch-\\<collectionId\\>\", for example \"batch-9688cd56-6c70-4221-add8-a5821d0256a9\".\n\nFor a ZARR collection, set to \"zarr-\\<collectionId\\>\", for example \"zarr-e2c7baec-3dfa-4523-b125-e242bdb5dd7c\".\n"
                                    }
                                }
                            },
                            {
                                "$ref": "#/components/schemas/BaseDataset"
                            }
                        ]
                    },
                    "S2L2AFiltering": {
                        "type": "object",
                        "properties": {
                            "timeRange": {
                                "$ref": "#/components/schemas/TimeRange"
                            },
                            "mosaickingOrder": {
                                "description": "The order in which tiles are overlapped from which the output result is mosaicked.",
                                "type": "string",
                                "enum": [
                                    "mostRecent",
                                    "leastRecent",
                                    "leastCC"
                                ],
                                "default": "mostRecent"
                            },
                            "maxCloudCoverage": {
                                "$ref": "#/components/schemas/MaxCloudCoverage"
                            }
                        }
                    },
                    "S2L1CFiltering": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/S2L2AFiltering"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "previewMode": {
                                        "type": "string",
                                        "description": "The preview mode",
                                        "enum": [
                                            "DETAIL",
                                            "TILE_PREVIEW",
                                            "PREVIEW",
                                            "EXTENDED_PREVIEW"
                                        ],
                                        "default": "DETAIL"
                                    }
                                }
                            }
                        ]
                    },
                    "LandsatFiltering": {
                        "type": "object",
                        "properties": {
                            "timeRange": {
                                "$ref": "#/components/schemas/TimeRange"
                            },
                            "mosaickingOrder": {
                                "description": "The order in which tiles are overlapped from which the output result is mosaicked.",
                                "type": "string",
                                "enum": [
                                    "mostRecent",
                                    "leastRecent",
                                    "leastCC"
                                ],
                                "default": "mostRecent"
                            },
                            "maxCloudCoverage": {
                                "$ref": "#/components/schemas/MaxCloudCoverage"
                            }
                        }
                    },
                    "LandsatTierFilteringWithRt": {
                        "type": "object",
                        "properties": {
                            "tiers": {
                                "type": "string",
                                "default": "ALL_TIERS",
                                "enum": [
                                    "TIER_1",
                                    "TIER_1_AND_RT",
                                    "ALL_TIERS"
                                ]
                            }
                        }
                    },
                    "LandsatTierFilteringWithoutRt": {
                        "type": "object",
                        "properties": {
                            "tiers": {
                                "type": "string",
                                "default": "ALL_TIERS",
                                "enum": [
                                    "TIER_1",
                                    "ALL_TIERS"
                                ]
                            }
                        }
                    },
                    "HLSFiltering": {
                        "type": "object",
                        "properties": {
                            "timeRange": {
                                "$ref": "#/components/schemas/TimeRange"
                            },
                            "mosaickingOrder": {
                                "description": "The order in which tiles are overlapped from which the output result is mosaicked.",
                                "type": "string",
                                "enum": [
                                    "mostRecent",
                                    "leastRecent",
                                    "leastCC"
                                ],
                                "default": "mostRecent"
                            },
                            "maxCloudCoverage": {
                                "$ref": "#/components/schemas/MaxCloudCoverage"
                            },
                            "constellation": {
                                "type": "string",
                                "description": "The selected constellation. \"SENTINEL\" selects only Sentinel products, while \"LANDSAT\" selects only Landsat products.\n\nBy default, products of both constellations are selected.\n",
                                "enum": [
                                    "SENTINEL",
                                    "LANDSAT"
                                ]
                            }
                        }
                    },
                    "ModisFiltering": {
                        "type": "object",
                        "properties": {
                            "timeRange": {
                                "$ref": "#/components/schemas/TimeRange"
                            },
                            "mosaickingOrder": {
                                "description": "The order in which tiles are overlapped from which the output result is mosaicked.",
                                "type": "string",
                                "enum": [
                                    "mostRecent",
                                    "leastRecent"
                                ],
                                "default": "mostRecent"
                            }
                        }
                    },
                    "S1Filtering": {
                        "type": "object",
                        "properties": {
                            "timeRange": {
                                "$ref": "#/components/schemas/TimeRange"
                            },
                            "mosaickingOrder": {
                                "description": "The order in which tiles are overlapped from which the output result is mosaicked.",
                                "type": "string",
                                "enum": [
                                    "mostRecent",
                                    "leastRecent"
                                ],
                                "default": "mostRecent"
                            },
                            "resolution": {
                                "type": "string",
                                "enum": [
                                    "HIGH",
                                    "MEDIUM",
                                    "FULL"
                                ]
                            },
                            "acquisitionMode": {
                                "type": "string",
                                "enum": [
                                    "SM",
                                    "IW",
                                    "EW",
                                    "WV",
                                    "EN",
                                    "AN",
                                    "IM"
                                ]
                            },
                            "polarization": {
                                "type": "string",
                                "enum": [
                                    "SH",
                                    "SV",
                                    "DH",
                                    "DV",
                                    "HH",
                                    "HV",
                                    "VV",
                                    "VH"
                                ]
                            },
                            "orbitDirection": {
                                "type": "string",
                                "enum": [
                                    "ASCENDING",
                                    "DESCENDING"
                                ]
                            },
                            "timeliness": {
                                "type": "string",
                                "enum": [
                                    "NRT10m",
                                    "NRT1h",
                                    "NRT3h",
                                    "Fast24h",
                                    "Offline",
                                    "Reprocessing",
                                    "ArchNormal"
                                ]
                            }
                        }
                    },
                    "S3OlciFiltering": {
                        "type": "object",
                        "properties": {
                            "timeRange": {
                                "$ref": "#/components/schemas/TimeRange"
                            },
                            "mosaickingOrder": {
                                "description": "The order in which tiles are overlapped from which the output result is mosaicked.",
                                "type": "string",
                                "enum": [
                                    "mostRecent",
                                    "leastRecent"
                                ],
                                "default": "mostRecent"
                            }
                        }
                    },
                    "S3SlstrFiltering": {
                        "type": "object",
                        "properties": {
                            "timeRange": {
                                "$ref": "#/components/schemas/TimeRange"
                            },
                            "mosaickingOrder": {
                                "description": "The order in which tiles are overlapped from which the output result is mosaicked.",
                                "type": "string",
                                "enum": [
                                    "mostRecent",
                                    "leastRecent",
                                    "leastCC"
                                ],
                                "default": "mostRecent"
                            },
                            "maxCloudCoverage": {
                                "$ref": "#/components/schemas/MaxCloudCoverage"
                            },
                            "orbitDirection": {
                                "description": "Orbit direction.",
                                "type": "string",
                                "enum": [
                                    "ASCENDING",
                                    "DESCENDING"
                                ]
                            }
                        }
                    },
                    "S5PFiltering": {
                        "type": "object",
                        "properties": {
                            "timeRange": {
                                "$ref": "#/components/schemas/TimeRange"
                            },
                            "mosaickingOrder": {
                                "description": "The order in which tiles are overlapped from which the output result is mosaicked.",
                                "type": "string",
                                "enum": [
                                    "mostRecent",
                                    "leastRecent"
                                ],
                                "default": "mostRecent"
                            },
                            "timeliness": {
                                "description": "Data timeliness.",
                                "type": "string",
                                "enum": [
                                    "NRTI",
                                    "OFFL",
                                    "RPRO"
                                ]
                            }
                        }
                    },
                    "BYOCFiltering": {
                        "type": "object",
                        "properties": {
                            "timeRange": {
                                "$ref": "#/components/schemas/TimeRange"
                            },
                            "mosaickingOrder": {
                                "description": "The order in which tiles are overlapped from which the output result is mosaicked.",
                                "type": "string",
                                "enum": [
                                    "mostRecent",
                                    "leastRecent"
                                ],
                                "default": "mostRecent"
                            }
                        }
                    },
                    "DEMFiltering": {
                        "type": "object",
                        "properties": {
                            "demInstance": {
                                "description": "Selects DEM instance.",
                                "type": "string",
                                "enum": [
                                    "MAPZEN",
                                    "COPERNICUS_30",
                                    "COPERNICUS_90"
                                ],
                                "default": "MAPZEN"
                            }
                        }
                    },
                    "TimeRange": {
                        "type": "object",
                        "description": "A time interval to filter data by acquisition date. It is defined by a start and end date and time, e.g. 2019-01-31T14:00:00+01:00. A date representation without time (e.g. 2019-01-31) will not work. Both the start and end of a time interval are inclusive and can be equal.",
                        "properties": {
                            "from": {
                                "description": "The start of a search interval.",
                                "type": "string",
                                "format": "date-time"
                            },
                            "to": {
                                "description": "The end of a search interval.",
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "example": {
                            "from": 